<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="queue_8c" kind="file" language="C++">
    <compoundname>queue.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="_free_r_t_o_s_8h" local="yes">FreeRTOS.h</includes>
    <includes refid="task_8h" local="yes">task.h</includes>
    <includes refid="queue_8h" local="yes">queue.h</includes>
    <incdepgraph>
      <node id="7">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
      </node>
      <node id="4">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>deprecated_definitions.h</label>
        <link refid="deprecated__definitions_8h"/>
      </node>
      <node id="14">
        <label>list.h</label>
        <link refid="list_8h"/>
      </node>
      <node id="12">
        <label>mpu_wrappers.h</label>
        <link refid="mpu__wrappers_8h"/>
      </node>
      <node id="9">
        <label>portable.h</label>
        <link refid="portable_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>projdefs.h</label>
        <link refid="projdefs_8h"/>
      </node>
      <node id="15">
        <label>queue.h</label>
        <link refid="queue_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>portmacro.h</label>
        <link refid="portmacro_8h"/>
      </node>
      <node id="1">
        <label>NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c</label>
        <link refid="queue_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_queue_pointers" prot="public">QueuePointers</innerclass>
    <innerclass refid="struct_semaphore_data" prot="public">SemaphoreData</innerclass>
    <innerclass refid="struct_queue_definition" prot="public">QueueDefinition</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="queue_8c_1ab622d8c674f2a417a666a7ed89109e79" prot="public" static="no">
        <name>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="34" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" prot="public" static="no">
        <name>queueUNLOCKED</name>
        <initializer>( ( int8_t ) -1 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="52" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="52" bodyend="-1"/>
        <referencedby refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" compoundref="queue_8c" startline="2171" endline="2288">prvUnlockQueue</referencedby>
        <referencedby refid="queue_8h_1a3c13a9fe455ec2d35b5f8386a1040599" compoundref="queue_8c" startline="255" endline="305">xQueueGenericReset</referencedby>
        <referencedby refid="queue_8h_1a263711eb0124112e828a18fd4b8ab29d" compoundref="queue_8c" startline="950" endline="1109">xQueueGenericSendFromISR</referencedby>
        <referencedby refid="queue_8h_1ad14ae1174c2772cffc9e0c2c45dc55a6" compoundref="queue_8c" startline="1112" endline="1274">xQueueGiveFromISR</referencedby>
        <referencedby refid="queue_8h_1acdf528f5c91131ae2f31c669cfd65758" compoundref="queue_8c" startline="1785" endline="1873">xQueueReceiveFromISR</referencedby>
      </memberdef>
      <memberdef kind="define" id="queue_8c_1a60a95aa91f84782416755f38616231fd" prot="public" static="no">
        <name>queueLOCKED_UNMODIFIED</name>
        <initializer>( ( int8_t ) 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="53" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="53" bodyend="-1"/>
        <referencedby refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" compoundref="queue_8c" startline="2171" endline="2288">prvUnlockQueue</referencedby>
      </memberdef>
      <memberdef kind="define" id="queue_8c_1afe3f7afb2a02c085f2d634003902cbc0" prot="public" static="no">
        <name>uxQueueType</name>
        <initializer>pcHead</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="64" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" prot="public" static="no">
        <name>queueQUEUE_IS_MUTEX</name>
        <initializer>NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="65" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="65" bodyend="-1"/>
        <referencedby refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" compoundref="queue_8c" startline="2074" endline="2150">prvCopyDataToQueue</referencedby>
        <referencedby refid="queue_8h_1ad14ae1174c2772cffc9e0c2c45dc55a6" compoundref="queue_8c" startline="1112" endline="1274">xQueueGiveFromISR</referencedby>
        <referencedby refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" compoundref="queue_8c" startline="1418" endline="1633">xQueueSemaphoreTake</referencedby>
      </memberdef>
      <memberdef kind="define" id="queue_8c_1adfb14d07644ad4da4bd2303105884227" prot="public" static="no">
        <name>queueSEMAPHORE_QUEUE_ITEM_LENGTH</name>
        <initializer>( ( <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref> ) 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="81" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8c_1a166c89c5c3a213c7e52283e024bb1d50" prot="public" static="no">
        <name>queueMUTEX_GIVE_BLOCK_TIME</name>
        <initializer>( ( <ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref> ) 0U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="82" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" prot="public" static="no">
        <name>queueYIELD_IF_USING_PREEMPTION</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="87" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="87" bodyend="-1"/>
        <referencedby refid="queue_8h_1a3c13a9fe455ec2d35b5f8386a1040599" compoundref="queue_8c" startline="255" endline="305">xQueueGenericReset</referencedby>
        <referencedby refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" compoundref="queue_8c" startline="740" endline="947">xQueueGenericSend</referencedby>
        <referencedby refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" compoundref="queue_8c" startline="1636" endline="1782">xQueuePeek</referencedby>
        <referencedby refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" compoundref="queue_8c" startline="1277" endline="1415">xQueueReceive</referencedby>
        <referencedby refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" compoundref="queue_8c" startline="1418" endline="1633">xQueueSemaphoreTake</referencedby>
      </memberdef>
      <memberdef kind="define" id="queue_8c_1ae4efd14c0f4dee7f189ef2e4d9ce1f1b" prot="public" static="no">
        <name>prvLockQueue</name>
        <param><defname>pxQueue</defname></param>
        <initializer>	<ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();									\
	{														\
		if( ( pxQueue )-&gt;cRxLock == <ref refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" kindref="member">queueUNLOCKED</ref> )			\
		{													\
			( pxQueue )-&gt;cRxLock = <ref refid="queue_8c_1a60a95aa91f84782416755f38616231fd" kindref="member">queueLOCKED_UNMODIFIED</ref>;	\
		}													\
		if( ( pxQueue )-&gt;cTxLock == <ref refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" kindref="member">queueUNLOCKED</ref> )			\
		{													\
			( pxQueue )-&gt;cTxLock = <ref refid="queue_8c_1a60a95aa91f84782416755f38616231fd" kindref="member">queueLOCKED_UNMODIFIED</ref>;	\
		}													\
	}														\
	<ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="240" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="240" bodyend="252"/>
        <referencedby refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" compoundref="queue_8c" startline="740" endline="947">xQueueGenericSend</referencedby>
        <referencedby refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" compoundref="queue_8c" startline="1636" endline="1782">xQueuePeek</referencedby>
        <referencedby refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" compoundref="queue_8c" startline="1277" endline="1415">xQueueReceive</referencedby>
        <referencedby refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" compoundref="queue_8c" startline="1418" endline="1633">xQueueSemaphoreTake</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="queue_8c_1afa576747932ccf4c923633fc6a46a0d8" prot="public" static="no">
        <type>struct <ref refid="struct_queue_pointers" kindref="compound">QueuePointers</ref></type>
        <definition>typedef struct QueuePointers QueuePointers_t</definition>
        <argsstring></argsstring>
        <name>QueuePointers_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="71" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="queue_8c_1a8806dcfc511df585a0b4daf54a9a909a" prot="public" static="no">
        <type>struct <ref refid="struct_semaphore_data" kindref="compound">SemaphoreData</ref></type>
        <definition>typedef struct SemaphoreData SemaphoreData_t</definition>
        <argsstring></argsstring>
        <name>SemaphoreData_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="77" column="17"/>
      </memberdef>
      <memberdef kind="typedef" id="queue_8c_1a3c73744015d2aad19ca749e89e747e2a" prot="public" static="no">
        <type>struct <ref refid="struct_queue_definition" kindref="compound">QueueDefinition</ref></type>
        <definition>typedef struct QueueDefinition xQUEUE</definition>
        <argsstring></argsstring>
        <name>xQUEUE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="131" column="8"/>
      </memberdef>
      <memberdef kind="typedef" id="queue_8c_1ade16d14675fc1ac34af04a1162a6b883" prot="public" static="no">
        <type><ref refid="queue_8c_1a3c73744015d2aad19ca749e89e747e2a" kindref="member">xQUEUE</ref></type>
        <definition>typedef xQUEUE Queue_t</definition>
        <argsstring></argsstring>
        <name>Queue_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="135" column="16" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="135" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvUnlockQueue</definition>
        <argsstring>(Queue_t *const pxQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>prvUnlockQueue</name>
        <param>
          <type><ref refid="queue_8c_1ade16d14675fc1ac34af04a1162a6b883" kindref="member">Queue_t</ref> *const</type>
          <declname>pxQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="2171" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="2171" bodyend="2288" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" declline="174" declcolumn="13"/>
        <references refid="struct_queue_definition_1ac750a3f75a6e174adbc697e473a0dd13" compoundref="queue_8c" startline="115">QueueDefinition::cRxLock</references>
        <references refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" compoundref="queue_8c" startline="116">QueueDefinition::cTxLock</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="queue_8c_1a60a95aa91f84782416755f38616231fd" compoundref="queue_8c" startline="53">queueLOCKED_UNMODIFIED</references>
        <references refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" compoundref="queue_8c" startline="52">queueUNLOCKED</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="task_8h_1a998c69e37431a3a32c637b31ff60089a" compoundref="tasks_8c" startline="3336" endline="3339">vTaskMissedYield</references>
        <references refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</references>
        <references refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" compoundref="queue_8c" startline="109">QueueDefinition::xTasksWaitingToReceive</references>
        <references refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" compoundref="queue_8c" startline="108">QueueDefinition::xTasksWaitingToSend</references>
        <referencedby refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" compoundref="queue_8c" startline="740" endline="947">xQueueGenericSend</referencedby>
        <referencedby refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" compoundref="queue_8c" startline="1636" endline="1782">xQueuePeek</referencedby>
        <referencedby refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" compoundref="queue_8c" startline="1277" endline="1415">xQueueReceive</referencedby>
        <referencedby refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" compoundref="queue_8c" startline="1418" endline="1633">xQueueSemaphoreTake</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>static BaseType_t prvIsQueueEmpty</definition>
        <argsstring>(const Queue_t *pxQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>prvIsQueueEmpty</name>
        <param>
          <type>const <ref refid="queue_8c_1ade16d14675fc1ac34af04a1162a6b883" kindref="member">Queue_t</ref> *</type>
          <declname>pxQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="2291" column="19" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="2291" bodyend="2309" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" declline="181" declcolumn="19"/>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <referencedby refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" compoundref="queue_8c" startline="1636" endline="1782">xQueuePeek</referencedby>
        <referencedby refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" compoundref="queue_8c" startline="1277" endline="1415">xQueueReceive</referencedby>
        <referencedby refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" compoundref="queue_8c" startline="1418" endline="1633">xQueueSemaphoreTake</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a70546f6b48a8b715eae3dd84e0546045" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>static BaseType_t prvIsQueueFull</definition>
        <argsstring>(const Queue_t *pxQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>prvIsQueueFull</name>
        <param>
          <type>const <ref refid="queue_8c_1ade16d14675fc1ac34af04a1162a6b883" kindref="member">Queue_t</ref> *</type>
          <declname>pxQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="2331" column="19" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="2331" bodyend="2349" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" declline="188" declcolumn="19"/>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" compoundref="queue_8c" startline="112">QueueDefinition::uxLength</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <referencedby refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" compoundref="queue_8c" startline="740" endline="947">xQueueGenericSend</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a77098159b7735e0c27e27aa7072376c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>static BaseType_t prvCopyDataToQueue</definition>
        <argsstring>(Queue_t *const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition) PRIVILEGED_FUNCTION</argsstring>
        <name>prvCopyDataToQueue</name>
        <param>
          <type><ref refid="queue_8c_1ade16d14675fc1ac34af04a1162a6b883" kindref="member">Queue_t</ref> *const</type>
          <declname>pxQueue</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pvItemToQueue</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
          <declname>xPosition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="2074" column="19" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="2074" bodyend="2150" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" declline="194" declcolumn="19"/>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" compoundref="queue_8c" startline="99">QueueDefinition::pcHead</references>
        <references refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" compoundref="queue_8c" startline="70">QueuePointers::pcReadFrom</references>
        <references refid="struct_queue_pointers_1acbbdc8eb47b348a824c7bced41512a38" compoundref="queue_8c" startline="69">QueuePointers::pcTail</references>
        <references refid="struct_queue_definition_1abdf13cc013c8488848cee3fce4f0fed3" compoundref="queue_8c" startline="100">QueueDefinition::pcWriteTo</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="queue_8h_1a5bb1c4a46d4b08b6d35cf586983476ef" compoundref="queue_8h" startline="67">queueOVERWRITE</references>
        <references refid="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" compoundref="queue_8c" startline="65">queueQUEUE_IS_MUTEX</references>
        <references refid="queue_8h_1a4d78fa863fbeb90425a2dda08fae8b12" compoundref="queue_8h" startline="65">queueSEND_TO_BACK</references>
        <references refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81">QueueDefinition::u</references>
        <references refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" compoundref="queue_8c" startline="113">QueueDefinition::uxItemSize</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <references refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" compoundref="queue_8c" startline="75">SemaphoreData::xMutexHolder</references>
        <references refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" compoundref="queue_8c" startline="104">QueueDefinition::xQueue</references>
        <references refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" compoundref="queue_8c" startline="105">QueueDefinition::xSemaphore</references>
        <references refid="task_8h_1a02fe2e1419fd6c35f75a1357c5e5ce22">xTaskPriorityDisinherit</references>
        <referencedby refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" compoundref="queue_8c" startline="740" endline="947">xQueueGenericSend</referencedby>
        <referencedby refid="queue_8h_1a263711eb0124112e828a18fd4b8ab29d" compoundref="queue_8c" startline="950" endline="1109">xQueueGenericSendFromISR</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvCopyDataFromQueue</definition>
        <argsstring>(Queue_t *const pxQueue, void *const pvBuffer) PRIVILEGED_FUNCTION</argsstring>
        <name>prvCopyDataFromQueue</name>
        <param>
          <type><ref refid="queue_8c_1ade16d14675fc1ac34af04a1162a6b883" kindref="member">Queue_t</ref> *const</type>
          <declname>pxQueue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>pvBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="2153" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="2153" bodyend="2168" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" declline="199" declcolumn="13"/>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" compoundref="queue_8c" startline="99">QueueDefinition::pcHead</references>
        <references refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" compoundref="queue_8c" startline="70">QueuePointers::pcReadFrom</references>
        <references refid="struct_queue_pointers_1acbbdc8eb47b348a824c7bced41512a38" compoundref="queue_8c" startline="69">QueuePointers::pcTail</references>
        <references refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81">QueueDefinition::u</references>
        <references refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" compoundref="queue_8c" startline="113">QueueDefinition::uxItemSize</references>
        <references refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" compoundref="queue_8c" startline="104">QueueDefinition::xQueue</references>
        <referencedby refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" compoundref="queue_8c" startline="1636" endline="1782">xQueuePeek</referencedby>
        <referencedby refid="queue_8h_1ac402adf98be1fb8ca0345f30dc11a9dc" compoundref="queue_8c" startline="1876" endline="1927">xQueuePeekFromISR</referencedby>
        <referencedby refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" compoundref="queue_8c" startline="1277" endline="1415">xQueueReceive</referencedby>
        <referencedby refid="queue_8h_1acdf528f5c91131ae2f31c669cfd65758" compoundref="queue_8c" startline="1785" endline="1873">xQueueReceiveFromISR</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a0f632268707981dea3f177f5fba36e22" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvInitialiseNewQueue</definition>
        <argsstring>(const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue) PRIVILEGED_FUNCTION</argsstring>
        <name>prvInitialiseNewQueue</name>
        <param>
          <type>const <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref></type>
          <declname>uxQueueLength</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref></type>
          <declname>uxItemSize</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pucQueueStorage</declname>
        </param>
        <param>
          <type>const uint8_t</type>
          <declname>ucQueueType</declname>
        </param>
        <param>
          <type><ref refid="queue_8c_1ade16d14675fc1ac34af04a1162a6b883" kindref="member">Queue_t</ref> *</type>
          <declname>pxNewQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="422" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="422" bodyend="461" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" declline="213" declcolumn="13"/>
        <references refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" compoundref="queue_8c" startline="99">QueueDefinition::pcHead</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1a62dcc27e040063ec72e174c985740f96" compoundref="_free_r_t_o_s_8h" startline="420">traceQUEUE_CREATE</references>
        <references refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" compoundref="queue_8c" startline="113">QueueDefinition::uxItemSize</references>
        <references refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" compoundref="queue_8c" startline="112">QueueDefinition::uxLength</references>
        <references refid="queue_8c_1a5e54273dbe3f56b8bdc8f7abee67a871" compoundref="queue_8c" startline="255" endline="305">xQueueGenericReset</references>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a5e54273dbe3f56b8bdc8f7abee67a871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xQueueGenericReset</definition>
        <argsstring>(QueueHandle_t xQueue, BaseType_t xNewQueue)</argsstring>
        <name>xQueueGenericReset</name>
        <param>
          <type><ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
          <declname>xNewQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="255" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="255" bodyend="305"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="struct_queue_definition_1ac750a3f75a6e174adbc697e473a0dd13" compoundref="queue_8c" startline="115">QueueDefinition::cRxLock</references>
        <references refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" compoundref="queue_8c" startline="116">QueueDefinition::cTxLock</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" compoundref="queue_8c" startline="99">QueueDefinition::pcHead</references>
        <references refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" compoundref="queue_8c" startline="70">QueuePointers::pcReadFrom</references>
        <references refid="struct_queue_pointers_1acbbdc8eb47b348a824c7bced41512a38" compoundref="queue_8c" startline="69">QueuePointers::pcTail</references>
        <references refid="struct_queue_definition_1abdf13cc013c8488848cee3fce4f0fed3" compoundref="queue_8c" startline="100">QueueDefinition::pcWriteTo</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" compoundref="queue_8c" startline="52">queueUNLOCKED</references>
        <references refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" compoundref="queue_8c" startline="87">queueYIELD_IF_USING_PREEMPTION</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81">QueueDefinition::u</references>
        <references refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" compoundref="queue_8c" startline="113">QueueDefinition::uxItemSize</references>
        <references refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" compoundref="queue_8c" startline="112">QueueDefinition::uxLength</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <references refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" compoundref="list_8c" startline="37" endline="59">vListInitialise</references>
        <references refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" compoundref="queue_8c" startline="104">QueueDefinition::xQueue</references>
        <references refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</references>
        <references refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" compoundref="queue_8c" startline="109">QueueDefinition::xTasksWaitingToReceive</references>
        <references refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" compoundref="queue_8c" startline="108">QueueDefinition::xTasksWaitingToSend</references>
        <referencedby refid="queue_8c_1a0f632268707981dea3f177f5fba36e22" compoundref="queue_8c" startline="422" endline="461">prvInitialiseNewQueue</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1acb67c81366c00896b21cd826e07d885d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xQueueGenericSend</definition>
        <argsstring>(QueueHandle_t xQueue, const void *const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition)</argsstring>
        <name>xQueueGenericSend</name>
        <param>
          <type><ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>const void *const</type>
          <declname>pvItemToQueue</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
          <declname>xCopyPosition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="740" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="740" bodyend="947"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1ae40de11e4044a83a97d2cb5d00ce608b" compoundref="projdefs_8h" startline="50">errQUEUE_FULL</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" compoundref="_free_r_t_o_s_8h" startline="746">portYIELD_WITHIN_API</references>
        <references refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" compoundref="queue_8c" startline="2074" endline="2150">prvCopyDataToQueue</references>
        <references refid="queue_8c_1a70546f6b48a8b715eae3dd84e0546045" compoundref="queue_8c" startline="2331" endline="2349">prvIsQueueFull</references>
        <references refid="queue_8c_1ae4efd14c0f4dee7f189ef2e4d9ce1f1b" compoundref="queue_8c" startline="240" endline="252">prvLockQueue</references>
        <references refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" compoundref="queue_8c" startline="2171" endline="2288">prvUnlockQueue</references>
        <references refid="queue_8h_1a5bb1c4a46d4b08b6d35cf586983476ef" compoundref="queue_8h" startline="67">queueOVERWRITE</references>
        <references refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" compoundref="queue_8c" startline="87">queueYIELD_IF_USING_PREEMPTION</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" compoundref="task_8h" startline="227">taskSCHEDULER_SUSPENDED</references>
        <references refid="_free_r_t_o_s_8h_1a9484f4523e4bec2ab2dc233f2556c3c5" compoundref="_free_r_t_o_s_8h" startline="394">traceBLOCKING_ON_QUEUE_SEND</references>
        <references refid="_free_r_t_o_s_8h_1a5cfc9dd899c89966172cb329740f551a" compoundref="_free_r_t_o_s_8h" startline="460">traceQUEUE_SEND</references>
        <references refid="_free_r_t_o_s_8h_1ab4896b8d7e443200918a6e4a7f64585d" compoundref="_free_r_t_o_s_8h" startline="464">traceQUEUE_SEND_FAILED</references>
        <references refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" compoundref="queue_8c" startline="113">QueueDefinition::uxItemSize</references>
        <references refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" compoundref="queue_8c" startline="112">QueueDefinition::uxLength</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <references refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" compoundref="tasks_8c" startline="3265" endline="3270">vTaskInternalSetTimeOutState</references>
        <references refid="task_8h_1a56ae23bc0dece4522d666959902221ca" compoundref="tasks_8c" startline="3063" endline="3077">vTaskPlaceOnEventList</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" compoundref="tasks_8c" startline="3273" endline="3333">xTaskCheckForTimeOut</references>
        <references refid="task_8h_1a0241000e08a261372186d34825a35979">xTaskGetSchedulerState</references>
        <references refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" compoundref="queue_8c" startline="109">QueueDefinition::xTasksWaitingToReceive</references>
        <references refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" compoundref="queue_8c" startline="108">QueueDefinition::xTasksWaitingToSend</references>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a0fb58b25eb396a5cf8e1688b7e1a56cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xQueueGenericSendFromISR</definition>
        <argsstring>(QueueHandle_t xQueue, const void *const pvItemToQueue, BaseType_t *const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition)</argsstring>
        <name>xQueueGenericSendFromISR</name>
        <param>
          <type><ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>const void *const</type>
          <declname>pvItemToQueue</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref> *const</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
          <declname>xCopyPosition</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="950" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="950" bodyend="1109"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" compoundref="queue_8c" startline="116">QueueDefinition::cTxLock</references>
        <references refid="projdefs_8h_1ae40de11e4044a83a97d2cb5d00ce608b" compoundref="projdefs_8h" startline="50">errQUEUE_FULL</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" compoundref="_free_r_t_o_s_8h" startline="806">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</references>
        <references refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" compoundref="_free_r_t_o_s_8h" startline="286">portCLEAR_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" compoundref="_free_r_t_o_s_8h" startline="282">portSET_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" compoundref="queue_8c" startline="2074" endline="2150">prvCopyDataToQueue</references>
        <references refid="queue_8h_1a5bb1c4a46d4b08b6d35cf586983476ef" compoundref="queue_8h" startline="67">queueOVERWRITE</references>
        <references refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" compoundref="queue_8c" startline="52">queueUNLOCKED</references>
        <references refid="_free_r_t_o_s_8h_1a590bfae4dcb6be8a4b3daadf09a1b587" compoundref="_free_r_t_o_s_8h" startline="488">traceQUEUE_SEND_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a71fa002ce8a199d38e697d94c613649f" compoundref="_free_r_t_o_s_8h" startline="492">traceQUEUE_SEND_FROM_ISR_FAILED</references>
        <references refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" compoundref="queue_8c" startline="113">QueueDefinition::uxItemSize</references>
        <references refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" compoundref="queue_8c" startline="112">QueueDefinition::uxLength</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <references refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</references>
        <references refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" compoundref="queue_8c" startline="109">QueueDefinition::xTasksWaitingToReceive</references>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a4df49fafb6ba4400ede6f2d07a40865f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xQueueGiveFromISR</definition>
        <argsstring>(QueueHandle_t xQueue, BaseType_t *const pxHigherPriorityTaskWoken)</argsstring>
        <name>xQueueGiveFromISR</name>
        <param>
          <type><ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref> *const</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="1112" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1112" bodyend="1274"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" compoundref="queue_8c" startline="116">QueueDefinition::cTxLock</references>
        <references refid="projdefs_8h_1ae40de11e4044a83a97d2cb5d00ce608b" compoundref="projdefs_8h" startline="50">errQUEUE_FULL</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" compoundref="_free_r_t_o_s_8h" startline="806">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</references>
        <references refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" compoundref="_free_r_t_o_s_8h" startline="286">portCLEAR_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" compoundref="_free_r_t_o_s_8h" startline="282">portSET_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" compoundref="queue_8c" startline="65">queueQUEUE_IS_MUTEX</references>
        <references refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" compoundref="queue_8c" startline="52">queueUNLOCKED</references>
        <references refid="_free_r_t_o_s_8h_1a590bfae4dcb6be8a4b3daadf09a1b587" compoundref="_free_r_t_o_s_8h" startline="488">traceQUEUE_SEND_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a71fa002ce8a199d38e697d94c613649f" compoundref="_free_r_t_o_s_8h" startline="492">traceQUEUE_SEND_FROM_ISR_FAILED</references>
        <references refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81">QueueDefinition::u</references>
        <references refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" compoundref="queue_8c" startline="113">QueueDefinition::uxItemSize</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <references refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" compoundref="queue_8c" startline="75">SemaphoreData::xMutexHolder</references>
        <references refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" compoundref="queue_8c" startline="105">QueueDefinition::xSemaphore</references>
        <references refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</references>
        <references refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" compoundref="queue_8c" startline="109">QueueDefinition::xTasksWaitingToReceive</references>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1ad0a166f3b1219a5e37e31f8090d4800d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xQueueReceive</definition>
        <argsstring>(QueueHandle_t xQueue, void *const pvBuffer, TickType_t xTicksToWait)</argsstring>
        <name>xQueueReceive</name>
        <param>
          <type><ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>pvBuffer</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="1277" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1277" bodyend="1415"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1a4d79b09954b1efa73ad8d87a36b4a575" compoundref="projdefs_8h" startline="49">errQUEUE_EMPTY</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" compoundref="_free_r_t_o_s_8h" startline="746">portYIELD_WITHIN_API</references>
        <references refid="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" compoundref="queue_8c" startline="2153" endline="2168">prvCopyDataFromQueue</references>
        <references refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" compoundref="queue_8c" startline="2291" endline="2309">prvIsQueueEmpty</references>
        <references refid="queue_8c_1ae4efd14c0f4dee7f189ef2e4d9ce1f1b" compoundref="queue_8c" startline="240" endline="252">prvLockQueue</references>
        <references refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" compoundref="queue_8c" startline="2171" endline="2288">prvUnlockQueue</references>
        <references refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" compoundref="queue_8c" startline="87">queueYIELD_IF_USING_PREEMPTION</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" compoundref="task_8h" startline="227">taskSCHEDULER_SUSPENDED</references>
        <references refid="_free_r_t_o_s_8h_1a657997eddb8c89bef7157e74bac003e2" compoundref="_free_r_t_o_s_8h" startline="378">traceBLOCKING_ON_QUEUE_RECEIVE</references>
        <references refid="_free_r_t_o_s_8h_1a82b39aa722910a5e43793e882ded0faf" compoundref="_free_r_t_o_s_8h" startline="468">traceQUEUE_RECEIVE</references>
        <references refid="_free_r_t_o_s_8h_1a0dbf5969c9d984920177a19d5b402e4e" compoundref="_free_r_t_o_s_8h" startline="484">traceQUEUE_RECEIVE_FAILED</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <references refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" compoundref="tasks_8c" startline="3265" endline="3270">vTaskInternalSetTimeOutState</references>
        <references refid="task_8h_1a56ae23bc0dece4522d666959902221ca" compoundref="tasks_8c" startline="3063" endline="3077">vTaskPlaceOnEventList</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" compoundref="tasks_8c" startline="3273" endline="3333">xTaskCheckForTimeOut</references>
        <references refid="task_8h_1a0241000e08a261372186d34825a35979">xTaskGetSchedulerState</references>
        <references refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" compoundref="queue_8c" startline="109">QueueDefinition::xTasksWaitingToReceive</references>
        <references refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" compoundref="queue_8c" startline="108">QueueDefinition::xTasksWaitingToSend</references>
        <referencedby refid="cmsis__os2_8c_1ad90d4959466a7a65105061da8256ab9e" compoundref="cmsis__os2_8c" startline="1791" endline="1830">osMessageQueueGet</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1ade45e48664e5ec17ea091f00cd34394f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xQueueSemaphoreTake</definition>
        <argsstring>(QueueHandle_t xQueue, TickType_t xTicksToWait)</argsstring>
        <name>xQueueSemaphoreTake</name>
        <param>
          <type><ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="1418" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1418" bodyend="1633"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1a4d79b09954b1efa73ad8d87a36b4a575" compoundref="projdefs_8h" startline="49">errQUEUE_EMPTY</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" compoundref="_free_r_t_o_s_8h" startline="746">portYIELD_WITHIN_API</references>
        <references refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" compoundref="queue_8c" startline="2291" endline="2309">prvIsQueueEmpty</references>
        <references refid="queue_8c_1ae4efd14c0f4dee7f189ef2e4d9ce1f1b" compoundref="queue_8c" startline="240" endline="252">prvLockQueue</references>
        <references refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" compoundref="queue_8c" startline="2171" endline="2288">prvUnlockQueue</references>
        <references refid="task_8h_1a54430b124666d513049dcbf888e6935f">pvTaskIncrementMutexHeldCount</references>
        <references refid="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" compoundref="queue_8c" startline="65">queueQUEUE_IS_MUTEX</references>
        <references refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" compoundref="queue_8c" startline="87">queueYIELD_IF_USING_PREEMPTION</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" compoundref="task_8h" startline="227">taskSCHEDULER_SUSPENDED</references>
        <references refid="_free_r_t_o_s_8h_1a657997eddb8c89bef7157e74bac003e2" compoundref="_free_r_t_o_s_8h" startline="378">traceBLOCKING_ON_QUEUE_RECEIVE</references>
        <references refid="_free_r_t_o_s_8h_1a82b39aa722910a5e43793e882ded0faf" compoundref="_free_r_t_o_s_8h" startline="468">traceQUEUE_RECEIVE</references>
        <references refid="_free_r_t_o_s_8h_1a0dbf5969c9d984920177a19d5b402e4e" compoundref="_free_r_t_o_s_8h" startline="484">traceQUEUE_RECEIVE_FAILED</references>
        <references refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81">QueueDefinition::u</references>
        <references refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" compoundref="queue_8c" startline="113">QueueDefinition::uxItemSize</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <references refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" compoundref="tasks_8c" startline="3265" endline="3270">vTaskInternalSetTimeOutState</references>
        <references refid="task_8h_1a56ae23bc0dece4522d666959902221ca" compoundref="tasks_8c" startline="3063" endline="3077">vTaskPlaceOnEventList</references>
        <references refid="task_8h_1aa11e6a58d2534fe91ed8ee3a02c9b5e0">vTaskPriorityDisinheritAfterTimeout</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" compoundref="queue_8c" startline="75">SemaphoreData::xMutexHolder</references>
        <references refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" compoundref="queue_8c" startline="105">QueueDefinition::xSemaphore</references>
        <references refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" compoundref="tasks_8c" startline="3273" endline="3333">xTaskCheckForTimeOut</references>
        <references refid="task_8h_1a0241000e08a261372186d34825a35979">xTaskGetSchedulerState</references>
        <references refid="task_8h_1aa715a488a6014df5a9393ca38c5938c0">xTaskPriorityInherit</references>
        <references refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" compoundref="queue_8c" startline="109">QueueDefinition::xTasksWaitingToReceive</references>
        <references refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" compoundref="queue_8c" startline="108">QueueDefinition::xTasksWaitingToSend</references>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a8f68e37e931bbf95440c8845f512e090" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xQueuePeek</definition>
        <argsstring>(QueueHandle_t xQueue, void *const pvBuffer, TickType_t xTicksToWait)</argsstring>
        <name>xQueuePeek</name>
        <param>
          <type><ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>pvBuffer</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="1636" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1636" bodyend="1782"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1a4d79b09954b1efa73ad8d87a36b4a575" compoundref="projdefs_8h" startline="49">errQUEUE_EMPTY</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" compoundref="queue_8c" startline="70">QueuePointers::pcReadFrom</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" compoundref="_free_r_t_o_s_8h" startline="746">portYIELD_WITHIN_API</references>
        <references refid="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" compoundref="queue_8c" startline="2153" endline="2168">prvCopyDataFromQueue</references>
        <references refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" compoundref="queue_8c" startline="2291" endline="2309">prvIsQueueEmpty</references>
        <references refid="queue_8c_1ae4efd14c0f4dee7f189ef2e4d9ce1f1b" compoundref="queue_8c" startline="240" endline="252">prvLockQueue</references>
        <references refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" compoundref="queue_8c" startline="2171" endline="2288">prvUnlockQueue</references>
        <references refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" compoundref="queue_8c" startline="87">queueYIELD_IF_USING_PREEMPTION</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" compoundref="task_8h" startline="227">taskSCHEDULER_SUSPENDED</references>
        <references refid="_free_r_t_o_s_8h_1a186c66f73c470500e556ec0f2fd3994f" compoundref="_free_r_t_o_s_8h" startline="386">traceBLOCKING_ON_QUEUE_PEEK</references>
        <references refid="_free_r_t_o_s_8h_1acd24b909ecdd18ed844cdede3027e534" compoundref="_free_r_t_o_s_8h" startline="472">traceQUEUE_PEEK</references>
        <references refid="_free_r_t_o_s_8h_1afa4b34739a92eb44f09947a669c98fb7" compoundref="_free_r_t_o_s_8h" startline="476">traceQUEUE_PEEK_FAILED</references>
        <references refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81">QueueDefinition::u</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <references refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" compoundref="tasks_8c" startline="3265" endline="3270">vTaskInternalSetTimeOutState</references>
        <references refid="task_8h_1a56ae23bc0dece4522d666959902221ca" compoundref="tasks_8c" startline="3063" endline="3077">vTaskPlaceOnEventList</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" compoundref="queue_8c" startline="104">QueueDefinition::xQueue</references>
        <references refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" compoundref="tasks_8c" startline="3273" endline="3333">xTaskCheckForTimeOut</references>
        <references refid="task_8h_1a0241000e08a261372186d34825a35979">xTaskGetSchedulerState</references>
        <references refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" compoundref="queue_8c" startline="109">QueueDefinition::xTasksWaitingToReceive</references>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1ac61ec62828e70ed35d18559a35550462" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xQueueReceiveFromISR</definition>
        <argsstring>(QueueHandle_t xQueue, void *const pvBuffer, BaseType_t *const pxHigherPriorityTaskWoken)</argsstring>
        <name>xQueueReceiveFromISR</name>
        <param>
          <type><ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>pvBuffer</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref> *const</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="1785" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1785" bodyend="1873"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="struct_queue_definition_1ac750a3f75a6e174adbc697e473a0dd13" compoundref="queue_8c" startline="115">QueueDefinition::cRxLock</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" compoundref="projdefs_8h" startline="48">pdFAIL</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" compoundref="_free_r_t_o_s_8h" startline="806">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</references>
        <references refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" compoundref="_free_r_t_o_s_8h" startline="286">portCLEAR_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" compoundref="_free_r_t_o_s_8h" startline="282">portSET_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" compoundref="queue_8c" startline="2153" endline="2168">prvCopyDataFromQueue</references>
        <references refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" compoundref="queue_8c" startline="52">queueUNLOCKED</references>
        <references refid="_free_r_t_o_s_8h_1ace59eac86a08f533c19edf91594961c6" compoundref="_free_r_t_o_s_8h" startline="496">traceQUEUE_RECEIVE_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a1f1f4a1fea93a33050fa6c27c30752d5" compoundref="_free_r_t_o_s_8h" startline="500">traceQUEUE_RECEIVE_FROM_ISR_FAILED</references>
        <references refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" compoundref="queue_8c" startline="113">QueueDefinition::uxItemSize</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <references refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</references>
        <references refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" compoundref="queue_8c" startline="108">QueueDefinition::xTasksWaitingToSend</references>
        <referencedby refid="cmsis__os2_8c_1ad90d4959466a7a65105061da8256ab9e" compoundref="cmsis__os2_8c" startline="1791" endline="1830">osMessageQueueGet</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1af67763957452955ac663c374d71278ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xQueuePeekFromISR</definition>
        <argsstring>(QueueHandle_t xQueue, void *const pvBuffer)</argsstring>
        <name>xQueuePeekFromISR</name>
        <param>
          <type><ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <param>
          <type>void *const</type>
          <declname>pvBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="1876" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1876" bodyend="1927"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" compoundref="queue_8c" startline="70">QueuePointers::pcReadFrom</references>
        <references refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" compoundref="projdefs_8h" startline="48">pdFAIL</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" compoundref="_free_r_t_o_s_8h" startline="806">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</references>
        <references refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" compoundref="_free_r_t_o_s_8h" startline="286">portCLEAR_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" compoundref="_free_r_t_o_s_8h" startline="282">portSET_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" compoundref="queue_8c" startline="2153" endline="2168">prvCopyDataFromQueue</references>
        <references refid="_free_r_t_o_s_8h_1a3e2a14b61c26f9690deb26d76cc801ee" compoundref="_free_r_t_o_s_8h" startline="480">traceQUEUE_PEEK_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a72ea0f09cc6a38363f2b5217aab27fd3" compoundref="_free_r_t_o_s_8h" startline="504">traceQUEUE_PEEK_FROM_ISR_FAILED</references>
        <references refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81">QueueDefinition::u</references>
        <references refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" compoundref="queue_8c" startline="113">QueueDefinition::uxItemSize</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <references refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" compoundref="queue_8c" startline="104">QueueDefinition::xQueue</references>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a4158a6134c9d1c60ffdb18d279d475b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref></type>
        <definition>UBaseType_t uxQueueMessagesWaiting</definition>
        <argsstring>(const QueueHandle_t xQueue)</argsstring>
        <name>uxQueueMessagesWaiting</name>
        <param>
          <type>const <ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="1930" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1930" bodyend="1943"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <referencedby refid="cmsis__os2_8c_1a6a32ac394fcff568b251c160cc3014b2" compoundref="cmsis__os2_8c" startline="1860" endline="1875">osMessageQueueGetCount</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a27d6fb77ce7a0b5a16f6471730d33201" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref></type>
        <definition>UBaseType_t uxQueueSpacesAvailable</definition>
        <argsstring>(const QueueHandle_t xQueue)</argsstring>
        <name>uxQueueSpacesAvailable</name>
        <param>
          <type>const <ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="1946" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1946" bodyend="1960"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" compoundref="queue_8c" startline="112">QueueDefinition::uxLength</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <referencedby refid="cmsis__os2_8c_1addf0904427436dd3880d46263c2dc9fa" compoundref="cmsis__os2_8c" startline="1877" endline="1898">osMessageQueueGetSpace</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1ad5d110bc27c691ff8da238e0116bf92a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref></type>
        <definition>UBaseType_t uxQueueMessagesWaitingFromISR</definition>
        <argsstring>(const QueueHandle_t xQueue)</argsstring>
        <name>uxQueueMessagesWaitingFromISR</name>
        <param>
          <type>const <ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="1963" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1963" bodyend="1972"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
        <referencedby refid="cmsis__os2_8c_1a6a32ac394fcff568b251c160cc3014b2" compoundref="cmsis__os2_8c" startline="1860" endline="1875">osMessageQueueGetCount</referencedby>
        <referencedby refid="cmsis__os2_8c_1a7559d4dff3cda9992fc5ab5de3e74c70" compoundref="cmsis__os2_8c" startline="1649" endline="1663">osSemaphoreGetCount</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a35c0b4f9a0e940cb3a86ca4c5e84c41c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vQueueDelete</definition>
        <argsstring>(QueueHandle_t xQueue)</argsstring>
        <name>vQueueDelete</name>
        <param>
          <type><ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="1975" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="1975" bodyend="2014"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="_free_r_t_o_s_8h_1aae8ebd9c82ecd564953a37bb26a5a1e5" compoundref="_free_r_t_o_s_8h" startline="508">traceQUEUE_DELETE</references>
        <references refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" compoundref="heap__4_8c" startline="266" endline="312">vPortFree</references>
        <references refid="_free_r_t_o_s_8h_1af007b655ee91c919bad9cd2798195899" compoundref="_free_r_t_o_s_8h" startline="307">vQueueUnregisterQueue</references>
        <referencedby refid="cmsis__os2_8c_1aba987f665444e0d83fa6a3a68bc72abe" compoundref="cmsis__os2_8c" startline="1918" endline="1942">osMessageQueueDelete</referencedby>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a7d076f57a56ef50315418f8bbfba96fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xQueueIsQueueEmptyFromISR</definition>
        <argsstring>(const QueueHandle_t xQueue)</argsstring>
        <name>xQueueIsQueueEmptyFromISR</name>
        <param>
          <type>const <ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="2312" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="2312" bodyend="2328"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
      </memberdef>
      <memberdef kind="function" id="queue_8c_1a76bbe8ebd21b3e89784e865d06f1058c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xQueueIsQueueFullFromISR</definition>
        <argsstring>(const QueueHandle_t xQueue)</argsstring>
        <name>xQueueIsQueueFullFromISR</name>
        <param>
          <type>const <ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref></type>
          <declname>xQueue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" line="2352" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c" bodystart="2352" bodyend="2368"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" compoundref="queue_8c" startline="112">QueueDefinition::uxLength</references>
        <references refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" compoundref="queue_8c" startline="111">QueueDefinition::uxMessagesWaiting</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>FreeRTOS<sp/>Kernel<sp/>V10.3.1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020<sp/>Amazon.com,<sp/>Inc.<sp/>or<sp/>its<sp/>affiliates.<sp/><sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>http://www.FreeRTOS.org</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>http://aws.amazon.com/freertos</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>1<sp/>tab<sp/>==<sp/>4<sp/>spaces!</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Defining<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/>prevents<sp/>task.h<sp/>from<sp/>redefining</highlight></codeline>
<codeline lineno="32"><highlight class="comment">all<sp/>the<sp/>API<sp/>functions<sp/>to<sp/>use<sp/>the<sp/>MPU<sp/>wrappers.<sp/><sp/>That<sp/>should<sp/>only<sp/>be<sp/>done<sp/>when</highlight></codeline>
<codeline lineno="33"><highlight class="comment">task.h<sp/>is<sp/>included<sp/>from<sp/>an<sp/>application<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="queue_8c_1ab622d8c674f2a417a666a7ed89109e79" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_free_r_t_o_s_8h" kindref="compound">FreeRTOS.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="task_8h" kindref="compound">task.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="queue_8h" kindref="compound">queue.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_CO_ROUTINES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;<ref refid="croutine_8h" kindref="compound">croutine.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Lint<sp/>e9021,<sp/>e961<sp/>and<sp/>e750<sp/>are<sp/>suppressed<sp/>as<sp/>a<sp/>MISRA<sp/>exception<sp/>justified</highlight></codeline>
<codeline lineno="45"><highlight class="comment">because<sp/>the<sp/>MPU<sp/>ports<sp/>require<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/>to<sp/>be<sp/>defined</highlight></codeline>
<codeline lineno="46"><highlight class="comment">for<sp/>the<sp/>header<sp/>files<sp/>above,<sp/>but<sp/>not<sp/>in<sp/>this<sp/>file,<sp/>in<sp/>order<sp/>to<sp/>generate<sp/>the</highlight></codeline>
<codeline lineno="47"><highlight class="comment">correct<sp/>privileged<sp/>Vs<sp/>unprivileged<sp/>linkage<sp/>and<sp/>placement.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>!e750<sp/>!e9021.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Constants<sp/>used<sp/>with<sp/>the<sp/>cRxLock<sp/>and<sp/>cTxLock<sp/>structure<sp/>members.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueUNLOCKED<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>int8_t<sp/>)<sp/>-1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="queue_8c_1a60a95aa91f84782416755f38616231fd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueLOCKED_UNMODIFIED<sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>int8_t<sp/>)<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>When<sp/>the<sp/>Queue_t<sp/>structure<sp/>is<sp/>used<sp/>to<sp/>represent<sp/>a<sp/>base<sp/>queue<sp/>its<sp/>pcHead<sp/>and</highlight></codeline>
<codeline lineno="56"><highlight class="comment">pcTail<sp/>members<sp/>are<sp/>used<sp/>as<sp/>pointers<sp/>into<sp/>the<sp/>queue<sp/>storage<sp/>area.<sp/><sp/>When<sp/>the</highlight></codeline>
<codeline lineno="57"><highlight class="comment">Queue_t<sp/>structure<sp/>is<sp/>used<sp/>to<sp/>represent<sp/>a<sp/>mutex<sp/>pcHead<sp/>and<sp/>pcTail<sp/>pointers<sp/>are</highlight></codeline>
<codeline lineno="58"><highlight class="comment">not<sp/>necessary,<sp/>and<sp/>the<sp/>pcHead<sp/>pointer<sp/>is<sp/>set<sp/>to<sp/>NULL<sp/>to<sp/>indicate<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="59"><highlight class="comment">structure<sp/>instead<sp/>holds<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>mutex<sp/>holder<sp/>(if<sp/>any).<sp/><sp/>Map<sp/>alternative</highlight></codeline>
<codeline lineno="60"><highlight class="comment">names<sp/>to<sp/>the<sp/>pcHead<sp/>and<sp/>structure<sp/>member<sp/>to<sp/>ensure<sp/>the<sp/>readability<sp/>of<sp/>the<sp/>code</highlight></codeline>
<codeline lineno="61"><highlight class="comment">is<sp/>maintained.<sp/><sp/>The<sp/>QueuePointers_t<sp/>and<sp/>SemaphoreData_t<sp/>types<sp/>are<sp/>used<sp/>to<sp/>form</highlight></codeline>
<codeline lineno="62"><highlight class="comment">a<sp/>union<sp/>as<sp/>their<sp/>usage<sp/>is<sp/>mutually<sp/>exclusive<sp/>dependent<sp/>on<sp/>what<sp/>the<sp/>queue<sp/>is</highlight></codeline>
<codeline lineno="63"><highlight class="comment">being<sp/>used<sp/>for.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="queue_8c_1afe3f7afb2a02c085f2d634003902cbc0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>uxQueueType<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcHead</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueQUEUE_IS_MUTEX<sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="struct_queue_pointers" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_queue_pointers" kindref="compound">QueuePointers</ref></highlight></codeline>
<codeline lineno="68"><highlight class="normal">{</highlight></codeline>
<codeline lineno="69" refid="struct_queue_pointers_1acbbdc8eb47b348a824c7bced41512a38" refkind="member"><highlight class="normal"><sp/><sp/>int8_t<sp/>*<ref refid="struct_queue_pointers_1acbbdc8eb47b348a824c7bced41512a38" kindref="member">pcTail</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Points<sp/>to<sp/>the<sp/>byte<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>queue<sp/>storage<sp/>area.<sp/><sp/>Once<sp/>more<sp/>byte<sp/>is<sp/>allocated<sp/>than<sp/>necessary<sp/>to<sp/>store<sp/>the<sp/>queue<sp/>items,<sp/>this<sp/>is<sp/>used<sp/>as<sp/>a<sp/>marker.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" refkind="member"><highlight class="normal"><sp/><sp/>int8_t<sp/>*<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Points<sp/>to<sp/>the<sp/>last<sp/>place<sp/>that<sp/>a<sp/>queued<sp/>item<sp/>was<sp/>read<sp/>from<sp/>when<sp/>the<sp/>structure<sp/>is<sp/>used<sp/>as<sp/>a<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="queue_8c_1afa576747932ccf4c923633fc6a46a0d8" refkind="member"><highlight class="normal">}<sp/><ref refid="queue_8c_1afa576747932ccf4c923633fc6a46a0d8" kindref="member">QueuePointers_t</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="struct_semaphore_data" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_semaphore_data" kindref="compound">SemaphoreData</ref></highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="75" refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/><ref refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" kindref="member">xMutexHolder</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>The<sp/>handle<sp/>of<sp/>the<sp/>task<sp/>that<sp/>holds<sp/>the<sp/>mutex.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="struct_semaphore_data_1aa428fcfc6e5831d054234444fde56574" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="struct_semaphore_data_1aa428fcfc6e5831d054234444fde56574" kindref="member">uxRecursiveCallCount</ref>;</highlight><highlight class="comment">/*&lt;<sp/>Maintains<sp/>a<sp/>count<sp/>of<sp/>the<sp/>number<sp/>of<sp/>times<sp/>a<sp/>recursive<sp/>mutex<sp/>has<sp/>been<sp/>recursively<sp/>&apos;taken&apos;<sp/>when<sp/>the<sp/>structure<sp/>is<sp/>used<sp/>as<sp/>a<sp/>mutex.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="queue_8c_1a8806dcfc511df585a0b4daf54a9a909a" refkind="member"><highlight class="normal">}<sp/><ref refid="queue_8c_1a8806dcfc511df585a0b4daf54a9a909a" kindref="member">SemaphoreData_t</ref>;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Semaphores<sp/>do<sp/>not<sp/>actually<sp/>store<sp/>or<sp/>copy<sp/>data,<sp/>so<sp/>have<sp/>an<sp/>item<sp/>size<sp/>of</highlight></codeline>
<codeline lineno="80"><highlight class="comment">zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="queue_8c_1adfb14d07644ad4da4bd2303105884227" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueSEMAPHORE_QUEUE_ITEM_LENGTH<sp/>(<sp/>(<sp/>UBaseType_t<sp/>)<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="queue_8c_1a166c89c5c3a213c7e52283e024bb1d50" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>queueMUTEX_GIVE_BLOCK_TIME<sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>TickType_t<sp/>)<sp/>0U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_PREEMPTION<sp/>==<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>cooperative<sp/>scheduler<sp/>is<sp/>being<sp/>used<sp/>then<sp/>a<sp/>yield<sp/>should<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/>performed<sp/>just<sp/>because<sp/>a<sp/>higher<sp/>priority<sp/>task<sp/>has<sp/>been<sp/>woken.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>queueYIELD_IF_USING_PREEMPTION()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>queueYIELD_IF_USING_PREEMPTION()<sp/>portYIELD_WITHIN_API()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>Definition<sp/>of<sp/>the<sp/>queue<sp/>used<sp/>by<sp/>the<sp/>scheduler.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>Items<sp/>are<sp/>queued<sp/>by<sp/>copy,<sp/>not<sp/>reference.<sp/><sp/>See<sp/>the<sp/>following<sp/>link<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*<sp/>rationale:<sp/>https://www.freertos.org/Embedded-RTOS-Queues.html</highlight></codeline>
<codeline lineno="96"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="struct_queue_definition" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">QueueDefinition</ref><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>old<sp/>naming<sp/>convention<sp/>is<sp/>used<sp/>to<sp/>prevent<sp/>breaking<sp/>kernel<sp/>aware<sp/>debuggers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99" refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">int8_t</ref><sp/>*<ref refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" kindref="member">pcHead</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Points<sp/>to<sp/>the<sp/>beginning<sp/>of<sp/>the<sp/>queue<sp/>storage<sp/>area.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100" refid="struct_queue_definition_1abdf13cc013c8488848cee3fce4f0fed3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">int8_t</ref><sp/>*<ref refid="struct_queue_definition_1abdf13cc013c8488848cee3fce4f0fed3" kindref="member">pcWriteTo</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Points<sp/>to<sp/>the<sp/>free<sp/>next<sp/>place<sp/>in<sp/>the<sp/>storage<sp/>area.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="104" refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_queue_pointers" kindref="compound">QueuePointers_t</ref><sp/><ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Data<sp/>required<sp/>exclusively<sp/>when<sp/>this<sp/>structure<sp/>is<sp/>used<sp/>as<sp/>a<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_semaphore_data" kindref="compound">SemaphoreData_t</ref><sp/><ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>;<sp/></highlight><highlight class="comment">/*&lt;<sp/>Data<sp/>required<sp/>exclusively<sp/>when<sp/>this<sp/>structure<sp/>is<sp/>used<sp/>as<sp/>a<sp/>semaphore.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" refkind="member"><highlight class="normal"><sp/><sp/>}<sp/><ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/><ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>List<sp/>of<sp/>tasks<sp/>that<sp/>are<sp/>blocked<sp/>waiting<sp/>to<sp/>post<sp/>onto<sp/>this<sp/>queue.<sp/><sp/>Stored<sp/>in<sp/>priority<sp/>order.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/><ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref>;<sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>List<sp/>of<sp/>tasks<sp/>that<sp/>are<sp/>blocked<sp/>waiting<sp/>to<sp/>read<sp/>from<sp/>this<sp/>queue.<sp/><sp/>Stored<sp/>in<sp/>priority<sp/>order.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref>;</highlight><highlight class="comment">/*&lt;<sp/>The<sp/>number<sp/>of<sp/>items<sp/>currently<sp/>in<sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>The<sp/>length<sp/>of<sp/>the<sp/>queue<sp/>defined<sp/>as<sp/>the<sp/>number<sp/>of<sp/>items<sp/>it<sp/>will<sp/>hold,<sp/>not<sp/>the<sp/>number<sp/>of<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>The<sp/>size<sp/>of<sp/>each<sp/>items<sp/>that<sp/>the<sp/>queue<sp/>will<sp/>hold.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="struct_queue_definition_1ac750a3f75a6e174adbc697e473a0dd13" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">int8_t</ref><sp/><ref refid="struct_queue_definition_1ac750a3f75a6e174adbc697e473a0dd13" kindref="member">cRxLock</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Stores<sp/>the<sp/>number<sp/>of<sp/>items<sp/>received<sp/>from<sp/>the<sp/>queue<sp/>(removed<sp/>from<sp/>the<sp/>queue)<sp/>while<sp/>the<sp/>queue<sp/>was<sp/>locked.<sp/><sp/>Set<sp/>to<sp/>queueUNLOCKED<sp/>when<sp/>the<sp/>queue<sp/>is<sp/>not<sp/>locked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">int8_t</ref><sp/><ref refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" kindref="member">cTxLock</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Stores<sp/>the<sp/>number<sp/>of<sp/>items<sp/>transmitted<sp/>to<sp/>the<sp/>queue<sp/>(added<sp/>to<sp/>the<sp/>queue)<sp/>while<sp/>the<sp/>queue<sp/>was<sp/>locked.<sp/><sp/>Set<sp/>to<sp/>queueUNLOCKED<sp/>when<sp/>the<sp/>queue<sp/>is<sp/>not<sp/>locked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uint8_t</ref><sp/><ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">ucStaticallyAllocated</ref>;<sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Set<sp/>to<sp/>pdTRUE<sp/>if<sp/>the<sp/>memory<sp/>used<sp/>by<sp/>the<sp/>queue<sp/>was<sp/>statically<sp/>allocated<sp/>to<sp/>ensure<sp/>no<sp/>attempt<sp/>is<sp/>made<sp/>to<sp/>free<sp/>the<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">QueueDefinition</ref><sp/>*<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">pxQueueSetContainer</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxQueueNumber</ref>;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uint8_t</ref><sp/><ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">ucQueueType</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="queue_8c_1a3c73744015d2aad19ca749e89e747e2a" refkind="member"><highlight class="normal">}<sp/><ref refid="queue_8c_1a3c73744015d2aad19ca749e89e747e2a" kindref="member">xQUEUE</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>old<sp/>xQUEUE<sp/>name<sp/>is<sp/>maintained<sp/>above<sp/>then<sp/>typedefed<sp/>to<sp/>the<sp/>new<sp/>Queue_t</highlight></codeline>
<codeline lineno="134"><highlight class="comment">name<sp/>below<sp/>to<sp/>enable<sp/>the<sp/>use<sp/>of<sp/>older<sp/>kernel<sp/>aware<sp/>debuggers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="queue_8c_1ade16d14675fc1ac34af04a1162a6b883" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">xQUEUE</ref><sp/><ref refid="queue_8c_1ade16d14675fc1ac34af04a1162a6b883" kindref="member">Queue_t</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>The<sp/>queue<sp/>registry<sp/>is<sp/>just<sp/>a<sp/>means<sp/>for<sp/>kernel<sp/>aware<sp/>debuggers<sp/>to<sp/>locate</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*<sp/>queue<sp/>structures.<sp/><sp/>It<sp/>has<sp/>no<sp/>other<sp/>purpose<sp/>so<sp/>is<sp/>an<sp/>optional<sp/>component.</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configQUEUE_REGISTRY_SIZE<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>type<sp/>stored<sp/>within<sp/>the<sp/>queue<sp/>registry<sp/>array.<sp/><sp/>This<sp/>allows<sp/>a<sp/>name</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/>to<sp/>be<sp/>assigned<sp/>to<sp/>each<sp/>queue<sp/>making<sp/>kernel<sp/>aware<sp/>debugging<sp/>a<sp/>little</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/>more<sp/>user<sp/>friendly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">QUEUE_REGISTRY_ITEM</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcQueueName;<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xHandle;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/>}<sp/>xQueueRegistryItem;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>old<sp/>xQueueRegistryItem<sp/>name<sp/>is<sp/>maintained<sp/>above<sp/>then<sp/>typedefed<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/>new<sp/>xQueueRegistryItem<sp/>name<sp/>below<sp/>to<sp/>enable<sp/>the<sp/>use<sp/>of<sp/>older<sp/>kernel<sp/>aware</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/>debuggers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>xQueueRegistryItem<sp/>QueueRegistryItem_t;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>registry<sp/>is<sp/>simply<sp/>an<sp/>array<sp/>of<sp/>QueueRegistryItem_t<sp/>structures.</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/>The<sp/>pcQueueName<sp/>member<sp/>of<sp/>a<sp/>structure<sp/>being<sp/>NULL<sp/>is<sp/>indicative<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>array<sp/>position<sp/>being<sp/>vacant.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/>QueueRegistryItem_t<sp/>xQueueRegistry[<sp/><ref refid="_free_r_t_o_s_config_8h_1aa4b5138c4e42a180f0abd4f2455f90fb" kindref="member">configQUEUE_REGISTRY_SIZE</ref><sp/>];</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configQUEUE_REGISTRY_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*<sp/>Unlocks<sp/>a<sp/>queue<sp/>locked<sp/>by<sp/>a<sp/>call<sp/>to<sp/>prvLockQueue.<sp/><sp/>Locking<sp/>a<sp/>queue<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>prevent<sp/>an<sp/>ISR<sp/>from<sp/>adding<sp/>or<sp/>removing<sp/>items<sp/>to<sp/>the<sp/>queue,<sp/>but<sp/>does<sp/>prevent</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/>an<sp/>ISR<sp/>from<sp/>removing<sp/>tasks<sp/>from<sp/>the<sp/>queue<sp/>event<sp/>lists.<sp/><sp/>If<sp/>an<sp/>ISR<sp/>finds<sp/>a</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>queue<sp/>is<sp/>locked<sp/>it<sp/>will<sp/>instead<sp/>increment<sp/>the<sp/>appropriate<sp/>queue<sp/>lock<sp/>count</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>to<sp/>indicate<sp/>that<sp/>a<sp/>task<sp/>may<sp/>require<sp/>unblocking.<sp/><sp/>When<sp/>the<sp/>queue<sp/>in<sp/>unlocked</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>these<sp/>lock<sp/>counts<sp/>are<sp/>inspected,<sp/>and<sp/>the<sp/>appropriate<sp/>action<sp/>taken.</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="177"><highlight class="comment"><sp/>*<sp/>Uses<sp/>a<sp/>critical<sp/>section<sp/>to<sp/>determine<sp/>if<sp/>there<sp/>is<sp/>any<sp/>data<sp/>in<sp/>a<sp/>queue.</highlight></codeline>
<codeline lineno="178"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="179"><highlight class="comment"><sp/>*<sp/>@return<sp/>pdTRUE<sp/>if<sp/>the<sp/>queue<sp/>contains<sp/>no<sp/>items,<sp/>otherwise<sp/>pdFALSE.</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" kindref="member">prvIsQueueEmpty</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*pxQueue<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>Uses<sp/>a<sp/>critical<sp/>section<sp/>to<sp/>determine<sp/>if<sp/>there<sp/>is<sp/>any<sp/>space<sp/>in<sp/>a<sp/>queue.</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>@return<sp/>pdTRUE<sp/>if<sp/>there<sp/>is<sp/>no<sp/>space,<sp/>otherwise<sp/>pdFALSE;</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a70546f6b48a8b715eae3dd84e0546045" kindref="member">prvIsQueueFull</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*pxQueue<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>Copies<sp/>an<sp/>item<sp/>into<sp/>the<sp/>queue,<sp/>either<sp/>at<sp/>the<sp/>front<sp/>of<sp/>the<sp/>queue<sp/>or<sp/>the</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*<sp/>back<sp/>of<sp/>the<sp/>queue.</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" kindref="member">prvCopyDataToQueue</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvItemToQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xPosition<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>Copies<sp/>an<sp/>item<sp/>out<sp/>of<sp/>a<sp/>queue.</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" kindref="member">prvCopyDataFromQueue</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvBuffer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="203"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Checks<sp/>to<sp/>see<sp/>if<sp/>a<sp/>queue<sp/>is<sp/>a<sp/>member<sp/>of<sp/>a<sp/>queue<sp/>set,<sp/>and<sp/>if<sp/>so,<sp/>notifies</highlight></codeline>
<codeline lineno="204"><highlight class="comment"><sp/><sp/><sp/>*<sp/>the<sp/>queue<sp/>set<sp/>that<sp/>the<sp/>queue<sp/>contains<sp/>data.</highlight></codeline>
<codeline lineno="205"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>prvNotifyQueueSetContainer(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="210"><highlight class="comment"><sp/>*<sp/>Called<sp/>after<sp/>a<sp/>Queue_t<sp/>structure<sp/>has<sp/>been<sp/>allocated<sp/>either<sp/>statically<sp/>or</highlight></codeline>
<codeline lineno="211"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>to<sp/>fill<sp/>in<sp/>the<sp/>structure&apos;s<sp/>members.</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="queue_8c_1a0f632268707981dea3f177f5fba36e22" kindref="member">prvInitialiseNewQueue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxQueueLength,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxItemSize,<sp/>uint8_t<sp/>*pucQueueStorage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucQueueType,<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*pxNewQueue<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>Mutexes<sp/>are<sp/>a<sp/>special<sp/>type<sp/>of<sp/>queue.<sp/><sp/>When<sp/>a<sp/>mutex<sp/>is<sp/>created,<sp/>first<sp/>the</highlight></codeline>
<codeline lineno="217"><highlight class="comment"><sp/>*<sp/>queue<sp/>is<sp/>created,<sp/>then<sp/>prvInitialiseMutex()<sp/>is<sp/>called<sp/>to<sp/>configure<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/>*<sp/>as<sp/>a<sp/>mutex.</highlight></codeline>
<codeline lineno="219"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prvInitialiseMutex(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*pxNewQueue<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/>*<sp/>If<sp/>a<sp/>task<sp/>waiting<sp/>for<sp/>a<sp/>mutex<sp/>causes<sp/>the<sp/>mutex<sp/>holder<sp/>to<sp/>inherit<sp/>a</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/>*<sp/>priority,<sp/>but<sp/>the<sp/>waiting<sp/>task<sp/>times<sp/>out,<sp/>then<sp/>the<sp/>holder<sp/>should</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/><sp/><sp/>*<sp/>disinherit<sp/>the<sp/>priority<sp/>-<sp/>but<sp/>only<sp/>down<sp/>to<sp/>the<sp/>highest<sp/>priority<sp/>of<sp/>any</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/><sp/><sp/>*<sp/>other<sp/>tasks<sp/>that<sp/>are<sp/>waiting<sp/>for<sp/>the<sp/>same<sp/>mutex.<sp/><sp/>This<sp/>function<sp/>returns</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/>*<sp/>that<sp/>priority.</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>prvGetDisinheritPriorityAfterTimeout(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/>*<sp/>Macro<sp/>to<sp/>mark<sp/>a<sp/>queue<sp/>as<sp/>locked.<sp/><sp/>Locking<sp/>a<sp/>queue<sp/>prevents<sp/>an<sp/>ISR<sp/>from</highlight></codeline>
<codeline lineno="238"><highlight class="comment"><sp/>*<sp/>accessing<sp/>the<sp/>queue<sp/>event<sp/>lists.</highlight></codeline>
<codeline lineno="239"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240" refid="queue_8c_1ae4efd14c0f4dee7f189ef2e4d9ce1f1b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>prvLockQueue(<sp/>pxQueue<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="241"><highlight class="preprocessor"><sp/><sp/>taskENTER_CRITICAL();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="242"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="243"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(<sp/>(<sp/>pxQueue<sp/>)-&gt;cRxLock<sp/>==<sp/>queueUNLOCKED<sp/>)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="244"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="245"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxQueue<sp/>)-&gt;cRxLock<sp/>=<sp/>queueLOCKED_UNMODIFIED;<sp/><sp/>\</highlight></codeline>
<codeline lineno="246"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="247"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(<sp/>(<sp/>pxQueue<sp/>)-&gt;cTxLock<sp/>==<sp/>queueUNLOCKED<sp/>)<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="248"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="249"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxQueue<sp/>)-&gt;cTxLock<sp/>=<sp/>queueLOCKED_UNMODIFIED;<sp/><sp/>\</highlight></codeline>
<codeline lineno="250"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="251"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="252"><highlight class="preprocessor"><sp/><sp/>taskEXIT_CRITICAL()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255" refid="queue_8h_1a3c13a9fe455ec2d35b5f8386a1040599" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a5e54273dbe3f56b8bdc8f7abee67a871" kindref="member">xQueueGenericReset</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xNewQueue<sp/>)</highlight></codeline>
<codeline lineno="256"><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1acbbdc8eb47b348a824c7bced41512a38" kindref="member">pcTail</ref><sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" kindref="member">pcHead</ref><sp/>+<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>*<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9016<sp/>Pointer<sp/>arithmetic<sp/>allowed<sp/>on<sp/>char<sp/>types,<sp/>especially<sp/>when<sp/>it<sp/>assists<sp/>conveying<sp/>intent.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1abdf13cc013c8488848cee3fce4f0fed3" kindref="member">pcWriteTo</ref><sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" kindref="member">pcHead</ref>;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" kindref="member">pcHead</ref><sp/>+<sp/>(<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>-<sp/>1U<sp/>)<sp/>*<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9016<sp/>Pointer<sp/>arithmetic<sp/>allowed<sp/>on<sp/>char<sp/>types,<sp/>especially<sp/>when<sp/>it<sp/>assists<sp/>conveying<sp/>intent.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ac750a3f75a6e174adbc697e473a0dd13" kindref="member">cRxLock</ref><sp/>=<sp/><ref refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" kindref="member">queueUNLOCKED</ref>;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" kindref="member">cTxLock</ref><sp/>=<sp/><ref refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" kindref="member">queueUNLOCKED</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xNewQueue<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>are<sp/>tasks<sp/>blocked<sp/>waiting<sp/>to<sp/>read<sp/>from<sp/>the<sp/>queue,<sp/>then</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>tasks<sp/>will<sp/>remain<sp/>blocked<sp/>as<sp/>after<sp/>this<sp/>function<sp/>exits<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>still<sp/>be<sp/>empty.<sp/><sp/>If<sp/>there<sp/>are<sp/>tasks<sp/>blocked<sp/>waiting<sp/>to<sp/>write<sp/>to</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>queue,<sp/>then<sp/>one<sp/>should<sp/>be<sp/>unblocked<sp/>as<sp/>after<sp/>this<sp/>function<sp/>exits</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>will<sp/>be<sp/>possible<sp/>to<sp/>write<sp/>to<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" kindref="member">queueYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>the<sp/>event<sp/>queues<sp/>start<sp/>in<sp/>the<sp/>correct<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" kindref="member">vListInitialise</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" kindref="member">vListInitialise</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>value<sp/>is<sp/>returned<sp/>for<sp/>calling<sp/>semantic<sp/>consistency<sp/>with<sp/>previous</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/>versions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueueGenericCreateStatic(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxQueueLength,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxItemSize,<sp/>uint8_t<sp/>*pucQueueStorage,<sp/><ref refid="structx_s_t_a_t_i_c___q_u_e_u_e" kindref="compound">StaticQueue_t</ref><sp/>*pxStaticQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucQueueType<sp/>)</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*pxNewQueue;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>uxQueueLength<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>StaticQueue_t<sp/>structure<sp/>and<sp/>the<sp/>queue<sp/>storage<sp/>area<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/>supplied.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStaticQueue<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>queue<sp/>storage<sp/>area<sp/>should<sp/>be<sp/>provided<sp/>if<sp/>the<sp/>item<sp/>size<sp/>is<sp/>not<sp/>0,<sp/>and</highlight></codeline>
<codeline lineno="321"><highlight class="comment"><sp/><sp/><sp/><sp/>should<sp/>not<sp/>be<sp/>provided<sp/>if<sp/>the<sp/>item<sp/>size<sp/>is<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/>pucQueueStorage<sp/>!=<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>uxItemSize<sp/>==<sp/>0<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/>pucQueueStorage<sp/>==<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>uxItemSize<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>configASSERT_DEFINED<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>that<sp/>the<sp/>size<sp/>of<sp/>the<sp/>structure<sp/>used<sp/>to<sp/>declare<sp/>a</highlight></codeline>
<codeline lineno="328"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>of<sp/>type<sp/>StaticQueue_t<sp/>or<sp/>StaticSemaphore_t<sp/>equals<sp/>the<sp/>size<sp/>of</highlight></codeline>
<codeline lineno="329"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>real<sp/>queue<sp/>and<sp/>semaphore<sp/>structures.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="_free_r_t_o_s_8h_1a22e8979e2849d002747c0dd4c7c37908" kindref="member">StaticQueue_t</ref><sp/>);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xSize<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>xSize;<sp/></highlight><highlight class="comment">/*<sp/>Keeps<sp/>lint<sp/>quiet<sp/>when<sp/>configASSERT()<sp/>is<sp/>not<sp/>defined.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configASSERT_DEFINED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>address<sp/>of<sp/>a<sp/>statically<sp/>allocated<sp/>queue<sp/>was<sp/>passed<sp/>in,<sp/>use<sp/>it.</highlight></codeline>
<codeline lineno="337"><highlight class="comment"><sp/><sp/><sp/><sp/>The<sp/>address<sp/>of<sp/>a<sp/>statically<sp/>allocated<sp/>storage<sp/>area<sp/>was<sp/>also<sp/>passed<sp/>in</highlight></codeline>
<codeline lineno="338"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>is<sp/>already<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewQueue<sp/>=<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>pxStaticQueue;<sp/></highlight><highlight class="comment">/*lint<sp/>!e740<sp/>!e9087<sp/>Unusual<sp/>cast<sp/>is<sp/>ok<sp/>as<sp/>the<sp/>structures<sp/>are<sp/>designed<sp/>to<sp/>have<sp/>the<sp/>same<sp/>alignment,<sp/>and<sp/>the<sp/>size<sp/>is<sp/>checked<sp/>by<sp/>an<sp/>assert.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxNewQueue<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Queues<sp/>can<sp/>be<sp/>allocated<sp/>wither<sp/>statically<sp/>or<sp/>dynamically,<sp/>so</highlight></codeline>
<codeline lineno="346"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>note<sp/>this<sp/>queue<sp/>was<sp/>allocated<sp/>statically<sp/>in<sp/>case<sp/>the<sp/>queue<sp/>is</highlight></codeline>
<codeline lineno="347"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>later<sp/>deleted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewQueue-&gt;ucStaticallyAllocated<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a0f632268707981dea3f177f5fba36e22" kindref="member">prvInitialiseNewQueue</ref>(<sp/>uxQueueLength,<sp/>uxItemSize,<sp/>pucQueueStorage,<sp/>ucQueueType,<sp/>pxNewQueue<sp/>);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a3a0d6a2e556a9bb303cbcb2a23700118" kindref="member">traceQUEUE_CREATE_FAILED</ref>(<sp/>ucQueueType<sp/>);</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pxNewQueue;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueueGenericCreate(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxQueueLength,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxItemSize,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucQueueType<sp/>)</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*pxNewQueue;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xQueueSizeInBytes;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*pucQueueStorage;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>uxQueueLength<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>enough<sp/>space<sp/>to<sp/>hold<sp/>the<sp/>maximum<sp/>number<sp/>of<sp/>items<sp/>that</highlight></codeline>
<codeline lineno="377"><highlight class="comment"><sp/><sp/><sp/><sp/>can<sp/>be<sp/>in<sp/>the<sp/>queue<sp/>at<sp/>any<sp/>time.<sp/><sp/>It<sp/>is<sp/>valid<sp/>for<sp/>uxItemSize<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/>zero<sp/>in<sp/>the<sp/>case<sp/>the<sp/>queue<sp/>is<sp/>used<sp/>as<sp/>a<sp/>semaphore.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>xQueueSizeInBytes<sp/>=<sp/>(<sp/>size_t<sp/>)<sp/>(<sp/>uxQueueLength<sp/>*<sp/>uxItemSize<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>the<sp/>queue<sp/>and<sp/>storage<sp/>area.<sp/><sp/>Justification<sp/>for<sp/>MISRA</highlight></codeline>
<codeline lineno="382"><highlight class="comment"><sp/><sp/><sp/><sp/>deviation<sp/>as<sp/>follows:<sp/><sp/>pvPortMalloc()<sp/>always<sp/>ensures<sp/>returned<sp/>memory</highlight></codeline>
<codeline lineno="383"><highlight class="comment"><sp/><sp/><sp/><sp/>blocks<sp/>are<sp/>aligned<sp/>per<sp/>the<sp/>requirements<sp/>of<sp/>the<sp/>MCU<sp/>stack.<sp/><sp/>In<sp/>this<sp/>case</highlight></codeline>
<codeline lineno="384"><highlight class="comment"><sp/><sp/><sp/><sp/>pvPortMalloc()<sp/>must<sp/>return<sp/>a<sp/>pointer<sp/>that<sp/>is<sp/>guaranteed<sp/>to<sp/>meet<sp/>the</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/>alignment<sp/>requirements<sp/>of<sp/>the<sp/>Queue_t<sp/>structure<sp/>-<sp/>which<sp/>in<sp/>this<sp/>case</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>an<sp/>int8_t<sp/>*.<sp/><sp/>Therefore,<sp/>whenever<sp/>the<sp/>stack<sp/>alignment<sp/>requirements</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/><sp/><sp/>are<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the<sp/>pointer<sp/>to<sp/>char<sp/>requirements<sp/>the<sp/>cast</highlight></codeline>
<codeline lineno="388"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>safe.<sp/><sp/>In<sp/>other<sp/>cases<sp/>alignment<sp/>requirements<sp/>are<sp/>not<sp/>strict<sp/>(one<sp/>or</highlight></codeline>
<codeline lineno="389"><highlight class="comment"><sp/><sp/><sp/><sp/>two<sp/>bytes).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewQueue<sp/>=<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/><ref refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" kindref="member">pvPortMalloc</ref>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>)<sp/>+<sp/>xQueueSizeInBytes<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>!e9079<sp/>see<sp/>comment<sp/>above.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxNewQueue<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Jump<sp/>past<sp/>the<sp/>queue<sp/>structure<sp/>to<sp/>find<sp/>the<sp/>location<sp/>of<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="395"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>storage<sp/>area.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pucQueueStorage<sp/>=<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxNewQueue;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pucQueueStorage<sp/>+=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="queue_8c_1ade16d14675fc1ac34af04a1162a6b883" kindref="member">Queue_t</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9016<sp/>Pointer<sp/>arithmetic<sp/>allowed<sp/>on<sp/>char<sp/>types,<sp/>especially<sp/>when<sp/>it<sp/>assists<sp/>conveying<sp/>intent.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Queues<sp/>can<sp/>be<sp/>created<sp/>either<sp/>statically<sp/>or<sp/>dynamically,<sp/>so</highlight></codeline>
<codeline lineno="402"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>note<sp/>this<sp/>task<sp/>was<sp/>created<sp/>dynamically<sp/>in<sp/>case<sp/>it<sp/>is<sp/>later</highlight></codeline>
<codeline lineno="403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>deleted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewQueue-&gt;ucStaticallyAllocated<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a0f632268707981dea3f177f5fba36e22" kindref="member">prvInitialiseNewQueue</ref>(<sp/>uxQueueLength,<sp/>uxItemSize,<sp/>pucQueueStorage,<sp/>ucQueueType,<sp/>pxNewQueue<sp/>);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a3a0d6a2e556a9bb303cbcb2a23700118" kindref="member">traceQUEUE_CREATE_FAILED</ref>(<sp/>ucQueueType<sp/>);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pxNewQueue;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="queue_8c_1a0f632268707981dea3f177f5fba36e22" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="queue_8c_1a0f632268707981dea3f177f5fba36e22" kindref="member">prvInitialiseNewQueue</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxQueueLength,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxItemSize,<sp/>uint8_t<sp/>*pucQueueStorage,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucQueueType,<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*pxNewQueue<sp/>)</highlight></codeline>
<codeline lineno="423"><highlight class="normal">{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>compiler<sp/>warnings<sp/>about<sp/>unused<sp/>parameters<sp/>should</highlight></codeline>
<codeline lineno="425"><highlight class="comment"><sp/><sp/>configUSE_TRACE_FACILITY<sp/>not<sp/>be<sp/>set<sp/>to<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/>ucQueueType;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxItemSize<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>RAM<sp/>was<sp/>allocated<sp/>for<sp/>the<sp/>queue<sp/>storage<sp/>area,<sp/>but<sp/>PC<sp/>head<sp/>cannot</highlight></codeline>
<codeline lineno="431"><highlight class="comment"><sp/><sp/><sp/><sp/>be<sp/>set<sp/>to<sp/>NULL<sp/>because<sp/>NULL<sp/>is<sp/>used<sp/>as<sp/>a<sp/>key<sp/>to<sp/>say<sp/>the<sp/>queue<sp/>is<sp/>used<sp/>as</highlight></codeline>
<codeline lineno="432"><highlight class="comment"><sp/><sp/><sp/><sp/>a<sp/>mutex.<sp/><sp/>Therefore<sp/>just<sp/>set<sp/>pcHead<sp/>to<sp/>point<sp/>to<sp/>the<sp/>queue<sp/>as<sp/>a<sp/>benign</highlight></codeline>
<codeline lineno="433"><highlight class="comment"><sp/><sp/><sp/><sp/>value<sp/>that<sp/>is<sp/>known<sp/>to<sp/>be<sp/>within<sp/>the<sp/>memory<sp/>map.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewQueue-&gt;<ref refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" kindref="member">pcHead</ref><sp/>=<sp/>(<sp/>int8_t<sp/>*<sp/>)<sp/>pxNewQueue;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>head<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>queue<sp/>storage<sp/>area.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewQueue-&gt;<ref refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" kindref="member">pcHead</ref><sp/>=<sp/>(<sp/>int8_t<sp/>*<sp/>)<sp/>pucQueueStorage;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialise<sp/>the<sp/>queue<sp/>members<sp/>as<sp/>described<sp/>where<sp/>the<sp/>queue<sp/>type<sp/>is</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/><sp/>defined.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>pxNewQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>=<sp/>uxQueueLength;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/>pxNewQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>=<sp/>uxItemSize;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="queue_8c_1a5e54273dbe3f56b8bdc8f7abee67a871" kindref="member">xQueueGenericReset</ref>(<sp/>pxNewQueue,<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref><sp/>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewQueue-&gt;ucQueueType<sp/>=<sp/>ucQueueType;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewQueue-&gt;pxQueueSetContainer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a62dcc27e040063ec72e174c985740f96" kindref="member">traceQUEUE_CREATE</ref>(<sp/>pxNewQueue<sp/>);</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prvInitialiseMutex(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*pxNewQueue<sp/>)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxNewQueue<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>create<sp/>function<sp/>will<sp/>set<sp/>all<sp/>the<sp/>queue<sp/>structure<sp/>members</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>correctly<sp/>for<sp/>a<sp/>generic<sp/>queue,<sp/>but<sp/>this<sp/>function<sp/>is<sp/>creating<sp/>a</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>mutex.<sp/><sp/>Overwrite<sp/>those<sp/>members<sp/>that<sp/>need<sp/>to<sp/>be<sp/>set<sp/>differently<sp/>-</highlight></codeline>
<codeline lineno="473"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>particular<sp/>the<sp/>information<sp/>required<sp/>for<sp/>priority<sp/>inheritance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" kindref="member">xMutexHolder</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewQueue-&gt;uxQueueType<sp/>=<sp/><ref refid="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" kindref="member">queueQUEUE_IS_MUTEX</ref>;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>this<sp/>is<sp/>a<sp/>recursive<sp/>mutex.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1aa428fcfc6e5831d054234444fde56574" kindref="member">uxRecursiveCallCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2eff67edaee170b33b549966d8b99b47" kindref="member">traceCREATE_MUTEX</ref>(<sp/>pxNewQueue<sp/>);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>with<sp/>the<sp/>semaphore<sp/>in<sp/>the<sp/>expected<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="queue_8c_1acb67c81366c00896b21cd826e07d885d" kindref="member">xQueueGenericSend</ref>(<sp/>pxNewQueue,<sp/>NULL,<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0U,<sp/><ref refid="queue_8h_1a4d78fa863fbeb90425a2dda08fae8b12" kindref="member">queueSEND_TO_BACK</ref><sp/>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1aa01e89d6df9ac9c4506f8918cc809ddf" kindref="member">traceCREATE_MUTEX_FAILED</ref>();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/><ref refid="queue_8h_1acac7df114346b4219bc2aab79cac35b5" kindref="member">xQueueCreateMutex</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucQueueType<sp/>)</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xNewQueue;</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxMutexLength<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1,<sp/>uxMutexSize<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/>xNewQueue<sp/>=<sp/>xQueueGenericCreate(<sp/>uxMutexLength,<sp/>uxMutexSize,<sp/>ucQueueType<sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>prvInitialiseMutex(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xNewQueue<sp/>);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xNewQueue;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/><ref refid="queue_8h_1af92945589381b740932a7cc41e212a37" kindref="member">xQueueCreateMutexStatic</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucQueueType,<sp/><ref refid="structx_s_t_a_t_i_c___q_u_e_u_e" kindref="compound">StaticQueue_t</ref><sp/>*pxStaticQueue<sp/>)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xNewQueue;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxMutexLength<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1,<sp/>uxMutexSize<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prevent<sp/>compiler<sp/>warnings<sp/>about<sp/>unused<sp/>parameters<sp/>if</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/><sp/><sp/><sp/>configUSE_TRACE_FACILITY<sp/>does<sp/>not<sp/>equal<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>ucQueueType;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>xNewQueue<sp/>=<sp/>xQueueGenericCreateStatic(<sp/>uxMutexLength,<sp/>uxMutexSize,<sp/>NULL,<sp/>pxStaticQueue,<sp/>ucQueueType<sp/>);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>prvInitialiseMutex(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xNewQueue<sp/>);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xNewQueue;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>INCLUDE_xSemaphoreGetMutexHolder<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/><ref refid="queue_8h_1ac49b15e4005be658fd04e68407ef4fb1" kindref="member">xQueueGetMutexHolder</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xSemaphore<sp/>)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>pxReturn;</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxSemaphore<sp/>=<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xSemaphore;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>is<sp/>called<sp/>by<sp/>xSemaphoreGetMutexHolder(),<sp/>and<sp/>should<sp/>not</highlight></codeline>
<codeline lineno="538"><highlight class="comment"><sp/><sp/><sp/><sp/>be<sp/>called<sp/>directly.<sp/><sp/>Note:<sp/><sp/>This<sp/>is<sp/>a<sp/>good<sp/>way<sp/>of<sp/>determining<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="539"><highlight class="comment"><sp/><sp/><sp/><sp/>calling<sp/>task<sp/>is<sp/>the<sp/>mutex<sp/>holder,<sp/>but<sp/>not<sp/>a<sp/>good<sp/>way<sp/>of<sp/>determining<sp/>the</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/><sp/><sp/>identity<sp/>of<sp/>the<sp/>mutex<sp/>holder,<sp/>as<sp/>the<sp/>holder<sp/>may<sp/>change<sp/>between<sp/>the</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/><sp/><sp/>following<sp/>critical<sp/>section<sp/>exiting<sp/>and<sp/>the<sp/>function<sp/>returning.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxSemaphore-&gt;uxQueueType<sp/>==<sp/><ref refid="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" kindref="member">queueQUEUE_IS_MUTEX</ref><sp/>)</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxReturn<sp/>=<sp/>pxSemaphore-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" kindref="member">xMutexHolder</ref>;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxReturn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pxReturn;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>xSemaphore<sp/>cannot<sp/>be<sp/>a<sp/>pointer<sp/>to<sp/>const<sp/>because<sp/>it<sp/>is<sp/>a<sp/>typedef.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>INCLUDE_xSemaphoreGetMutexHolder<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/><ref refid="queue_8h_1a8ccb06cf46ba1c052809a3809954bd07" kindref="member">xQueueGetMutexHolderFromISR</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xSemaphore<sp/>)</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>pxReturn;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xSemaphore<sp/>);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mutexes<sp/>cannot<sp/>be<sp/>used<sp/>in<sp/>interrupt<sp/>service<sp/>routines,<sp/>so<sp/>the<sp/>mutex</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/><sp/><sp/><sp/>holder<sp/>should<sp/>not<sp/>change<sp/>in<sp/>an<sp/>ISR,<sp/>and<sp/>therefore<sp/>a<sp/>critical<sp/>section<sp/>is</highlight></codeline>
<codeline lineno="571"><highlight class="comment"><sp/><sp/><sp/><sp/>not<sp/>required<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xSemaphore<sp/>)-&gt;<ref refid="queue_8c_1afe3f7afb2a02c085f2d634003902cbc0" kindref="member">uxQueueType</ref><sp/>==<sp/><ref refid="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" kindref="member">queueQUEUE_IS_MUTEX</ref><sp/>)</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxReturn<sp/>=<sp/>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xSemaphore<sp/>)-&gt;u.xSemaphore.xMutexHolder;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxReturn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pxReturn;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>xSemaphore<sp/>cannot<sp/>be<sp/>a<sp/>pointer<sp/>to<sp/>const<sp/>because<sp/>it<sp/>is<sp/>a<sp/>typedef.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_RECURSIVE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8h_1a51adeb17e9d3bb1077969e6e53f61c3b" kindref="member">xQueueGiveMutexRecursive</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xMutex<sp/>)</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxMutex<sp/>=<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xMutex;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxMutex<sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>is<sp/>the<sp/>task<sp/>that<sp/>holds<sp/>the<sp/>mutex<sp/>then<sp/>xMutexHolder<sp/>will<sp/>not</highlight></codeline>
<codeline lineno="597"><highlight class="comment"><sp/><sp/><sp/><sp/>change<sp/>outside<sp/>of<sp/>this<sp/>task.<sp/><sp/>If<sp/>this<sp/>task<sp/>does<sp/>not<sp/>hold<sp/>the<sp/>mutex<sp/>then</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/><sp/><sp/>pxMutexHolder<sp/>can<sp/>never<sp/>coincidentally<sp/>equal<sp/>the<sp/>tasks<sp/>handle,<sp/>and<sp/>as</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/><sp/><sp/>this<sp/>is<sp/>the<sp/>only<sp/>condition<sp/>we<sp/>are<sp/>interested<sp/>in<sp/>it<sp/>does<sp/>not<sp/>matter<sp/>if</highlight></codeline>
<codeline lineno="600"><highlight class="comment"><sp/><sp/><sp/><sp/>pxMutexHolder<sp/>is<sp/>accessed<sp/>simultaneously<sp/>by<sp/>another<sp/>task.<sp/><sp/>Therefore<sp/>no</highlight></codeline>
<codeline lineno="601"><highlight class="comment"><sp/><sp/><sp/><sp/>mutual<sp/>exclusion<sp/>is<sp/>required<sp/>to<sp/>test<sp/>the<sp/>pxMutexHolder<sp/>variable.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxMutex-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" kindref="member">xMutexHolder</ref><sp/>==<sp/><ref refid="task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc" kindref="member">xTaskGetCurrentTaskHandle</ref>()<sp/>)</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1aa42efc6b6938c6f2a5f04c7367f59b22" kindref="member">traceGIVE_MUTEX_RECURSIVE</ref>(<sp/>pxMutex<sp/>);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>uxRecursiveCallCount<sp/>cannot<sp/>be<sp/>zero<sp/>if<sp/>xMutexHolder<sp/>is<sp/>equal<sp/>to</highlight></codeline>
<codeline lineno="607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>task<sp/>handle,<sp/>therefore<sp/>no<sp/>underflow<sp/>check<sp/>is<sp/>required.<sp/><sp/>Also,</highlight></codeline>
<codeline lineno="608"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>uxRecursiveCallCount<sp/>is<sp/>only<sp/>modified<sp/>by<sp/>the<sp/>mutex<sp/>holder,<sp/>and<sp/>as</highlight></codeline>
<codeline lineno="609"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>there<sp/>can<sp/>only<sp/>be<sp/>one,<sp/>no<sp/>mutual<sp/>exclusion<sp/>is<sp/>required<sp/>to<sp/>modify<sp/>the</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>uxRecursiveCallCount<sp/>member.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxMutex-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1aa428fcfc6e5831d054234444fde56574" kindref="member">uxRecursiveCallCount</ref><sp/>)--;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Has<sp/>the<sp/>recursive<sp/>call<sp/>count<sp/>unwound<sp/>to<sp/>0?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxMutex-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1aa428fcfc6e5831d054234444fde56574" kindref="member">uxRecursiveCallCount</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>mutex.<sp/><sp/>This<sp/>will<sp/>automatically<sp/>unblock<sp/>any<sp/>other</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>that<sp/>might<sp/>be<sp/>waiting<sp/>to<sp/>access<sp/>the<sp/>mutex.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="queue_8c_1acb67c81366c00896b21cd826e07d885d" kindref="member">xQueueGenericSend</ref>(<sp/>pxMutex,<sp/>NULL,<sp/><ref refid="queue_8c_1a166c89c5c3a213c7e52283e024bb1d50" kindref="member">queueMUTEX_GIVE_BLOCK_TIME</ref>,<sp/><ref refid="queue_8h_1a4d78fa863fbeb90425a2dda08fae8b12" kindref="member">queueSEND_TO_BACK</ref><sp/>);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="624"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>mutex<sp/>cannot<sp/>be<sp/>given<sp/>because<sp/>the<sp/>calling<sp/>task<sp/>is<sp/>not<sp/>the</highlight></codeline>
<codeline lineno="630"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>holder.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a6b41ab1bbdaa0eb7f8e790602ed21077" kindref="member">traceGIVE_MUTEX_RECURSIVE_FAILED</ref>(<sp/>pxMutex<sp/>);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_RECURSIVE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_RECURSIVE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8h_1a74e27d539a884589ebbbdfcc371a48cd" kindref="member">xQueueTakeMutexRecursive</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xMutex,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxMutex<sp/>=<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xMutex;</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxMutex<sp/>);</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Comments<sp/>regarding<sp/>mutual<sp/>exclusion<sp/>as<sp/>per<sp/>those<sp/>within</highlight></codeline>
<codeline lineno="652"><highlight class="comment"><sp/><sp/><sp/><sp/>xQueueGiveMutexRecursive().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a088b831fdffacf61abf9c7312a2386ad" kindref="member">traceTAKE_MUTEX_RECURSIVE</ref>(<sp/>pxMutex<sp/>);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxMutex-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" kindref="member">xMutexHolder</ref><sp/>==<sp/><ref refid="task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc" kindref="member">xTaskGetCurrentTaskHandle</ref>()<sp/>)</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxMutex-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1aa428fcfc6e5831d054234444fde56574" kindref="member">uxRecursiveCallCount</ref><sp/>)++;</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="queue_8c_1ade45e48664e5ec17ea091f00cd34394f" kindref="member">xQueueSemaphoreTake</ref>(<sp/>pxMutex,<sp/>xTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pdPASS<sp/>will<sp/>only<sp/>be<sp/>returned<sp/>if<sp/>the<sp/>mutex<sp/>was<sp/>successfully</highlight></codeline>
<codeline lineno="666"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>obtained.<sp/><sp/>The<sp/>calling<sp/>task<sp/>may<sp/>have<sp/>entered<sp/>the<sp/>Blocked<sp/>state</highlight></codeline>
<codeline lineno="667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>reaching<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xReturn<sp/>!=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref><sp/>)</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxMutex-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1aa428fcfc6e5831d054234444fde56574" kindref="member">uxRecursiveCallCount</ref><sp/>)++;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ad2d983d63b7d1c3d9208b14d3b76df53" kindref="member">traceTAKE_MUTEX_RECURSIVE_FAILED</ref>(<sp/>pxMutex<sp/>);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_RECURSIVE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>(<sp/>configUSE_COUNTING_SEMAPHORES<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/><ref refid="queue_8h_1a601cb15993988a393676a9df74b067bd" kindref="member">xQueueCreateCountingSemaphoreStatic</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxMaxCount,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxInitialCount,<sp/><ref refid="structx_s_t_a_t_i_c___q_u_e_u_e" kindref="compound">StaticQueue_t</ref><sp/>*pxStaticQueue<sp/>)</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xHandle;</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>uxMaxCount<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>uxInitialCount<sp/>&lt;=<sp/>uxMaxCount<sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>xHandle<sp/>=<sp/>xQueueGenericCreateStatic(<sp/>uxMaxCount,<sp/><ref refid="queue_8c_1adfb14d07644ad4da4bd2303105884227" kindref="member">queueSEMAPHORE_QUEUE_ITEM_LENGTH</ref>,<sp/>NULL,<sp/>pxStaticQueue,<sp/><ref refid="queue_8h_1abccf1c95aa0942f8df163d414010542b" kindref="member">queueQUEUE_TYPE_COUNTING_SEMAPHORE</ref><sp/>);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xHandle<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xHandle<sp/>)-&gt;uxMessagesWaiting<sp/>=<sp/>uxInitialCount;</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a3803714a43519a6bfc93dadfa255bf14" kindref="member">traceCREATE_COUNTING_SEMAPHORE</ref>();</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a656fccb9717146cc4036ff8701eeb67e" kindref="member">traceCREATE_COUNTING_SEMAPHORE_FAILED</ref>();</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xHandle;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>(<sp/>configUSE_COUNTING_SEMAPHORES<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>(<sp/>configUSE_COUNTING_SEMAPHORES<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/><ref refid="queue_8h_1ac74677a8d243c76843c25fdb06436043" kindref="member">xQueueCreateCountingSemaphore</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxMaxCount,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxInitialCount<sp/>)</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xHandle;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>uxMaxCount<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>uxInitialCount<sp/>&lt;=<sp/>uxMaxCount<sp/>);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>xHandle<sp/>=<sp/>xQueueGenericCreate(<sp/>uxMaxCount,<sp/><ref refid="queue_8c_1adfb14d07644ad4da4bd2303105884227" kindref="member">queueSEMAPHORE_QUEUE_ITEM_LENGTH</ref>,<sp/><ref refid="queue_8h_1abccf1c95aa0942f8df163d414010542b" kindref="member">queueQUEUE_TYPE_COUNTING_SEMAPHORE</ref><sp/>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xHandle<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xHandle<sp/>)-&gt;uxMessagesWaiting<sp/>=<sp/>uxInitialCount;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a3803714a43519a6bfc93dadfa255bf14" kindref="member">traceCREATE_COUNTING_SEMAPHORE</ref>();</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a656fccb9717146cc4036ff8701eeb67e" kindref="member">traceCREATE_COUNTING_SEMAPHORE_FAILED</ref>();</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xHandle;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>(<sp/>configUSE_COUNTING_SEMAPHORES<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740" refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1acb67c81366c00896b21cd826e07d885d" kindref="member">xQueueGenericSend</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvItemToQueue,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xCopyPosition<sp/>)</highlight></codeline>
<codeline lineno="741"><highlight class="normal">{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xEntryTimeSet<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>,<sp/>xYieldRequired;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">TimeOut_t</ref><sp/>xTimeOut;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/>pvItemToQueue<sp/>==<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/>xCopyPosition<sp/>==<sp/><ref refid="queue_8h_1a5bb1c4a46d4b08b6d35cf586983476ef" kindref="member">queueOVERWRITE</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>!=<sp/>1<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>(<sp/>INCLUDE_xTaskGetSchedulerState<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/><ref refid="task_8h_1a0241000e08a261372186d34825a35979" kindref="member">xTaskGetSchedulerState</ref>()<sp/>==<sp/><ref refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" kindref="member">taskSCHEDULER_SUSPENDED</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>xTicksToWait<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>-save<sp/>-e904<sp/>This<sp/>function<sp/>relaxes<sp/>the<sp/>coding<sp/>standard<sp/>somewhat<sp/>to</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/>allow<sp/>return<sp/>statements<sp/>within<sp/>the<sp/>function<sp/>itself.<sp/><sp/>This<sp/>is<sp/>done<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="758"><highlight class="comment"><sp/><sp/>interest<sp/>of<sp/>execution<sp/>time<sp/>efficiency.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;;<sp/>)</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>there<sp/>room<sp/>on<sp/>the<sp/>queue<sp/>now?<sp/><sp/>The<sp/>running<sp/>task<sp/>must<sp/>be<sp/>the</highlight></codeline>
<codeline lineno="764"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>highest<sp/>priority<sp/>task<sp/>wanting<sp/>to<sp/>access<sp/>the<sp/>queue.<sp/><sp/>If<sp/>the<sp/>head<sp/>item</highlight></codeline>
<codeline lineno="765"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>queue<sp/>is<sp/>to<sp/>be<sp/>overwritten<sp/>then<sp/>it<sp/>does<sp/>not<sp/>matter<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>queue<sp/>is<sp/>full.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>&lt;<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>)<sp/>||<sp/>(<sp/>xCopyPosition<sp/>==<sp/><ref refid="queue_8h_1a5bb1c4a46d4b08b6d35cf586983476ef" kindref="member">queueOVERWRITE</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a5cfc9dd899c89966172cb329740f551a" kindref="member">traceQUEUE_SEND</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxPreviousMessagesWaiting<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref>;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xYieldRequired<sp/>=<sp/><ref refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" kindref="member">prvCopyDataToQueue</ref>(<sp/>pxQueue,<sp/>pvItemToQueue,<sp/>xCopyPosition<sp/>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;pxQueueSetContainer<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>xCopyPosition<sp/>==<sp/><ref refid="queue_8h_1a5bb1c4a46d4b08b6d35cf586983476ef" kindref="member">queueOVERWRITE</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>uxPreviousMessagesWaiting<sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>not<sp/>notify<sp/>the<sp/>queue<sp/>set<sp/>as<sp/>an<sp/>existing<sp/>item</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>was<sp/>overwritten<sp/>in<sp/>the<sp/>queue<sp/>so<sp/>the<sp/>number<sp/>of<sp/>items</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>queue<sp/>has<sp/>not<sp/>changed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>prvNotifyQueueSetContainer(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>is<sp/>a<sp/>member<sp/>of<sp/>a<sp/>queue<sp/>set,<sp/>and<sp/>posting</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>queue<sp/>set<sp/>caused<sp/>a<sp/>higher<sp/>priority<sp/>task<sp/>to</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unblock.<sp/>A<sp/>context<sp/>switch<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" kindref="member">queueYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>was<sp/>a<sp/>task<sp/>waiting<sp/>for<sp/>data<sp/>to<sp/>arrive<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue<sp/>then<sp/>unblock<sp/>it<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>unblocked<sp/>task<sp/>has<sp/>a<sp/>priority<sp/>higher<sp/>than</highlight></codeline>
<codeline lineno="807"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>our<sp/>own<sp/>so<sp/>yield<sp/>immediately.<sp/><sp/>Yes<sp/>it<sp/>is<sp/>ok<sp/>to</highlight></codeline>
<codeline lineno="808"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>do<sp/>this<sp/>from<sp/>within<sp/>the<sp/>critical<sp/>section<sp/>-<sp/>the</highlight></codeline>
<codeline lineno="809"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kernel<sp/>takes<sp/>care<sp/>of<sp/>that.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" kindref="member">queueYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xYieldRequired<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>path<sp/>is<sp/>a<sp/>special<sp/>case<sp/>that<sp/>will<sp/>only<sp/>get</highlight></codeline>
<codeline lineno="820"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executed<sp/>if<sp/>the<sp/>task<sp/>was<sp/>holding<sp/>multiple<sp/>mutexes</highlight></codeline>
<codeline lineno="821"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>the<sp/>mutexes<sp/>were<sp/>given<sp/>back<sp/>in<sp/>an<sp/>order<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="822"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>different<sp/>to<sp/>that<sp/>in<sp/>which<sp/>they<sp/>were<sp/>taken.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" kindref="member">queueYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xYieldRequired<sp/>=<sp/><ref refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" kindref="member">prvCopyDataToQueue</ref>(<sp/>pxQueue,<sp/>pvItemToQueue,<sp/>xCopyPosition<sp/>);</highlight></codeline>
<codeline lineno="834"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>there<sp/>was<sp/>a<sp/>task<sp/>waiting<sp/>for<sp/>data<sp/>to<sp/>arrive<sp/>on<sp/>the</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue<sp/>then<sp/>unblock<sp/>it<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>unblocked<sp/>task<sp/>has<sp/>a<sp/>priority<sp/>higher<sp/>than</highlight></codeline>
<codeline lineno="842"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>our<sp/>own<sp/>so<sp/>yield<sp/>immediately.<sp/><sp/>Yes<sp/>it<sp/>is<sp/>ok<sp/>to<sp/>do</highlight></codeline>
<codeline lineno="843"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>from<sp/>within<sp/>the<sp/>critical<sp/>section<sp/>-<sp/>the<sp/>kernel</highlight></codeline>
<codeline lineno="844"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>takes<sp/>care<sp/>of<sp/>that.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" kindref="member">queueYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xYieldRequired<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>path<sp/>is<sp/>a<sp/>special<sp/>case<sp/>that<sp/>will<sp/>only<sp/>get</highlight></codeline>
<codeline lineno="855"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executed<sp/>if<sp/>the<sp/>task<sp/>was<sp/>holding<sp/>multiple<sp/>mutexes<sp/>and</highlight></codeline>
<codeline lineno="856"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>mutexes<sp/>were<sp/>given<sp/>back<sp/>in<sp/>an<sp/>order<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="857"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>different<sp/>to<sp/>that<sp/>in<sp/>which<sp/>they<sp/>were<sp/>taken.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" kindref="member">queueYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>was<sp/>full<sp/>and<sp/>no<sp/>block<sp/>time<sp/>is<sp/>specified<sp/>(or</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>block<sp/>time<sp/>has<sp/>expired)<sp/>so<sp/>leave<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>to<sp/>the<sp/>original<sp/>privilege<sp/>level<sp/>before<sp/>exiting</highlight></codeline>
<codeline lineno="879"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ab4896b8d7e443200918a6e4a7f64585d" kindref="member">traceQUEUE_SEND_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1ae40de11e4044a83a97d2cb5d00ce608b" kindref="member">errQUEUE_FULL</ref>;</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xEntryTimeSet<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>was<sp/>full<sp/>and<sp/>a<sp/>block<sp/>time<sp/>was<sp/>specified<sp/>so</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configure<sp/>the<sp/>timeout<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" kindref="member">vTaskInternalSetTimeOutState</ref>(<sp/>&amp;xTimeOut<sp/>);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xEntryTimeSet<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Entry<sp/>time<sp/>was<sp/>already<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="898"><highlight class="normal"></highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Interrupts<sp/>and<sp/>other<sp/>tasks<sp/>can<sp/>send<sp/>to<sp/>and<sp/>receive<sp/>from<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/>now<sp/>the<sp/>critical<sp/>section<sp/>has<sp/>been<sp/>exited.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"></highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="queue_8c_1ae4efd14c0f4dee7f189ef2e4d9ce1f1b" kindref="member">prvLockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"></highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>timeout<sp/>state<sp/>to<sp/>see<sp/>if<sp/>it<sp/>has<sp/>expired<sp/>yet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" kindref="member">xTaskCheckForTimeOut</ref>(<sp/>&amp;xTimeOut,<sp/>&amp;xTicksToWait<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="queue_8c_1a70546f6b48a8b715eae3dd84e0546045" kindref="member">prvIsQueueFull</ref>(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a9484f4523e4bec2ab2dc233f2556c3c5" kindref="member">traceBLOCKING_ON_QUEUE_SEND</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a56ae23bc0dece4522d666959902221ca" kindref="member">vTaskPlaceOnEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>),<sp/>xTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unlocking<sp/>the<sp/>queue<sp/>means<sp/>queue<sp/>events<sp/>can<sp/>effect<sp/>the</highlight></codeline>
<codeline lineno="914"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event<sp/>list.<sp/><sp/>It<sp/>is<sp/>possible<sp/>that<sp/>interrupts<sp/>occurring<sp/>now</highlight></codeline>
<codeline lineno="915"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remove<sp/>this<sp/>task<sp/>from<sp/>the<sp/>event<sp/>list<sp/>again<sp/>-<sp/>but<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="916"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scheduler<sp/>is<sp/>suspended<sp/>the<sp/>task<sp/>will<sp/>go<sp/>onto<sp/>the<sp/>pending</highlight></codeline>
<codeline lineno="917"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ready<sp/>last<sp/>instead<sp/>of<sp/>the<sp/>actual<sp/>ready<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Resuming<sp/>the<sp/>scheduler<sp/>will<sp/>move<sp/>tasks<sp/>from<sp/>the<sp/>pending</highlight></codeline>
<codeline lineno="921"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ready<sp/>list<sp/>into<sp/>the<sp/>ready<sp/>list<sp/>-<sp/>so<sp/>it<sp/>is<sp/>feasible<sp/>that<sp/>this</highlight></codeline>
<codeline lineno="922"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>is<sp/>already<sp/>in<sp/>a<sp/>ready<sp/>list<sp/>before<sp/>it<sp/>yields<sp/>-<sp/>in<sp/>which</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>case<sp/>the<sp/>yield<sp/>will<sp/>not<sp/>cause<sp/>a<sp/>context<sp/>switch<sp/>unless<sp/>there</highlight></codeline>
<codeline lineno="924"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>also<sp/>a<sp/>higher<sp/>priority<sp/>task<sp/>in<sp/>the<sp/>pending<sp/>ready<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>()<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Try<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>timeout<sp/>has<sp/>expired.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ab4896b8d7e443200918a6e4a7f64585d" kindref="member">traceQUEUE_SEND_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1ae40de11e4044a83a97d2cb5d00ce608b" kindref="member">errQUEUE_FULL</ref>;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>-restore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="947"><highlight class="normal">}</highlight></codeline>
<codeline lineno="948"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950" refid="queue_8h_1a263711eb0124112e828a18fd4b8ab29d" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a0fb58b25eb396a5cf8e1688b7e1a56cb" kindref="member">xQueueGenericSendFromISR</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvItemToQueue,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxHigherPriorityTaskWoken,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xCopyPosition<sp/>)</highlight></codeline>
<codeline lineno="951"><highlight class="normal">{</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/>pvItemToQueue<sp/>==<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/>xCopyPosition<sp/>==<sp/><ref refid="queue_8h_1a5bb1c4a46d4b08b6d35cf586983476ef" kindref="member">queueOVERWRITE</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>!=<sp/>1<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>RTOS<sp/>ports<sp/>that<sp/>support<sp/>interrupt<sp/>nesting<sp/>have<sp/>the<sp/>concept<sp/>of<sp/>a<sp/>maximum</highlight></codeline>
<codeline lineno="961"><highlight class="comment"><sp/><sp/>system<sp/>call<sp/>(or<sp/>maximum<sp/>API<sp/>call)<sp/>interrupt<sp/>priority.<sp/><sp/>Interrupts<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="962"><highlight class="comment"><sp/><sp/>above<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>priority<sp/>are<sp/>kept<sp/>permanently<sp/>enabled,<sp/>even</highlight></codeline>
<codeline lineno="963"><highlight class="comment"><sp/><sp/>when<sp/>the<sp/>RTOS<sp/>kernel<sp/>is<sp/>in<sp/>a<sp/>critical<sp/>section,<sp/>but<sp/>cannot<sp/>make<sp/>any<sp/>calls<sp/>to</highlight></codeline>
<codeline lineno="964"><highlight class="comment"><sp/><sp/>FreeRTOS<sp/>API<sp/>functions.<sp/><sp/>If<sp/>configASSERT()<sp/>is<sp/>defined<sp/>in<sp/>FreeRTOSConfig.h</highlight></codeline>
<codeline lineno="965"><highlight class="comment"><sp/><sp/>then<sp/>portASSERT_IF_INTERRUPT_PRIORITY_INVALID()<sp/>will<sp/>result<sp/>in<sp/>an<sp/>assertion</highlight></codeline>
<codeline lineno="966"><highlight class="comment"><sp/><sp/>failure<sp/>if<sp/>a<sp/>FreeRTOS<sp/>API<sp/>function<sp/>is<sp/>called<sp/>from<sp/>an<sp/>interrupt<sp/>that<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="967"><highlight class="comment"><sp/><sp/>assigned<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>configured<sp/>maximum<sp/>system<sp/>call<sp/>priority.</highlight></codeline>
<codeline lineno="968"><highlight class="comment"><sp/><sp/>Only<sp/>FreeRTOS<sp/>functions<sp/>that<sp/>end<sp/>in<sp/>FromISR<sp/>can<sp/>be<sp/>called<sp/>from<sp/>interrupts</highlight></codeline>
<codeline lineno="969"><highlight class="comment"><sp/><sp/>that<sp/>have<sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>at<sp/>or<sp/>(logically)<sp/>below<sp/>the<sp/>maximum</highlight></codeline>
<codeline lineno="970"><highlight class="comment"><sp/><sp/>system<sp/>call<sp/>interrupt<sp/>priority.<sp/><sp/>FreeRTOS<sp/>maintains<sp/>a<sp/>separate<sp/>interrupt</highlight></codeline>
<codeline lineno="971"><highlight class="comment"><sp/><sp/>safe<sp/>API<sp/>to<sp/>ensure<sp/>interrupt<sp/>entry<sp/>is<sp/>as<sp/>fast<sp/>and<sp/>as<sp/>simple<sp/>as<sp/>possible.</highlight></codeline>
<codeline lineno="972"><highlight class="comment"><sp/><sp/>More<sp/>information<sp/>(albeit<sp/>Cortex-M<sp/>specific)<sp/>is<sp/>provided<sp/>on<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="973"><highlight class="comment"><sp/><sp/>link:<sp/>http://www.freertos.org/RTOS-Cortex-M3-M4.html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" kindref="member">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</ref>();</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>xQueueGenericSend,<sp/>except<sp/>without<sp/>blocking<sp/>if<sp/>there<sp/>is<sp/>no<sp/>room</highlight></codeline>
<codeline lineno="977"><highlight class="comment"><sp/><sp/>in<sp/>the<sp/>queue.<sp/><sp/>Also<sp/>don&apos;t<sp/>directly<sp/>wake<sp/>a<sp/>task<sp/>that<sp/>was<sp/>blocked<sp/>on<sp/>a<sp/>queue</highlight></codeline>
<codeline lineno="978"><highlight class="comment"><sp/><sp/>read,<sp/>instead<sp/>return<sp/>a<sp/>flag<sp/>to<sp/>say<sp/>whether<sp/>a<sp/>context<sp/>switch<sp/>is<sp/>required<sp/>or</highlight></codeline>
<codeline lineno="979"><highlight class="comment"><sp/><sp/>not<sp/>(i.e.<sp/>has<sp/>a<sp/>task<sp/>with<sp/>a<sp/>higher<sp/>priority<sp/>than<sp/>us<sp/>been<sp/>woken<sp/>by<sp/>this</highlight></codeline>
<codeline lineno="980"><highlight class="comment"><sp/><sp/>post).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>&lt;<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>)<sp/>||<sp/>(<sp/>xCopyPosition<sp/>==<sp/><ref refid="queue_8h_1a5bb1c4a46d4b08b6d35cf586983476ef" kindref="member">queueOVERWRITE</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int8_t<sp/>cTxLock<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" kindref="member">cTxLock</ref>;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxPreviousMessagesWaiting<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref>;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a590bfae4dcb6be8a4b3daadf09a1b587" kindref="member">traceQUEUE_SEND_FROM_ISR</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Semaphores<sp/>use<sp/>xQueueGiveFromISR(),<sp/>so<sp/>pxQueue<sp/>will<sp/>not<sp/>be<sp/>a</highlight></codeline>
<codeline lineno="991"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>semaphore<sp/>or<sp/>mutex.<sp/><sp/>That<sp/>means<sp/>prvCopyDataToQueue()<sp/>cannot<sp/>result</highlight></codeline>
<codeline lineno="992"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>a<sp/>task<sp/>disinheriting<sp/>a<sp/>priority<sp/>and<sp/>prvCopyDataToQueue()<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="993"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>called<sp/>here<sp/>even<sp/>though<sp/>the<sp/>disinherit<sp/>function<sp/>does<sp/>not<sp/>check<sp/>if</highlight></codeline>
<codeline lineno="994"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>scheduler<sp/>is<sp/>suspended<sp/>before<sp/>accessing<sp/>the<sp/>ready<sp/>lists.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" kindref="member">prvCopyDataToQueue</ref>(<sp/>pxQueue,<sp/>pvItemToQueue,<sp/>xCopyPosition<sp/>);</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>event<sp/>list<sp/>is<sp/>not<sp/>altered<sp/>if<sp/>the<sp/>queue<sp/>is<sp/>locked.<sp/><sp/>This<sp/>will</highlight></codeline>
<codeline lineno="998"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>done<sp/>when<sp/>the<sp/>queue<sp/>is<sp/>unlocked<sp/>later.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cTxLock<sp/>==<sp/><ref refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" kindref="member">queueUNLOCKED</ref><sp/>)</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;pxQueueSetContainer<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>xCopyPosition<sp/>==<sp/><ref refid="queue_8h_1a5bb1c4a46d4b08b6d35cf586983476ef" kindref="member">queueOVERWRITE</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>uxPreviousMessagesWaiting<sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>not<sp/>notify<sp/>the<sp/>queue<sp/>set<sp/>as<sp/>an<sp/>existing<sp/>item</highlight></codeline>
<codeline lineno="1008"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>was<sp/>overwritten<sp/>in<sp/>the<sp/>queue<sp/>so<sp/>the<sp/>number<sp/>of<sp/>items</highlight></codeline>
<codeline lineno="1009"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>queue<sp/>has<sp/>not<sp/>changed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>prvNotifyQueueSetContainer(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>is<sp/>a<sp/>member<sp/>of<sp/>a<sp/>queue<sp/>set,<sp/>and<sp/>posting</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>queue<sp/>set<sp/>caused<sp/>a<sp/>higher<sp/>priority<sp/>task<sp/>to</highlight></codeline>
<codeline lineno="1016"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unblock.<sp/><sp/>A<sp/>context<sp/>switch<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxHigherPriorityTaskWoken<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pxHigherPriorityTaskWoken<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>waiting<sp/>has<sp/>a<sp/>higher<sp/>priority<sp/>so</highlight></codeline>
<codeline lineno="1038"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record<sp/>that<sp/>a<sp/>context<sp/>switch<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxHigherPriorityTaskWoken<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pxHigherPriorityTaskWoken<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>waiting<sp/>has<sp/>a<sp/>higher<sp/>priority<sp/>so<sp/>record<sp/>that<sp/>a</highlight></codeline>
<codeline lineno="1066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>switch<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxHigherPriorityTaskWoken<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pxHigherPriorityTaskWoken<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Not<sp/>used<sp/>in<sp/>this<sp/>path.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>uxPreviousMessagesWaiting;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>the<sp/>lock<sp/>count<sp/>so<sp/>the<sp/>task<sp/>that<sp/>unlocks<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>knows<sp/>that<sp/>data<sp/>was<sp/>posted<sp/>while<sp/>it<sp/>was<sp/>locked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" kindref="member">cTxLock</ref><sp/>=<sp/>(<sp/>int8_t<sp/>)<sp/>(<sp/>cTxLock<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a71fa002ce8a199d38e697d94c613649f" kindref="member">traceQUEUE_SEND_FROM_ISR_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1ae40de11e4044a83a97d2cb5d00ce608b" kindref="member">errQUEUE_FULL</ref>;</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="1109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1112" refid="queue_8h_1ad14ae1174c2772cffc9e0c2c45dc55a6" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a4df49fafb6ba4400ede6f2d07a40865f" kindref="member">xQueueGiveFromISR</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxHigherPriorityTaskWoken<sp/>)</highlight></codeline>
<codeline lineno="1113"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Similar<sp/>to<sp/>xQueueGenericSendFromISR()<sp/>but<sp/>used<sp/>with<sp/>semaphores<sp/>where<sp/>the</highlight></codeline>
<codeline lineno="1119"><highlight class="comment"><sp/><sp/>item<sp/>size<sp/>is<sp/>0.<sp/><sp/>Don&apos;t<sp/>directly<sp/>wake<sp/>a<sp/>task<sp/>that<sp/>was<sp/>blocked<sp/>on<sp/>a<sp/>queue</highlight></codeline>
<codeline lineno="1120"><highlight class="comment"><sp/><sp/>read,<sp/>instead<sp/>return<sp/>a<sp/>flag<sp/>to<sp/>say<sp/>whether<sp/>a<sp/>context<sp/>switch<sp/>is<sp/>required<sp/>or</highlight></codeline>
<codeline lineno="1121"><highlight class="comment"><sp/><sp/>not<sp/>(i.e.<sp/>has<sp/>a<sp/>task<sp/>with<sp/>a<sp/>higher<sp/>priority<sp/>than<sp/>us<sp/>been<sp/>woken<sp/>by<sp/>this</highlight></codeline>
<codeline lineno="1122"><highlight class="comment"><sp/><sp/>post).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>xQueueGenericSendFromISR()<sp/>should<sp/>be<sp/>used<sp/>instead<sp/>of<sp/>xQueueGiveFromISR()</highlight></codeline>
<codeline lineno="1127"><highlight class="comment"><sp/><sp/>if<sp/>the<sp/>item<sp/>size<sp/>is<sp/>not<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Normally<sp/>a<sp/>mutex<sp/>would<sp/>not<sp/>be<sp/>given<sp/>from<sp/>an<sp/>interrupt,<sp/>especially<sp/>if</highlight></codeline>
<codeline lineno="1131"><highlight class="comment"><sp/><sp/>there<sp/>is<sp/>a<sp/>mutex<sp/>holder,<sp/>as<sp/>priority<sp/>inheritance<sp/>makes<sp/>no<sp/>sense<sp/>for<sp/>an</highlight></codeline>
<codeline lineno="1132"><highlight class="comment"><sp/><sp/>interrupts,<sp/>only<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/>pxQueue-&gt;uxQueueType<sp/>==<sp/><ref refid="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" kindref="member">queueQUEUE_IS_MUTEX</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" kindref="member">xMutexHolder</ref><sp/>!=<sp/>NULL<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>RTOS<sp/>ports<sp/>that<sp/>support<sp/>interrupt<sp/>nesting<sp/>have<sp/>the<sp/>concept<sp/>of<sp/>a<sp/>maximum</highlight></codeline>
<codeline lineno="1136"><highlight class="comment"><sp/><sp/>system<sp/>call<sp/>(or<sp/>maximum<sp/>API<sp/>call)<sp/>interrupt<sp/>priority.<sp/><sp/>Interrupts<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="1137"><highlight class="comment"><sp/><sp/>above<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>priority<sp/>are<sp/>kept<sp/>permanently<sp/>enabled,<sp/>even</highlight></codeline>
<codeline lineno="1138"><highlight class="comment"><sp/><sp/>when<sp/>the<sp/>RTOS<sp/>kernel<sp/>is<sp/>in<sp/>a<sp/>critical<sp/>section,<sp/>but<sp/>cannot<sp/>make<sp/>any<sp/>calls<sp/>to</highlight></codeline>
<codeline lineno="1139"><highlight class="comment"><sp/><sp/>FreeRTOS<sp/>API<sp/>functions.<sp/><sp/>If<sp/>configASSERT()<sp/>is<sp/>defined<sp/>in<sp/>FreeRTOSConfig.h</highlight></codeline>
<codeline lineno="1140"><highlight class="comment"><sp/><sp/>then<sp/>portASSERT_IF_INTERRUPT_PRIORITY_INVALID()<sp/>will<sp/>result<sp/>in<sp/>an<sp/>assertion</highlight></codeline>
<codeline lineno="1141"><highlight class="comment"><sp/><sp/>failure<sp/>if<sp/>a<sp/>FreeRTOS<sp/>API<sp/>function<sp/>is<sp/>called<sp/>from<sp/>an<sp/>interrupt<sp/>that<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="1142"><highlight class="comment"><sp/><sp/>assigned<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>configured<sp/>maximum<sp/>system<sp/>call<sp/>priority.</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/>Only<sp/>FreeRTOS<sp/>functions<sp/>that<sp/>end<sp/>in<sp/>FromISR<sp/>can<sp/>be<sp/>called<sp/>from<sp/>interrupts</highlight></codeline>
<codeline lineno="1144"><highlight class="comment"><sp/><sp/>that<sp/>have<sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>at<sp/>or<sp/>(logically)<sp/>below<sp/>the<sp/>maximum</highlight></codeline>
<codeline lineno="1145"><highlight class="comment"><sp/><sp/>system<sp/>call<sp/>interrupt<sp/>priority.<sp/><sp/>FreeRTOS<sp/>maintains<sp/>a<sp/>separate<sp/>interrupt</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/>safe<sp/>API<sp/>to<sp/>ensure<sp/>interrupt<sp/>entry<sp/>is<sp/>as<sp/>fast<sp/>and<sp/>as<sp/>simple<sp/>as<sp/>possible.</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/><sp/>More<sp/>information<sp/>(albeit<sp/>Cortex-M<sp/>specific)<sp/>is<sp/>provided<sp/>on<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="1148"><highlight class="comment"><sp/><sp/>link:<sp/>http://www.freertos.org/RTOS-Cortex-M3-M4.html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" kindref="member">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</ref>();</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxMessagesWaiting<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref>;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>When<sp/>the<sp/>queue<sp/>is<sp/>used<sp/>to<sp/>implement<sp/>a<sp/>semaphore<sp/>no<sp/>data<sp/>is<sp/>ever</highlight></codeline>
<codeline lineno="1156"><highlight class="comment"><sp/><sp/><sp/><sp/>moved<sp/>through<sp/>the<sp/>queue<sp/>but<sp/>it<sp/>is<sp/>still<sp/>valid<sp/>to<sp/>see<sp/>if<sp/>the<sp/>queue<sp/>&apos;has</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/><sp/><sp/><sp/>space&apos;.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxMessagesWaiting<sp/>&lt;<sp/>pxQueue-&gt;uxLength<sp/>)</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int8_t<sp/>cTxLock<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" kindref="member">cTxLock</ref>;</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a590bfae4dcb6be8a4b3daadf09a1b587" kindref="member">traceQUEUE_SEND_FROM_ISR</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"></highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>can<sp/>only<sp/>have<sp/>an<sp/>inherited<sp/>priority<sp/>if<sp/>it<sp/>is<sp/>a<sp/>mutex</highlight></codeline>
<codeline lineno="1165"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>holder<sp/>-<sp/>and<sp/>if<sp/>there<sp/>is<sp/>a<sp/>mutex<sp/>holder<sp/>then<sp/>the<sp/>mutex<sp/>cannot<sp/>be</highlight></codeline>
<codeline lineno="1166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>given<sp/>from<sp/>an<sp/>ISR.<sp/><sp/>As<sp/>this<sp/>is<sp/>the<sp/>ISR<sp/>version<sp/>of<sp/>the<sp/>function<sp/>it</highlight></codeline>
<codeline lineno="1167"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>can<sp/>be<sp/>assumed<sp/>there<sp/>is<sp/>no<sp/>mutex<sp/>holder<sp/>and<sp/>no<sp/>need<sp/>to<sp/>determine<sp/>if</highlight></codeline>
<codeline lineno="1168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>priority<sp/>disinheritance<sp/>is<sp/>needed.<sp/><sp/>Simply<sp/>increase<sp/>the<sp/>count<sp/>of</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>messages<sp/>(semaphores)<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>=<sp/>uxMessagesWaiting<sp/>+<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>event<sp/>list<sp/>is<sp/>not<sp/>altered<sp/>if<sp/>the<sp/>queue<sp/>is<sp/>locked.<sp/><sp/>This<sp/>will</highlight></codeline>
<codeline lineno="1173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>done<sp/>when<sp/>the<sp/>queue<sp/>is<sp/>unlocked<sp/>later.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cTxLock<sp/>==<sp/><ref refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" kindref="member">queueUNLOCKED</ref><sp/>)</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;pxQueueSetContainer<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>prvNotifyQueueSetContainer(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>semaphore<sp/>is<sp/>a<sp/>member<sp/>of<sp/>a<sp/>queue<sp/>set,<sp/>and</highlight></codeline>
<codeline lineno="1183"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posting<sp/>to<sp/>the<sp/>queue<sp/>set<sp/>caused<sp/>a<sp/>higher<sp/>priority</highlight></codeline>
<codeline lineno="1184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>to<sp/>unblock.<sp/><sp/>A<sp/>context<sp/>switch<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxHigherPriorityTaskWoken<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pxHigherPriorityTaskWoken<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>waiting<sp/>has<sp/>a<sp/>higher<sp/>priority<sp/>so</highlight></codeline>
<codeline lineno="1206"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>record<sp/>that<sp/>a<sp/>context<sp/>switch<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxHigherPriorityTaskWoken<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pxHigherPriorityTaskWoken<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>waiting<sp/>has<sp/>a<sp/>higher<sp/>priority<sp/>so<sp/>record<sp/>that<sp/>a</highlight></codeline>
<codeline lineno="1234"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>switch<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxHigherPriorityTaskWoken<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pxHigherPriorityTaskWoken<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>the<sp/>lock<sp/>count<sp/>so<sp/>the<sp/>task<sp/>that<sp/>unlocks<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="1259"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>knows<sp/>that<sp/>data<sp/>was<sp/>posted<sp/>while<sp/>it<sp/>was<sp/>locked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" kindref="member">cTxLock</ref><sp/>=<sp/>(<sp/>int8_t<sp/>)<sp/>(<sp/>cTxLock<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a71fa002ce8a199d38e697d94c613649f" kindref="member">traceQUEUE_SEND_FROM_ISR_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1ae40de11e4044a83a97d2cb5d00ce608b" kindref="member">errQUEUE_FULL</ref>;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1275"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277" refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1ad0a166f3b1219a5e37e31f8090d4800d" kindref="member">xQueueReceive</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvBuffer,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="1278"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xEntryTimeSet<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">TimeOut_t</ref><sp/>xTimeOut;</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>pointer<sp/>is<sp/>not<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>pxQueue<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>buffer<sp/>into<sp/>which<sp/>data<sp/>is<sp/>received<sp/>can<sp/>only<sp/>be<sp/>NULL<sp/>if<sp/>the<sp/>data<sp/>size</highlight></codeline>
<codeline lineno="1287"><highlight class="comment"><sp/><sp/>is<sp/>zero<sp/>(so<sp/>no<sp/>data<sp/>is<sp/>copied<sp/>into<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/>(<sp/>pvBuffer<sp/>)<sp/>==<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>(<sp/>pxQueue<sp/>)-&gt;uxItemSize<sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cannot<sp/>block<sp/>if<sp/>the<sp/>scheduler<sp/>is<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>(<sp/>INCLUDE_xTaskGetSchedulerState<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/><ref refid="task_8h_1a0241000e08a261372186d34825a35979" kindref="member">xTaskGetSchedulerState</ref>()<sp/>==<sp/><ref refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" kindref="member">taskSCHEDULER_SUSPENDED</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>xTicksToWait<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1295"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297"><highlight class="normal"></highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>-save<sp/>-e904<sp/><sp/>This<sp/>function<sp/>relaxes<sp/>the<sp/>coding<sp/>standard<sp/>somewhat<sp/>to</highlight></codeline>
<codeline lineno="1299"><highlight class="comment"><sp/><sp/>allow<sp/>return<sp/>statements<sp/>within<sp/>the<sp/>function<sp/>itself.<sp/><sp/>This<sp/>is<sp/>done<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1300"><highlight class="comment"><sp/><sp/>interest<sp/>of<sp/>execution<sp/>time<sp/>efficiency.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;;<sp/>)</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxMessagesWaiting<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref>;</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>there<sp/>data<sp/>in<sp/>the<sp/>queue<sp/>now?<sp/><sp/>To<sp/>be<sp/>running<sp/>the<sp/>calling<sp/>task</highlight></codeline>
<codeline lineno="1308"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>be<sp/>the<sp/>highest<sp/>priority<sp/>task<sp/>wanting<sp/>to<sp/>access<sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxMessagesWaiting<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Data<sp/>available,<sp/>remove<sp/>one<sp/>item.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" kindref="member">prvCopyDataFromQueue</ref>(<sp/>pxQueue,<sp/>pvBuffer<sp/>);</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a82b39aa722910a5e43793e882ded0faf" kindref="member">traceQUEUE_RECEIVE</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>=<sp/>uxMessagesWaiting<sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>now<sp/>space<sp/>in<sp/>the<sp/>queue,<sp/>were<sp/>any<sp/>tasks<sp/>waiting<sp/>to</highlight></codeline>
<codeline lineno="1317"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>post<sp/>to<sp/>the<sp/>queue?<sp/><sp/>If<sp/>so,<sp/>unblock<sp/>the<sp/>highest<sp/>priority<sp/>waiting</highlight></codeline>
<codeline lineno="1318"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" kindref="member">queueYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>was<sp/>empty<sp/>and<sp/>no<sp/>block<sp/>time<sp/>is<sp/>specified<sp/>(or</highlight></codeline>
<codeline lineno="1343"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>block<sp/>time<sp/>has<sp/>expired)<sp/>so<sp/>leave<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a0dbf5969c9d984920177a19d5b402e4e" kindref="member">traceQUEUE_RECEIVE_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a4d79b09954b1efa73ad8d87a36b4a575" kindref="member">errQUEUE_EMPTY</ref>;</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xEntryTimeSet<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>was<sp/>empty<sp/>and<sp/>a<sp/>block<sp/>time<sp/>was<sp/>specified<sp/>so</highlight></codeline>
<codeline lineno="1351"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configure<sp/>the<sp/>timeout<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" kindref="member">vTaskInternalSetTimeOutState</ref>(<sp/>&amp;xTimeOut<sp/>);</highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xEntryTimeSet<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Entry<sp/>time<sp/>was<sp/>already<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Interrupts<sp/>and<sp/>other<sp/>tasks<sp/>can<sp/>send<sp/>to<sp/>and<sp/>receive<sp/>from<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="1365"><highlight class="comment"><sp/><sp/><sp/><sp/>now<sp/>the<sp/>critical<sp/>section<sp/>has<sp/>been<sp/>exited.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="queue_8c_1ae4efd14c0f4dee7f189ef2e4d9ce1f1b" kindref="member">prvLockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>timeout<sp/>state<sp/>to<sp/>see<sp/>if<sp/>it<sp/>has<sp/>expired<sp/>yet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" kindref="member">xTaskCheckForTimeOut</ref>(<sp/>&amp;xTimeOut,<sp/>&amp;xTicksToWait<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>timeout<sp/>has<sp/>not<sp/>expired.<sp/><sp/>If<sp/>the<sp/>queue<sp/>is<sp/>still<sp/>empty<sp/>place</highlight></codeline>
<codeline lineno="1374"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>task<sp/>on<sp/>the<sp/>list<sp/>of<sp/>tasks<sp/>waiting<sp/>to<sp/>receive<sp/>from<sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" kindref="member">prvIsQueueEmpty</ref>(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a657997eddb8c89bef7157e74bac003e2" kindref="member">traceBLOCKING_ON_QUEUE_RECEIVE</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a56ae23bc0dece4522d666959902221ca" kindref="member">vTaskPlaceOnEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>),<sp/>xTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>()<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="1383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>contains<sp/>data<sp/>again.<sp/><sp/>Loop<sp/>back<sp/>to<sp/>try<sp/>and<sp/>read<sp/>the</highlight></codeline>
<codeline lineno="1392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Timed<sp/>out.<sp/><sp/>If<sp/>there<sp/>is<sp/>no<sp/>data<sp/>in<sp/>the<sp/>queue<sp/>exit,<sp/>otherwise<sp/>loop</highlight></codeline>
<codeline lineno="1400"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>back<sp/>and<sp/>attempt<sp/>to<sp/>read<sp/>the<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"></highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" kindref="member">prvIsQueueEmpty</ref>(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a0dbf5969c9d984920177a19d5b402e4e" kindref="member">traceQUEUE_RECEIVE_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a4d79b09954b1efa73ad8d87a36b4a575" kindref="member">errQUEUE_EMPTY</ref>;</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>-restore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"></highlight></codeline>
<codeline lineno="1418" refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1ade45e48664e5ec17ea091f00cd34394f" kindref="member">xQueueSemaphoreTake</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="1419"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xEntryTimeSet<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">TimeOut_t</ref><sp/>xTimeOut;</highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xInheritanceOccurred<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>queue<sp/>pointer<sp/>is<sp/>not<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1429"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>pxQueue<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>this<sp/>really<sp/>is<sp/>a<sp/>semaphore,<sp/>in<sp/>which<sp/>case<sp/>the<sp/>item<sp/>size<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="1432"><highlight class="comment"><sp/><sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cannot<sp/>block<sp/>if<sp/>the<sp/>scheduler<sp/>is<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>(<sp/>INCLUDE_xTaskGetSchedulerState<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/><ref refid="task_8h_1a0241000e08a261372186d34825a35979" kindref="member">xTaskGetSchedulerState</ref>()<sp/>==<sp/><ref refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" kindref="member">taskSCHEDULER_SUSPENDED</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>xTicksToWait<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1441"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"></highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>-save<sp/>-e904<sp/>This<sp/>function<sp/>relaxes<sp/>the<sp/>coding<sp/>standard<sp/>somewhat<sp/>to<sp/>allow<sp/>return</highlight></codeline>
<codeline lineno="1444"><highlight class="comment"><sp/><sp/>statements<sp/>within<sp/>the<sp/>function<sp/>itself.<sp/><sp/>This<sp/>is<sp/>done<sp/>in<sp/>the<sp/>interest</highlight></codeline>
<codeline lineno="1445"><highlight class="comment"><sp/><sp/>of<sp/>execution<sp/>time<sp/>efficiency.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;;<sp/>)</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Semaphores<sp/>are<sp/>queues<sp/>with<sp/>an<sp/>item<sp/>size<sp/>of<sp/>0,<sp/>and<sp/>where<sp/>the</highlight></codeline>
<codeline lineno="1451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>number<sp/>of<sp/>messages<sp/>in<sp/>the<sp/>queue<sp/>is<sp/>the<sp/>semaphore&apos;s<sp/>count<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSemaphoreCount<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref>;</highlight></codeline>
<codeline lineno="1453"><highlight class="normal"></highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>there<sp/>data<sp/>in<sp/>the<sp/>queue<sp/>now?<sp/><sp/>To<sp/>be<sp/>running<sp/>the<sp/>calling<sp/>task</highlight></codeline>
<codeline lineno="1455"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>be<sp/>the<sp/>highest<sp/>priority<sp/>task<sp/>wanting<sp/>to<sp/>access<sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxSemaphoreCount<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a82b39aa722910a5e43793e882ded0faf" kindref="member">traceQUEUE_RECEIVE</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"></highlight></codeline>
<codeline lineno="1460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Semaphores<sp/>are<sp/>queues<sp/>with<sp/>a<sp/>data<sp/>size<sp/>of<sp/>zero<sp/>and<sp/>where<sp/>the</highlight></codeline>
<codeline lineno="1461"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>messages<sp/>waiting<sp/>is<sp/>the<sp/>semaphore&apos;s<sp/>count.<sp/><sp/>Reduce<sp/>the<sp/>count.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>=<sp/>uxSemaphoreCount<sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="1463"><highlight class="normal"></highlight></codeline>
<codeline lineno="1464"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;uxQueueType<sp/>==<sp/><ref refid="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" kindref="member">queueQUEUE_IS_MUTEX</ref><sp/>)</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Record<sp/>the<sp/>information<sp/>required<sp/>to<sp/>implement</highlight></codeline>
<codeline lineno="1469"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priority<sp/>inheritance<sp/>should<sp/>it<sp/>become<sp/>necessary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" kindref="member">xMutexHolder</ref><sp/>=<sp/><ref refid="task_8h_1a54430b124666d513049dcbf888e6935f" kindref="member">pvTaskIncrementMutexHeldCount</ref>();</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"></highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>other<sp/>tasks<sp/>are<sp/>blocked<sp/>waiting<sp/>to<sp/>give<sp/>the</highlight></codeline>
<codeline lineno="1480"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>semaphore,<sp/>and<sp/>if<sp/>so,<sp/>unblock<sp/>the<sp/>highest<sp/>priority<sp/>such<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" kindref="member">queueYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="1486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="1499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>inheritance<sp/>to<sp/>have<sp/>occurred<sp/>there<sp/>must<sp/>have<sp/>been<sp/>an</highlight></codeline>
<codeline lineno="1505"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initial<sp/>timeout,<sp/>and<sp/>an<sp/>adjusted<sp/>timeout<sp/>cannot<sp/>become<sp/>0,<sp/>as</highlight></codeline>
<codeline lineno="1506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>it<sp/>were<sp/>0<sp/>the<sp/>function<sp/>would<sp/>have<sp/>exited.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xInheritanceOccurred<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>);</highlight></codeline>
<codeline lineno="1510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1511"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1512"><highlight class="normal"></highlight></codeline>
<codeline lineno="1513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>semaphore<sp/>count<sp/>was<sp/>0<sp/>and<sp/>no<sp/>block<sp/>time<sp/>is<sp/>specified</highlight></codeline>
<codeline lineno="1514"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(or<sp/>the<sp/>block<sp/>time<sp/>has<sp/>expired)<sp/>so<sp/>exit<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a0dbf5969c9d984920177a19d5b402e4e" kindref="member">traceQUEUE_RECEIVE_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a4d79b09954b1efa73ad8d87a36b4a575" kindref="member">errQUEUE_EMPTY</ref>;</highlight></codeline>
<codeline lineno="1518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xEntryTimeSet<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>semaphore<sp/>count<sp/>was<sp/>0<sp/>and<sp/>a<sp/>block<sp/>time<sp/>was<sp/>specified</highlight></codeline>
<codeline lineno="1522"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>configure<sp/>the<sp/>timeout<sp/>structure<sp/>ready<sp/>to<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" kindref="member">vTaskInternalSetTimeOutState</ref>(<sp/>&amp;xTimeOut<sp/>);</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xEntryTimeSet<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Entry<sp/>time<sp/>was<sp/>already<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Interrupts<sp/>and<sp/>other<sp/>tasks<sp/>can<sp/>give<sp/>to<sp/>and<sp/>take<sp/>from<sp/>the<sp/>semaphore</highlight></codeline>
<codeline lineno="1536"><highlight class="comment"><sp/><sp/><sp/><sp/>now<sp/>the<sp/>critical<sp/>section<sp/>has<sp/>been<sp/>exited.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="queue_8c_1ae4efd14c0f4dee7f189ef2e4d9ce1f1b" kindref="member">prvLockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"></highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>timeout<sp/>state<sp/>to<sp/>see<sp/>if<sp/>it<sp/>has<sp/>expired<sp/>yet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" kindref="member">xTaskCheckForTimeOut</ref>(<sp/>&amp;xTimeOut,<sp/>&amp;xTicksToWait<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>block<sp/>time<sp/>is<sp/>specified<sp/>and<sp/>not<sp/>expired.<sp/><sp/>If<sp/>the<sp/>semaphore</highlight></codeline>
<codeline lineno="1545"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>is<sp/>0<sp/>then<sp/>enter<sp/>the<sp/>Blocked<sp/>state<sp/>to<sp/>wait<sp/>for<sp/>a<sp/>semaphore<sp/>to</highlight></codeline>
<codeline lineno="1546"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>become<sp/>available.<sp/><sp/>As<sp/>semaphores<sp/>are<sp/>implemented<sp/>with<sp/>queues<sp/>the</highlight></codeline>
<codeline lineno="1547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>queue<sp/>being<sp/>empty<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>semaphore<sp/>count<sp/>being<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" kindref="member">prvIsQueueEmpty</ref>(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a657997eddb8c89bef7157e74bac003e2" kindref="member">traceBLOCKING_ON_QUEUE_RECEIVE</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"></highlight></codeline>
<codeline lineno="1552"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;uxQueueType<sp/>==<sp/><ref refid="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" kindref="member">queueQUEUE_IS_MUTEX</ref><sp/>)</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xInheritanceOccurred<sp/>=<sp/><ref refid="task_8h_1aa715a488a6014df5a9393ca38c5938c0" kindref="member">xTaskPriorityInherit</ref>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" kindref="member">xMutexHolder</ref><sp/>);</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1568"><highlight class="normal"></highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a56ae23bc0dece4522d666959902221ca" kindref="member">vTaskPlaceOnEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>),<sp/>xTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>()<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>was<sp/>no<sp/>timeout<sp/>and<sp/>the<sp/>semaphore<sp/>count<sp/>was<sp/>not<sp/>0,<sp/>so</highlight></codeline>
<codeline lineno="1583"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attempt<sp/>to<sp/>take<sp/>the<sp/>semaphore<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Timed<sp/>out.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>semaphore<sp/>count<sp/>is<sp/>0<sp/>exit<sp/>now<sp/>as<sp/>the<sp/>timeout<sp/>has</highlight></codeline>
<codeline lineno="1595"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>expired.<sp/><sp/>Otherwise<sp/>return<sp/>to<sp/>attempt<sp/>to<sp/>take<sp/>the<sp/>semaphore<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="1596"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>known<sp/>to<sp/>be<sp/>available.<sp/><sp/>As<sp/>semaphores<sp/>are<sp/>implemented<sp/>by<sp/>queues<sp/>the</highlight></codeline>
<codeline lineno="1597"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>queue<sp/>being<sp/>empty<sp/>is<sp/>equivalent<sp/>to<sp/>the<sp/>semaphore<sp/>count<sp/>being<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" kindref="member">prvIsQueueEmpty</ref>(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>xInheritanceOccurred<sp/>could<sp/>only<sp/>have<sp/>be<sp/>set<sp/>if</highlight></codeline>
<codeline lineno="1603"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;uxQueueType<sp/>==<sp/>queueQUEUE_IS_MUTEX<sp/>so<sp/>no<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="1604"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>the<sp/>mutex<sp/>type<sp/>again<sp/>to<sp/>check<sp/>it<sp/>is<sp/>actually<sp/>a<sp/>mutex.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xInheritanceOccurred<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxHighestWaitingPriority;</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>task<sp/>blocking<sp/>on<sp/>the<sp/>mutex<sp/>caused<sp/>another</highlight></codeline>
<codeline lineno="1612"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>to<sp/>inherit<sp/>this<sp/>task&apos;s<sp/>priority.<sp/><sp/>Now<sp/>this<sp/>task</highlight></codeline>
<codeline lineno="1613"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>has<sp/>timed<sp/>out<sp/>the<sp/>priority<sp/>should<sp/>be<sp/>disinherited</highlight></codeline>
<codeline lineno="1614"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>again,<sp/>but<sp/>only<sp/>as<sp/>low<sp/>as<sp/>the<sp/>next<sp/>highest<sp/>priority</highlight></codeline>
<codeline lineno="1615"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>that<sp/>is<sp/>waiting<sp/>for<sp/>the<sp/>same<sp/>mutex.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxHighestWaitingPriority<sp/>=<sp/>prvGetDisinheritPriorityAfterTimeout(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aa11e6a58d2534fe91ed8ee3a02c9b5e0" kindref="member">vTaskPriorityDisinheritAfterTimeout</ref>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" kindref="member">xMutexHolder</ref>,<sp/>uxHighestWaitingPriority<sp/>);</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"></highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a0dbf5969c9d984920177a19d5b402e4e" kindref="member">traceQUEUE_RECEIVE_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a4d79b09954b1efa73ad8d87a36b4a575" kindref="member">errQUEUE_EMPTY</ref>;</highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>-restore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"></highlight></codeline>
<codeline lineno="1636" refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a8f68e37e931bbf95440c8845f512e090" kindref="member">xQueuePeek</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvBuffer,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="1637"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xEntryTimeSet<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">TimeOut_t</ref><sp/>xTimeOut;</highlight></codeline>
<codeline lineno="1640"><highlight class="normal">int8_t<sp/>*pcOriginalReadPosition;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>pointer<sp/>is<sp/>not<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>pxQueue<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>buffer<sp/>into<sp/>which<sp/>data<sp/>is<sp/>received<sp/>can<sp/>only<sp/>be<sp/>NULL<sp/>if<sp/>the<sp/>data<sp/>size</highlight></codeline>
<codeline lineno="1647"><highlight class="comment"><sp/><sp/>is<sp/>zero<sp/>(so<sp/>no<sp/>data<sp/>is<sp/>copied<sp/>into<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/>(<sp/>pvBuffer<sp/>)<sp/>==<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>(<sp/>pxQueue<sp/>)-&gt;uxItemSize<sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1649"><highlight class="normal"></highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cannot<sp/>block<sp/>if<sp/>the<sp/>scheduler<sp/>is<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>(<sp/>INCLUDE_xTaskGetSchedulerState<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/><ref refid="task_8h_1a0241000e08a261372186d34825a35979" kindref="member">xTaskGetSchedulerState</ref>()<sp/>==<sp/><ref refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" kindref="member">taskSCHEDULER_SUSPENDED</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>xTicksToWait<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1655"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"></highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>-save<sp/>-e904<sp/><sp/>This<sp/>function<sp/>relaxes<sp/>the<sp/>coding<sp/>standard<sp/>somewhat<sp/>to</highlight></codeline>
<codeline lineno="1659"><highlight class="comment"><sp/><sp/>allow<sp/>return<sp/>statements<sp/>within<sp/>the<sp/>function<sp/>itself.<sp/><sp/>This<sp/>is<sp/>done<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1660"><highlight class="comment"><sp/><sp/>interest<sp/>of<sp/>execution<sp/>time<sp/>efficiency.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;;<sp/>)</highlight></codeline>
<codeline lineno="1662"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxMessagesWaiting<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref>;</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"></highlight></codeline>
<codeline lineno="1667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>there<sp/>data<sp/>in<sp/>the<sp/>queue<sp/>now?<sp/><sp/>To<sp/>be<sp/>running<sp/>the<sp/>calling<sp/>task</highlight></codeline>
<codeline lineno="1668"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>be<sp/>the<sp/>highest<sp/>priority<sp/>task<sp/>wanting<sp/>to<sp/>access<sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxMessagesWaiting<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remember<sp/>the<sp/>read<sp/>position<sp/>so<sp/>it<sp/>can<sp/>be<sp/>reset<sp/>after<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="1672"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>read<sp/>from<sp/>the<sp/>queue<sp/>as<sp/>this<sp/>function<sp/>is<sp/>only<sp/>peeking<sp/>the</highlight></codeline>
<codeline lineno="1673"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data,<sp/>not<sp/>removing<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcOriginalReadPosition<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref>;</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"></highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" kindref="member">prvCopyDataFromQueue</ref>(<sp/>pxQueue,<sp/>pvBuffer<sp/>);</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1acd24b909ecdd18ed844cdede3027e534" kindref="member">traceQUEUE_PEEK</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1678"><highlight class="normal"></highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>data<sp/>is<sp/>not<sp/>being<sp/>removed,<sp/>so<sp/>reset<sp/>the<sp/>read<sp/>pointer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>=<sp/>pcOriginalReadPosition;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>data<sp/>is<sp/>being<sp/>left<sp/>in<sp/>the<sp/>queue,<sp/>so<sp/>see<sp/>if<sp/>there<sp/>are</highlight></codeline>
<codeline lineno="1683"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any<sp/>other<sp/>tasks<sp/>waiting<sp/>for<sp/>the<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>waiting<sp/>has<sp/>a<sp/>higher<sp/>priority<sp/>than<sp/>this<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1adb4472163ac5b0e8ad72183d69387b81" kindref="member">queueYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="1703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>was<sp/>empty<sp/>and<sp/>no<sp/>block<sp/>time<sp/>is<sp/>specified<sp/>(or</highlight></codeline>
<codeline lineno="1709"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>block<sp/>time<sp/>has<sp/>expired)<sp/>so<sp/>leave<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1afa4b34739a92eb44f09947a669c98fb7" kindref="member">traceQUEUE_PEEK_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a4d79b09954b1efa73ad8d87a36b4a575" kindref="member">errQUEUE_EMPTY</ref>;</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xEntryTimeSet<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>was<sp/>empty<sp/>and<sp/>a<sp/>block<sp/>time<sp/>was<sp/>specified<sp/>so</highlight></codeline>
<codeline lineno="1717"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configure<sp/>the<sp/>timeout<sp/>structure<sp/>ready<sp/>to<sp/>enter<sp/>the<sp/>blocked</highlight></codeline>
<codeline lineno="1718"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" kindref="member">vTaskInternalSetTimeOutState</ref>(<sp/>&amp;xTimeOut<sp/>);</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xEntryTimeSet<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Entry<sp/>time<sp/>was<sp/>already<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Interrupts<sp/>and<sp/>other<sp/>tasks<sp/>can<sp/>send<sp/>to<sp/>and<sp/>receive<sp/>from<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="1732"><highlight class="comment"><sp/><sp/><sp/><sp/>now<sp/>the<sp/>critical<sp/>section<sp/>has<sp/>been<sp/>exited.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"></highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="queue_8c_1ae4efd14c0f4dee7f189ef2e4d9ce1f1b" kindref="member">prvLockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>timeout<sp/>state<sp/>to<sp/>see<sp/>if<sp/>it<sp/>has<sp/>expired<sp/>yet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" kindref="member">xTaskCheckForTimeOut</ref>(<sp/>&amp;xTimeOut,<sp/>&amp;xTicksToWait<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Timeout<sp/>has<sp/>not<sp/>expired<sp/>yet,<sp/>check<sp/>to<sp/>see<sp/>if<sp/>there<sp/>is<sp/>data<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1741"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>queue<sp/>now,<sp/>and<sp/>if<sp/>not<sp/>enter<sp/>the<sp/>Blocked<sp/>state<sp/>to<sp/>wait<sp/>for<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" kindref="member">prvIsQueueEmpty</ref>(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a186c66f73c470500e556ec0f2fd3994f" kindref="member">traceBLOCKING_ON_QUEUE_PEEK</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a56ae23bc0dece4522d666959902221ca" kindref="member">vTaskPlaceOnEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>),<sp/>xTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>()<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>data<sp/>in<sp/>the<sp/>queue<sp/>now,<sp/>so<sp/>don&apos;t<sp/>enter<sp/>the<sp/>blocked</highlight></codeline>
<codeline lineno="1759"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state,<sp/>instead<sp/>return<sp/>to<sp/>try<sp/>and<sp/>obtain<sp/>the<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>timeout<sp/>has<sp/>expired.<sp/><sp/>If<sp/>there<sp/>is<sp/>still<sp/>no<sp/>data<sp/>in<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="1767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>exit,<sp/>otherwise<sp/>go<sp/>back<sp/>and<sp/>try<sp/>to<sp/>read<sp/>the<sp/>data<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"></highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" kindref="member">prvIsQueueEmpty</ref>(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1afa4b34739a92eb44f09947a669c98fb7" kindref="member">traceQUEUE_PEEK_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a4d79b09954b1efa73ad8d87a36b4a575" kindref="member">errQUEUE_EMPTY</ref>;</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>-restore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1783"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"></highlight></codeline>
<codeline lineno="1785" refid="queue_8h_1acdf528f5c91131ae2f31c669cfd65758" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1ac61ec62828e70ed35d18559a35550462" kindref="member">xQueueReceiveFromISR</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvBuffer,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxHigherPriorityTaskWoken<sp/>)</highlight></codeline>
<codeline lineno="1786"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"></highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/>pvBuffer<sp/>==<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"></highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>RTOS<sp/>ports<sp/>that<sp/>support<sp/>interrupt<sp/>nesting<sp/>have<sp/>the<sp/>concept<sp/>of<sp/>a<sp/>maximum</highlight></codeline>
<codeline lineno="1795"><highlight class="comment"><sp/><sp/>system<sp/>call<sp/>(or<sp/>maximum<sp/>API<sp/>call)<sp/>interrupt<sp/>priority.<sp/><sp/>Interrupts<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="1796"><highlight class="comment"><sp/><sp/>above<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>priority<sp/>are<sp/>kept<sp/>permanently<sp/>enabled,<sp/>even</highlight></codeline>
<codeline lineno="1797"><highlight class="comment"><sp/><sp/>when<sp/>the<sp/>RTOS<sp/>kernel<sp/>is<sp/>in<sp/>a<sp/>critical<sp/>section,<sp/>but<sp/>cannot<sp/>make<sp/>any<sp/>calls<sp/>to</highlight></codeline>
<codeline lineno="1798"><highlight class="comment"><sp/><sp/>FreeRTOS<sp/>API<sp/>functions.<sp/><sp/>If<sp/>configASSERT()<sp/>is<sp/>defined<sp/>in<sp/>FreeRTOSConfig.h</highlight></codeline>
<codeline lineno="1799"><highlight class="comment"><sp/><sp/>then<sp/>portASSERT_IF_INTERRUPT_PRIORITY_INVALID()<sp/>will<sp/>result<sp/>in<sp/>an<sp/>assertion</highlight></codeline>
<codeline lineno="1800"><highlight class="comment"><sp/><sp/>failure<sp/>if<sp/>a<sp/>FreeRTOS<sp/>API<sp/>function<sp/>is<sp/>called<sp/>from<sp/>an<sp/>interrupt<sp/>that<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="1801"><highlight class="comment"><sp/><sp/>assigned<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>configured<sp/>maximum<sp/>system<sp/>call<sp/>priority.</highlight></codeline>
<codeline lineno="1802"><highlight class="comment"><sp/><sp/>Only<sp/>FreeRTOS<sp/>functions<sp/>that<sp/>end<sp/>in<sp/>FromISR<sp/>can<sp/>be<sp/>called<sp/>from<sp/>interrupts</highlight></codeline>
<codeline lineno="1803"><highlight class="comment"><sp/><sp/>that<sp/>have<sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>at<sp/>or<sp/>(logically)<sp/>below<sp/>the<sp/>maximum</highlight></codeline>
<codeline lineno="1804"><highlight class="comment"><sp/><sp/>system<sp/>call<sp/>interrupt<sp/>priority.<sp/><sp/>FreeRTOS<sp/>maintains<sp/>a<sp/>separate<sp/>interrupt</highlight></codeline>
<codeline lineno="1805"><highlight class="comment"><sp/><sp/>safe<sp/>API<sp/>to<sp/>ensure<sp/>interrupt<sp/>entry<sp/>is<sp/>as<sp/>fast<sp/>and<sp/>as<sp/>simple<sp/>as<sp/>possible.</highlight></codeline>
<codeline lineno="1806"><highlight class="comment"><sp/><sp/>More<sp/>information<sp/>(albeit<sp/>Cortex-M<sp/>specific)<sp/>is<sp/>provided<sp/>on<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="1807"><highlight class="comment"><sp/><sp/>link:<sp/>http://www.freertos.org/RTOS-Cortex-M3-M4.html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" kindref="member">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</ref>();</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="1811"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxMessagesWaiting<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref>;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cannot<sp/>block<sp/>in<sp/>an<sp/>ISR,<sp/>so<sp/>check<sp/>there<sp/>is<sp/>data<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxMessagesWaiting<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int8_t<sp/>cRxLock<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ac750a3f75a6e174adbc697e473a0dd13" kindref="member">cRxLock</ref>;</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ace59eac86a08f533c19edf91594961c6" kindref="member">traceQUEUE_RECEIVE_FROM_ISR</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1820"><highlight class="normal"></highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" kindref="member">prvCopyDataFromQueue</ref>(<sp/>pxQueue,<sp/>pvBuffer<sp/>);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>=<sp/>uxMessagesWaiting<sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="1823"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>queue<sp/>is<sp/>locked<sp/>the<sp/>event<sp/>list<sp/>will<sp/>not<sp/>be<sp/>modified.</highlight></codeline>
<codeline lineno="1825"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Instead<sp/>update<sp/>the<sp/>lock<sp/>count<sp/>so<sp/>the<sp/>task<sp/>that<sp/>unlocks<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="1826"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>know<sp/>that<sp/>an<sp/>ISR<sp/>has<sp/>removed<sp/>data<sp/>while<sp/>the<sp/>queue<sp/>was</highlight></codeline>
<codeline lineno="1827"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>locked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cRxLock<sp/>==<sp/><ref refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" kindref="member">queueUNLOCKED</ref><sp/>)</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>waiting<sp/>has<sp/>a<sp/>higher<sp/>priority<sp/>than<sp/>us<sp/>so</highlight></codeline>
<codeline lineno="1835"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>force<sp/>a<sp/>context<sp/>switch.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxHigherPriorityTaskWoken<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pxHigherPriorityTaskWoken<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>the<sp/>lock<sp/>count<sp/>so<sp/>the<sp/>task<sp/>that<sp/>unlocks<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="1858"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>knows<sp/>that<sp/>data<sp/>was<sp/>removed<sp/>while<sp/>it<sp/>was<sp/>locked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ac750a3f75a6e174adbc697e473a0dd13" kindref="member">cRxLock</ref><sp/>=<sp/>(<sp/>int8_t<sp/>)<sp/>(<sp/>cRxLock<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"></highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a1f1f4a1fea93a33050fa6c27c30752d5" kindref="member">traceQUEUE_RECEIVE_FROM_ISR_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1869"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"></highlight></codeline>
<codeline lineno="1872"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="1873"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1874"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1875"><highlight class="normal"></highlight></codeline>
<codeline lineno="1876" refid="queue_8h_1ac402adf98be1fb8ca0345f30dc11a9dc" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1af67763957452955ac663c374d71278ce" kindref="member">xQueuePeekFromISR</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvBuffer<sp/>)</highlight></codeline>
<codeline lineno="1877"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1878"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="1880"><highlight class="normal">int8_t<sp/>*pcOriginalReadPosition;</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="1882"><highlight class="normal"></highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/>pvBuffer<sp/>==<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>!=<sp/>0<sp/>);<sp/></highlight><highlight class="comment">/*<sp/>Can&apos;t<sp/>peek<sp/>a<sp/>semaphore.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1886"><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>RTOS<sp/>ports<sp/>that<sp/>support<sp/>interrupt<sp/>nesting<sp/>have<sp/>the<sp/>concept<sp/>of<sp/>a<sp/>maximum</highlight></codeline>
<codeline lineno="1888"><highlight class="comment"><sp/><sp/>system<sp/>call<sp/>(or<sp/>maximum<sp/>API<sp/>call)<sp/>interrupt<sp/>priority.<sp/><sp/>Interrupts<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="1889"><highlight class="comment"><sp/><sp/>above<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>priority<sp/>are<sp/>kept<sp/>permanently<sp/>enabled,<sp/>even</highlight></codeline>
<codeline lineno="1890"><highlight class="comment"><sp/><sp/>when<sp/>the<sp/>RTOS<sp/>kernel<sp/>is<sp/>in<sp/>a<sp/>critical<sp/>section,<sp/>but<sp/>cannot<sp/>make<sp/>any<sp/>calls<sp/>to</highlight></codeline>
<codeline lineno="1891"><highlight class="comment"><sp/><sp/>FreeRTOS<sp/>API<sp/>functions.<sp/><sp/>If<sp/>configASSERT()<sp/>is<sp/>defined<sp/>in<sp/>FreeRTOSConfig.h</highlight></codeline>
<codeline lineno="1892"><highlight class="comment"><sp/><sp/>then<sp/>portASSERT_IF_INTERRUPT_PRIORITY_INVALID()<sp/>will<sp/>result<sp/>in<sp/>an<sp/>assertion</highlight></codeline>
<codeline lineno="1893"><highlight class="comment"><sp/><sp/>failure<sp/>if<sp/>a<sp/>FreeRTOS<sp/>API<sp/>function<sp/>is<sp/>called<sp/>from<sp/>an<sp/>interrupt<sp/>that<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="1894"><highlight class="comment"><sp/><sp/>assigned<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>configured<sp/>maximum<sp/>system<sp/>call<sp/>priority.</highlight></codeline>
<codeline lineno="1895"><highlight class="comment"><sp/><sp/>Only<sp/>FreeRTOS<sp/>functions<sp/>that<sp/>end<sp/>in<sp/>FromISR<sp/>can<sp/>be<sp/>called<sp/>from<sp/>interrupts</highlight></codeline>
<codeline lineno="1896"><highlight class="comment"><sp/><sp/>that<sp/>have<sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>at<sp/>or<sp/>(logically)<sp/>below<sp/>the<sp/>maximum</highlight></codeline>
<codeline lineno="1897"><highlight class="comment"><sp/><sp/>system<sp/>call<sp/>interrupt<sp/>priority.<sp/><sp/>FreeRTOS<sp/>maintains<sp/>a<sp/>separate<sp/>interrupt</highlight></codeline>
<codeline lineno="1898"><highlight class="comment"><sp/><sp/>safe<sp/>API<sp/>to<sp/>ensure<sp/>interrupt<sp/>entry<sp/>is<sp/>as<sp/>fast<sp/>and<sp/>as<sp/>simple<sp/>as<sp/>possible.</highlight></codeline>
<codeline lineno="1899"><highlight class="comment"><sp/><sp/>More<sp/>information<sp/>(albeit<sp/>Cortex-M<sp/>specific)<sp/>is<sp/>provided<sp/>on<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="1900"><highlight class="comment"><sp/><sp/>link:<sp/>http://www.freertos.org/RTOS-Cortex-M3-M4.html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" kindref="member">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</ref>();</highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="1904"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cannot<sp/>block<sp/>in<sp/>an<sp/>ISR,<sp/>so<sp/>check<sp/>there<sp/>is<sp/>data<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a3e2a14b61c26f9690deb26d76cc801ee" kindref="member">traceQUEUE_PEEK_FROM_ISR</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"></highlight></codeline>
<codeline lineno="1910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remember<sp/>the<sp/>read<sp/>position<sp/>so<sp/>it<sp/>can<sp/>be<sp/>reset<sp/>as<sp/>nothing<sp/>is</highlight></codeline>
<codeline lineno="1911"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>actually<sp/>being<sp/>removed<sp/>from<sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pcOriginalReadPosition<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref>;</highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" kindref="member">prvCopyDataFromQueue</ref>(<sp/>pxQueue,<sp/>pvBuffer<sp/>);</highlight></codeline>
<codeline lineno="1914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>=<sp/>pcOriginalReadPosition;</highlight></codeline>
<codeline lineno="1915"><highlight class="normal"></highlight></codeline>
<codeline lineno="1916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="1917"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1919"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="1921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a72ea0f09cc6a38363f2b5217aab27fd3" kindref="member">traceQUEUE_PEEK_FROM_ISR_FAILED</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1922"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1924"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="1925"><highlight class="normal"></highlight></codeline>
<codeline lineno="1926"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="1927"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1928"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"></highlight></codeline>
<codeline lineno="1930" refid="queue_8h_1add7ee0701ba35904d190811b9e5a4eda" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="queue_8c_1a4158a6134c9d1c60ffdb18d279d475b1" kindref="member">uxQueueMessagesWaiting</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue<sp/>)</highlight></codeline>
<codeline lineno="1931"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxReturn;</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"></highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xQueue<sp/>);</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"></highlight></codeline>
<codeline lineno="1936"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xQueue<sp/>)-&gt;uxMessagesWaiting;</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1941"><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="1943"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>Pointer<sp/>cannot<sp/>be<sp/>declared<sp/>const<sp/>as<sp/>xQueue<sp/>is<sp/>a<sp/>typedef<sp/>not<sp/>pointer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1944"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1945"><highlight class="normal"></highlight></codeline>
<codeline lineno="1946" refid="queue_8h_1aae75791e91707c1e0bb31d761921531c" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="queue_8c_1a27d6fb77ce7a0b5a16f6471730d33201" kindref="member">uxQueueSpacesAvailable</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue<sp/>)</highlight></codeline>
<codeline lineno="1947"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxReturn;</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"></highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>-<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref>;</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1957"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1958"><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="1960"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>Pointer<sp/>cannot<sp/>be<sp/>declared<sp/>const<sp/>as<sp/>xQueue<sp/>is<sp/>a<sp/>typedef<sp/>not<sp/>pointer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1961"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1962"><highlight class="normal"></highlight></codeline>
<codeline lineno="1963" refid="queue_8h_1a3e89b6189166f9544f283435e2732f9a" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="queue_8c_1ad5d110bc27c691ff8da238e0116bf92a" kindref="member">uxQueueMessagesWaitingFromISR</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue<sp/>)</highlight></codeline>
<codeline lineno="1964"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxReturn;</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"></highlight></codeline>
<codeline lineno="1968"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/>uxReturn<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref>;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"></highlight></codeline>
<codeline lineno="1971"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="1972"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>Pointer<sp/>cannot<sp/>be<sp/>declared<sp/>const<sp/>as<sp/>xQueue<sp/>is<sp/>a<sp/>typedef<sp/>not<sp/>pointer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975" refid="queue_8h_1a707cbcfe3aed6b877b6aa6d9d75a3f22" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="queue_8c_1a35c0b4f9a0e940cb3a86ca4c5e84c41c" kindref="member">vQueueDelete</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue<sp/>)</highlight></codeline>
<codeline lineno="1976"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1980"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1aae8ebd9c82ecd564953a37bb26a5a1e5" kindref="member">traceQUEUE_DELETE</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1981"><highlight class="normal"></highlight></codeline>
<codeline lineno="1982"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configQUEUE_REGISTRY_SIZE<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af007b655ee91c919bad9cd2798195899" kindref="member">vQueueUnregisterQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1986"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1987"><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>0<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>can<sp/>only<sp/>have<sp/>been<sp/>allocated<sp/>dynamically<sp/>-<sp/>free<sp/>it</highlight></codeline>
<codeline lineno="1991"><highlight class="comment"><sp/><sp/><sp/><sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1994"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#elif(<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>could<sp/>have<sp/>been<sp/>allocated<sp/>statically<sp/>or<sp/>dynamically,<sp/>so</highlight></codeline>
<codeline lineno="1997"><highlight class="comment"><sp/><sp/><sp/><sp/>check<sp/>before<sp/>attempting<sp/>to<sp/>free<sp/>the<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;ucStaticallyAllocated<sp/>==<sp/>(<sp/>uint8_t<sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2007"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>must<sp/>have<sp/>been<sp/>statically<sp/>allocated,<sp/>so<sp/>is<sp/>not<sp/>going<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="2010"><highlight class="comment"><sp/><sp/><sp/><sp/>deleted.<sp/><sp/>Avoid<sp/>compiler<sp/>warnings<sp/>about<sp/>the<sp/>unused<sp/>parameter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>pxQueue;</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2015"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="queue_8h_1a7f7a4d9b75dcfbcefb2384da5df5290e" kindref="member">uxQueueGetQueueNumber</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue<sp/>)</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xQueue<sp/>)-&gt;uxQueueNumber;</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"></highlight></codeline>
<codeline lineno="2024"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2026"><highlight class="normal"></highlight></codeline>
<codeline lineno="2027"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2028"><highlight class="normal"></highlight></codeline>
<codeline lineno="2029"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="queue_8h_1a37c8b0ea8f2e6c5fa5082afb9721f986" kindref="member">vQueueSetQueueNumber</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxQueueNumber<sp/>)</highlight></codeline>
<codeline lineno="2030"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xQueue<sp/>)-&gt;uxQueueNumber<sp/>=<sp/>uxQueueNumber;</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"></highlight></codeline>
<codeline lineno="2034"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2035"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2038"><highlight class="normal"></highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="queue_8h_1a9730db0a2f63acbf7197fa4150d7fe08" kindref="member">ucQueueGetQueueType</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue<sp/>)</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xQueue<sp/>)-&gt;ucQueueType;</highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2043"><highlight class="normal"></highlight></codeline>
<codeline lineno="2044"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2045"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2046"><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>prvGetDisinheritPriorityAfterTimeout(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>)</highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxHighestPriorityOfWaitingTasks;</highlight></codeline>
<codeline lineno="2052"><highlight class="normal"></highlight></codeline>
<codeline lineno="2053"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>a<sp/>task<sp/>waiting<sp/>for<sp/>a<sp/>mutex<sp/>causes<sp/>the<sp/>mutex<sp/>holder<sp/>to<sp/>inherit<sp/>a</highlight></codeline>
<codeline lineno="2054"><highlight class="comment"><sp/><sp/><sp/><sp/>priority,<sp/>but<sp/>the<sp/>waiting<sp/>task<sp/>times<sp/>out,<sp/>then<sp/>the<sp/>holder<sp/>should</highlight></codeline>
<codeline lineno="2055"><highlight class="comment"><sp/><sp/><sp/><sp/>disinherit<sp/>the<sp/>priority<sp/>-<sp/>but<sp/>only<sp/>down<sp/>to<sp/>the<sp/>highest<sp/>priority<sp/>of<sp/>any</highlight></codeline>
<codeline lineno="2056"><highlight class="comment"><sp/><sp/><sp/><sp/>other<sp/>tasks<sp/>that<sp/>are<sp/>waiting<sp/>for<sp/>the<sp/>same<sp/>mutex.<sp/><sp/>For<sp/>this<sp/>purpose,</highlight></codeline>
<codeline lineno="2057"><highlight class="comment"><sp/><sp/><sp/><sp/>return<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>highest<sp/>priority<sp/>task<sp/>that<sp/>is<sp/>waiting<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="2058"><highlight class="comment"><sp/><sp/><sp/><sp/>mutex.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" kindref="member">listCURRENT_LIST_LENGTH</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>&gt;<sp/>0U<sp/>)</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxHighestPriorityOfWaitingTasks<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="list_8h_1a63742b27958b959ac9ab69d8e9aed241" kindref="member">listGET_ITEM_VALUE_OF_HEAD_ENTRY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2064"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxHighestPriorityOfWaitingTasks<sp/>=<sp/><ref refid="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" kindref="member">tskIDLE_PRIORITY</ref>;</highlight></codeline>
<codeline lineno="2066"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2067"><highlight class="normal"></highlight></codeline>
<codeline lineno="2068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxHighestPriorityOfWaitingTasks;</highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"></highlight></codeline>
<codeline lineno="2074" refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" kindref="member">prvCopyDataToQueue</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvItemToQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xPosition<sp/>)</highlight></codeline>
<codeline lineno="2075"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxMessagesWaiting;</highlight></codeline>
<codeline lineno="2078"><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>is<sp/>called<sp/>from<sp/>a<sp/>critical<sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2080"><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/>uxMessagesWaiting<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref>;</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;uxQueueType<sp/>==<sp/><ref refid="queue_8c_1a0799077a434aea43f5cca3cda3625aa8" kindref="member">queueQUEUE_IS_MUTEX</ref><sp/>)</highlight></codeline>
<codeline lineno="2088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>mutex<sp/>is<sp/>no<sp/>longer<sp/>being<sp/>held.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="task_8h_1a02fe2e1419fd6c35f75a1357c5e5ce22" kindref="member">xTaskPriorityDisinherit</ref>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" kindref="member">xMutexHolder</ref><sp/>);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1adb2c0818274974553c619ff953b6f477" kindref="member">xSemaphore</ref>.<ref refid="struct_semaphore_data_1ab1ed54c7b39dc45b3c310fae7ad08693" kindref="member">xMutexHolder</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2094"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2098"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xPosition<sp/>==<sp/><ref refid="queue_8h_1a4d78fa863fbeb90425a2dda08fae8b12" kindref="member">queueSEND_TO_BACK</ref><sp/>)</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2102"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>memcpy(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1abdf13cc013c8488848cee3fce4f0fed3" kindref="member">pcWriteTo</ref>,<sp/>pvItemToQueue,<sp/>(<sp/>size_t<sp/>)<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>!e418<sp/>!e9087<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports,<sp/>plus<sp/>previous<sp/>logic<sp/>ensures<sp/>a<sp/>null<sp/>pointer<sp/>can<sp/>only<sp/>be<sp/>passed<sp/>to<sp/>memcpy()<sp/>if<sp/>the<sp/>copy<sp/>size<sp/>is<sp/>0.<sp/><sp/>Cast<sp/>to<sp/>void<sp/>required<sp/>by<sp/>function<sp/>signature<sp/>and<sp/>safe<sp/>as<sp/>no<sp/>alignment<sp/>requirement<sp/>and<sp/>copy<sp/>length<sp/>specified<sp/>in<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2103"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1abdf13cc013c8488848cee3fce4f0fed3" kindref="member">pcWriteTo</ref><sp/>+=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e9016<sp/>Pointer<sp/>arithmetic<sp/>on<sp/>char<sp/>types<sp/>ok,<sp/>especially<sp/>in<sp/>this<sp/>use<sp/>case<sp/>where<sp/>it<sp/>is<sp/>the<sp/>clearest<sp/>way<sp/>of<sp/>conveying<sp/>intent.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1abdf13cc013c8488848cee3fce4f0fed3" kindref="member">pcWriteTo</ref><sp/>&gt;=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1acbbdc8eb47b348a824c7bced41512a38" kindref="member">pcTail</ref><sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e946<sp/>MISRA<sp/>exception<sp/>justified<sp/>as<sp/>comparison<sp/>of<sp/>pointers<sp/>is<sp/>the<sp/>cleanest<sp/>solution.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1abdf13cc013c8488848cee3fce4f0fed3" kindref="member">pcWriteTo</ref><sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" kindref="member">pcHead</ref>;</highlight></codeline>
<codeline lineno="2107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2114"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2115"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>memcpy(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref>,<sp/>pvItemToQueue,<sp/>(<sp/>size_t<sp/>)<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>!e9087<sp/>!e418<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/><sp/>Cast<sp/>to<sp/>void<sp/>required<sp/>by<sp/>function<sp/>signature<sp/>and<sp/>safe<sp/>as<sp/>no<sp/>alignment<sp/>requirement<sp/>and<sp/>copy<sp/>length<sp/>specified<sp/>in<sp/>bytes.<sp/><sp/>Assert<sp/>checks<sp/>null<sp/>pointer<sp/>only<sp/>used<sp/>when<sp/>length<sp/>is<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>-=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref>;</highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>&lt;<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" kindref="member">pcHead</ref><sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e946<sp/>MISRA<sp/>exception<sp/>justified<sp/>as<sp/>comparison<sp/>of<sp/>pointers<sp/>is<sp/>the<sp/>cleanest<sp/>solution.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>=<sp/>(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1acbbdc8eb47b348a824c7bced41512a38" kindref="member">pcTail</ref><sp/>-<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>);</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2125"><highlight class="normal"></highlight></codeline>
<codeline lineno="2126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xPosition<sp/>==<sp/><ref refid="queue_8h_1a5bb1c4a46d4b08b6d35cf586983476ef" kindref="member">queueOVERWRITE</ref><sp/>)</highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxMessagesWaiting<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>An<sp/>item<sp/>is<sp/>not<sp/>being<sp/>added<sp/>but<sp/>overwritten,<sp/>so<sp/>subtract</highlight></codeline>
<codeline lineno="2131"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one<sp/>from<sp/>the<sp/>recorded<sp/>number<sp/>of<sp/>items<sp/>in<sp/>the<sp/>queue<sp/>so<sp/>when</highlight></codeline>
<codeline lineno="2132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one<sp/>is<sp/>added<sp/>again<sp/>below<sp/>the<sp/>number<sp/>of<sp/>recorded<sp/>items<sp/>remains</highlight></codeline>
<codeline lineno="2133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>correct.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--uxMessagesWaiting;</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2140"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"></highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>=<sp/>uxMessagesWaiting<sp/>+<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"></highlight></codeline>
<codeline lineno="2149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153" refid="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="queue_8c_1ad9a2e17b2b13d4878f7af1361437320e" kindref="member">prvCopyDataFromQueue</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvBuffer<sp/>)</highlight></codeline>
<codeline lineno="2154"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2156"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2157"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>+=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e9016<sp/>Pointer<sp/>arithmetic<sp/>on<sp/>char<sp/>types<sp/>ok,<sp/>especially<sp/>in<sp/>this<sp/>use<sp/>case<sp/>where<sp/>it<sp/>is<sp/>the<sp/>clearest<sp/>way<sp/>of<sp/>conveying<sp/>intent.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>&gt;=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1acbbdc8eb47b348a824c7bced41512a38" kindref="member">pcTail</ref><sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e946<sp/>MISRA<sp/>exception<sp/>justified<sp/>as<sp/>use<sp/>of<sp/>the<sp/>relational<sp/>operator<sp/>is<sp/>the<sp/>cleanest<sp/>solutions.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" kindref="member">pcHead</ref>;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2163"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>memcpy(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pvBuffer,<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref>,<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>!e418<sp/>!e9087<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/><sp/>Also<sp/>previous<sp/>logic<sp/>ensures<sp/>a<sp/>null<sp/>pointer<sp/>can<sp/>only<sp/>be<sp/>passed<sp/>to<sp/>memcpy()<sp/>when<sp/>the<sp/>count<sp/>is<sp/>0.<sp/><sp/>Cast<sp/>to<sp/>void<sp/>required<sp/>by<sp/>function<sp/>signature<sp/>and<sp/>safe<sp/>as<sp/>no<sp/>alignment<sp/>requirement<sp/>and<sp/>copy<sp/>length<sp/>specified<sp/>in<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2168"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2170"><highlight class="normal"></highlight></codeline>
<codeline lineno="2171" refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>)</highlight></codeline>
<codeline lineno="2172"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2173"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>BE<sp/>CALLED<sp/>WITH<sp/>THE<sp/>SCHEDULER<sp/>SUSPENDED.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"></highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>lock<sp/>counts<sp/>contains<sp/>the<sp/>number<sp/>of<sp/>extra<sp/>data<sp/>items<sp/>placed<sp/>or</highlight></codeline>
<codeline lineno="2176"><highlight class="comment"><sp/><sp/>removed<sp/>from<sp/>the<sp/>queue<sp/>while<sp/>the<sp/>queue<sp/>was<sp/>locked.<sp/><sp/>When<sp/>a<sp/>queue<sp/>is</highlight></codeline>
<codeline lineno="2177"><highlight class="comment"><sp/><sp/>locked<sp/>items<sp/>can<sp/>be<sp/>added<sp/>or<sp/>removed,<sp/>but<sp/>the<sp/>event<sp/>lists<sp/>cannot<sp/>be</highlight></codeline>
<codeline lineno="2178"><highlight class="comment"><sp/><sp/>updated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2179"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>cTxLock<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" kindref="member">cTxLock</ref>;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"></highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>if<sp/>data<sp/>was<sp/>added<sp/>to<sp/>the<sp/>queue<sp/>while<sp/>it<sp/>was<sp/>locked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>cTxLock<sp/>&gt;<sp/><ref refid="queue_8c_1a60a95aa91f84782416755f38616231fd" kindref="member">queueLOCKED_UNMODIFIED</ref><sp/>)</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Data<sp/>was<sp/>posted<sp/>while<sp/>the<sp/>queue<sp/>was<sp/>locked.<sp/><sp/>Are<sp/>any<sp/>tasks</highlight></codeline>
<codeline lineno="2187"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>blocked<sp/>waiting<sp/>for<sp/>data<sp/>to<sp/>become<sp/>available?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;pxQueueSetContainer<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>prvNotifyQueueSetContainer(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>is<sp/>a<sp/>member<sp/>of<sp/>a<sp/>queue<sp/>set,<sp/>and<sp/>posting<sp/>to</highlight></codeline>
<codeline lineno="2195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>queue<sp/>set<sp/>caused<sp/>a<sp/>higher<sp/>priority<sp/>task<sp/>to<sp/>unblock.</highlight></codeline>
<codeline lineno="2196"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>context<sp/>switch<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a998c69e37431a3a32c637b31ff60089a" kindref="member">vTaskMissedYield</ref>();</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tasks<sp/>that<sp/>are<sp/>removed<sp/>from<sp/>the<sp/>event<sp/>list<sp/>will<sp/>get</highlight></codeline>
<codeline lineno="2207"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>added<sp/>to<sp/>the<sp/>pending<sp/>ready<sp/>list<sp/>as<sp/>the<sp/>scheduler<sp/>is<sp/>still</highlight></codeline>
<codeline lineno="2208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>waiting<sp/>has<sp/>a<sp/>higher<sp/>priority<sp/>so<sp/>record<sp/>that<sp/>a</highlight></codeline>
<codeline lineno="2214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>switch<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a998c69e37431a3a32c637b31ff60089a" kindref="member">vTaskMissedYield</ref>();</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tasks<sp/>that<sp/>are<sp/>removed<sp/>from<sp/>the<sp/>event<sp/>list<sp/>will<sp/>get<sp/>added<sp/>to</highlight></codeline>
<codeline lineno="2231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>pending<sp/>ready<sp/>list<sp/>as<sp/>the<sp/>scheduler<sp/>is<sp/>still<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>waiting<sp/>has<sp/>a<sp/>higher<sp/>priority<sp/>so<sp/>record<sp/>that</highlight></codeline>
<codeline lineno="2237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>context<sp/>switch<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a998c69e37431a3a32c637b31ff60089a" kindref="member">vTaskMissedYield</ref>();</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2250"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2251"><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--cTxLock;</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" kindref="member">cTxLock</ref><sp/>=<sp/><ref refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" kindref="member">queueUNLOCKED</ref>;</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2258"><highlight class="normal"></highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>the<sp/>same<sp/>for<sp/>the<sp/>Rx<sp/>lock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/>int8_t<sp/>cRxLock<sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ac750a3f75a6e174adbc697e473a0dd13" kindref="member">cRxLock</ref>;</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>cRxLock<sp/>&gt;<sp/><ref refid="queue_8c_1a60a95aa91f84782416755f38616231fd" kindref="member">queueLOCKED_UNMODIFIED</ref><sp/>)</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a998c69e37431a3a32c637b31ff60089a" kindref="member">vTaskMissedYield</ref>();</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"></highlight></codeline>
<codeline lineno="2277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--cRxLock;</highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ac750a3f75a6e174adbc697e473a0dd13" kindref="member">cRxLock</ref><sp/>=<sp/><ref refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" kindref="member">queueUNLOCKED</ref>;</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2288"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2290"><highlight class="normal"></highlight></codeline>
<codeline lineno="2291" refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a8f21d4b7a21be0d109953120c93f6741" kindref="member">prvIsQueueEmpty</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*pxQueue<sp/>)</highlight></codeline>
<codeline lineno="2292"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2294"><highlight class="normal"></highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2311"><highlight class="normal"></highlight></codeline>
<codeline lineno="2312" refid="queue_8h_1aa11139c58f4eecaa0c50078f2976d010" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a7d076f57a56ef50315418f8bbfba96fd" kindref="member">xQueueIsQueueEmptyFromISR</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue<sp/>)</highlight></codeline>
<codeline lineno="2313"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal"></highlight></codeline>
<codeline lineno="2317"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="2318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2320"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2323"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2326"><highlight class="normal"></highlight></codeline>
<codeline lineno="2327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2328"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>xQueue<sp/>could<sp/>not<sp/>be<sp/>pointer<sp/>to<sp/>const<sp/>because<sp/>it<sp/>is<sp/>a<sp/>typedef.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2329"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2330"><highlight class="normal"></highlight></codeline>
<codeline lineno="2331" refid="queue_8c_1a70546f6b48a8b715eae3dd84e0546045" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a70546f6b48a8b715eae3dd84e0546045" kindref="member">prvIsQueueFull</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*pxQueue<sp/>)</highlight></codeline>
<codeline lineno="2332"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2333"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2334"><highlight class="normal"></highlight></codeline>
<codeline lineno="2335"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2336"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>==<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>)</highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2347"><highlight class="normal"></highlight></codeline>
<codeline lineno="2348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2350"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2351"><highlight class="normal"></highlight></codeline>
<codeline lineno="2352" refid="queue_8h_1a81319b3aa562733957c5a12a088516d3" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8c_1a76bbe8ebd21b3e89784e865d06f1058c" kindref="member">xQueueIsQueueFullFromISR</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue<sp/>)</highlight></codeline>
<codeline lineno="2353"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal"><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight></codeline>
<codeline lineno="2357"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="2358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>==<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>)</highlight></codeline>
<codeline lineno="2359"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2363"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"></highlight></codeline>
<codeline lineno="2367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2368"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>xQueue<sp/>could<sp/>not<sp/>be<sp/>pointer<sp/>to<sp/>const<sp/>because<sp/>it<sp/>is<sp/>a<sp/>typedef.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_CO_ROUTINES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"></highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8h_1abb5d7bd9b62f2b642104fde73c1c666b" kindref="member">xQueueCRSend</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvItemToQueue,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"></highlight></codeline>
<codeline lineno="2378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>queue<sp/>is<sp/>already<sp/>full<sp/>we<sp/>may<sp/>have<sp/>to<sp/>block.<sp/><sp/>A<sp/>critical<sp/>section</highlight></codeline>
<codeline lineno="2379"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>required<sp/>to<sp/>prevent<sp/>an<sp/>interrupt<sp/>removing<sp/>something<sp/>from<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="2380"><highlight class="comment"><sp/><sp/><sp/><sp/>between<sp/>the<sp/>check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>queue<sp/>is<sp/>full<sp/>and<sp/>blocking<sp/>on<sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a6e3d10ee1a0734a647ca192523c2cfc1" kindref="member">portDISABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="queue_8c_1a70546f6b48a8b715eae3dd84e0546045" kindref="member">prvIsQueueFull</ref>(<sp/>pxQueue<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>is<sp/>full<sp/>-<sp/>do<sp/>we<sp/>want<sp/>to<sp/>block<sp/>or<sp/>just<sp/>leave<sp/>without</highlight></codeline>
<codeline lineno="2386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>posting?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>this<sp/>is<sp/>called<sp/>from<sp/>a<sp/>coroutine<sp/>we<sp/>cannot<sp/>block<sp/>directly,<sp/>but</highlight></codeline>
<codeline lineno="2390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>indicating<sp/>that<sp/>we<sp/>need<sp/>to<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="croutine_8h_1a6b5b1c5857d38b79c96636754208e32d" kindref="member">vCoRoutineAddToDelayedList</ref>(<sp/>xTicksToWait,<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1abc47e85a6befbb47961ad5ee7aa57173" kindref="member">portENABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a4a7ca54ee5527cd7a14830956e05ea55" kindref="member">errQUEUE_BLOCKED</ref>;</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1abc47e85a6befbb47961ad5ee7aa57173" kindref="member">portENABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1ae40de11e4044a83a97d2cb5d00ce608b" kindref="member">errQUEUE_FULL</ref>;</highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1abc47e85a6befbb47961ad5ee7aa57173" kindref="member">portENABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"></highlight></codeline>
<codeline lineno="2404"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a6e3d10ee1a0734a647ca192523c2cfc1" kindref="member">portDISABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>&lt;<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>)</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>room<sp/>in<sp/>the<sp/>queue,<sp/>copy<sp/>the<sp/>data<sp/>into<sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" kindref="member">prvCopyDataToQueue</ref>(<sp/>pxQueue,<sp/>pvItemToQueue,<sp/><ref refid="queue_8h_1a4d78fa863fbeb90425a2dda08fae8b12" kindref="member">queueSEND_TO_BACK</ref><sp/>);</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"></highlight></codeline>
<codeline lineno="2412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Were<sp/>any<sp/>co-routines<sp/>waiting<sp/>for<sp/>data<sp/>to<sp/>become<sp/>available?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>this<sp/>instance<sp/>the<sp/>co-routine<sp/>could<sp/>be<sp/>placed<sp/>directly</highlight></codeline>
<codeline lineno="2416"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>into<sp/>the<sp/>ready<sp/>list<sp/>as<sp/>we<sp/>are<sp/>within<sp/>a<sp/>critical<sp/>section.</highlight></codeline>
<codeline lineno="2417"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instead<sp/>the<sp/>same<sp/>pending<sp/>ready<sp/>list<sp/>mechanism<sp/>is<sp/>used<sp/>as<sp/>if</highlight></codeline>
<codeline lineno="2418"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>event<sp/>were<sp/>caused<sp/>from<sp/>within<sp/>an<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="croutine_8h_1af2a96db518b18f5a7e1cd2fdf3c82873" kindref="member">xCoRoutineRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>co-routine<sp/>waiting<sp/>has<sp/>a<sp/>higher<sp/>priority<sp/>so<sp/>record</highlight></codeline>
<codeline lineno="2422"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>a<sp/>yield<sp/>might<sp/>be<sp/>appropriate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a3b2e2afaa2851576dfc2779a7fea59b4" kindref="member">errQUEUE_YIELD</ref>;</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1ae40de11e4044a83a97d2cb5d00ce608b" kindref="member">errQUEUE_FULL</ref>;</highlight></codeline>
<codeline lineno="2438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2439"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1abc47e85a6befbb47961ad5ee7aa57173" kindref="member">portENABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2441"><highlight class="normal"></highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_CO_ROUTINES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_CO_ROUTINES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2449"><highlight class="normal"></highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8h_1a88a02b37c486c38b8c4112e16dfed099" kindref="member">xQueueCRReceive</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvBuffer,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"></highlight></codeline>
<codeline lineno="2455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>queue<sp/>is<sp/>already<sp/>empty<sp/>we<sp/>may<sp/>have<sp/>to<sp/>block.<sp/><sp/>A<sp/>critical<sp/>section</highlight></codeline>
<codeline lineno="2456"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>required<sp/>to<sp/>prevent<sp/>an<sp/>interrupt<sp/>adding<sp/>something<sp/>to<sp/>the<sp/>queue</highlight></codeline>
<codeline lineno="2457"><highlight class="comment"><sp/><sp/><sp/><sp/>between<sp/>the<sp/>check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>queue<sp/>is<sp/>empty<sp/>and<sp/>blocking<sp/>on<sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a6e3d10ee1a0734a647ca192523c2cfc1" kindref="member">portDISABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>are<sp/>no<sp/>messages<sp/>in<sp/>the<sp/>queue,<sp/>do<sp/>we<sp/>want<sp/>to<sp/>block<sp/>or<sp/>just</highlight></codeline>
<codeline lineno="2463"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>leave<sp/>with<sp/>nothing?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>As<sp/>this<sp/>is<sp/>a<sp/>co-routine<sp/>we<sp/>cannot<sp/>block<sp/>directly,<sp/>but<sp/>return</highlight></codeline>
<codeline lineno="2467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indicating<sp/>that<sp/>we<sp/>need<sp/>to<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="croutine_8h_1a6b5b1c5857d38b79c96636754208e32d" kindref="member">vCoRoutineAddToDelayedList</ref>(<sp/>xTicksToWait,<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1abc47e85a6befbb47961ad5ee7aa57173" kindref="member">portENABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1a4a7ca54ee5527cd7a14830956e05ea55" kindref="member">errQUEUE_BLOCKED</ref>;</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1abc47e85a6befbb47961ad5ee7aa57173" kindref="member">portENABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1ae40de11e4044a83a97d2cb5d00ce608b" kindref="member">errQUEUE_FULL</ref>;</highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1abc47e85a6befbb47961ad5ee7aa57173" kindref="member">portENABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a6e3d10ee1a0734a647ca192523c2cfc1" kindref="member">portDISABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Data<sp/>is<sp/>available<sp/>from<sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>+=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref>;</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>&gt;=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1acbbdc8eb47b348a824c7bced41512a38" kindref="member">pcTail</ref><sp/>)</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" kindref="member">pcHead</ref>;</highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>);</highlight></codeline>
<codeline lineno="2500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>memcpy(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pvBuffer,<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref>,<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>)<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>);</highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Were<sp/>any<sp/>co-routines<sp/>waiting<sp/>for<sp/>space<sp/>to<sp/>become<sp/>available?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>this<sp/>instance<sp/>the<sp/>co-routine<sp/>could<sp/>be<sp/>placed<sp/>directly</highlight></codeline>
<codeline lineno="2508"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>into<sp/>the<sp/>ready<sp/>list<sp/>as<sp/>we<sp/>are<sp/>within<sp/>a<sp/>critical<sp/>section.</highlight></codeline>
<codeline lineno="2509"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Instead<sp/>the<sp/>same<sp/>pending<sp/>ready<sp/>list<sp/>mechanism<sp/>is<sp/>used<sp/>as<sp/>if</highlight></codeline>
<codeline lineno="2510"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>event<sp/>were<sp/>caused<sp/>from<sp/>within<sp/>an<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="croutine_8h_1af2a96db518b18f5a7e1cd2fdf3c82873" kindref="member">xCoRoutineRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a3b2e2afaa2851576dfc2779a7fea59b4" kindref="member">errQUEUE_YIELD</ref>;</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="2528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1abc47e85a6befbb47961ad5ee7aa57173" kindref="member">portENABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2531"><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_CO_ROUTINES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"></highlight></codeline>
<codeline lineno="2538"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_CO_ROUTINES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2539"><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8h_1a80af2aff3f472600a12dea0642fa8b27" kindref="member">xQueueCRSendFromISR</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvItemToQueue,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xCoRoutinePreviouslyWoken<sp/>)</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cannot<sp/>block<sp/>within<sp/>an<sp/>ISR<sp/>so<sp/>if<sp/>there<sp/>is<sp/>no<sp/>space<sp/>on<sp/>the<sp/>queue<sp/>then</highlight></codeline>
<codeline lineno="2545"><highlight class="comment"><sp/><sp/><sp/><sp/>exit<sp/>without<sp/>doing<sp/>anything.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>&lt;<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>)</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" kindref="member">prvCopyDataToQueue</ref>(<sp/>pxQueue,<sp/>pvItemToQueue,<sp/><ref refid="queue_8h_1a4d78fa863fbeb90425a2dda08fae8b12" kindref="member">queueSEND_TO_BACK</ref><sp/>);</highlight></codeline>
<codeline lineno="2549"><highlight class="normal"></highlight></codeline>
<codeline lineno="2550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>only<sp/>want<sp/>to<sp/>wake<sp/>one<sp/>co-routine<sp/>per<sp/>ISR,<sp/>so<sp/>check<sp/>that<sp/>a</highlight></codeline>
<codeline lineno="2551"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>co-routine<sp/>has<sp/>not<sp/>already<sp/>been<sp/>woken.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xCoRoutinePreviouslyWoken<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="croutine_8h_1af2a96db518b18f5a7e1cd2fdf3c82873" kindref="member">xCoRoutineRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2574"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2579"><highlight class="normal"></highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xCoRoutinePreviouslyWoken;</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2582"><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_CO_ROUTINES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2584"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2585"><highlight class="normal"></highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_CO_ROUTINES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8h_1ad66b08c1d6a17efa8985605bf182b997" kindref="member">xQueueCRReceiveFromISR</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvBuffer,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*pxCoRoutineWoken<sp/>)</highlight></codeline>
<codeline lineno="2589"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2590"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2591"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="2592"><highlight class="normal"></highlight></codeline>
<codeline lineno="2593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>We<sp/>cannot<sp/>block<sp/>from<sp/>an<sp/>ISR,<sp/>so<sp/>check<sp/>there<sp/>is<sp/>data<sp/>available.<sp/>If</highlight></codeline>
<codeline lineno="2594"><highlight class="comment"><sp/><sp/><sp/><sp/>not<sp/>then<sp/>just<sp/>leave<sp/>without<sp/>doing<sp/>anything.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Copy<sp/>the<sp/>data<sp/>from<sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>+=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref>;</highlight></codeline>
<codeline lineno="2599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>&gt;=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1acbbdc8eb47b348a824c7bced41512a38" kindref="member">pcTail</ref><sp/>)</highlight></codeline>
<codeline lineno="2600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref><sp/>=<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a487dc7e43b380c58212cba72bc33e0ed" kindref="member">pcHead</ref>;</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2606"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>);</highlight></codeline>
<codeline lineno="2608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>memcpy(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pvBuffer,<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a93a8f29e573aaa9cbbff7d6f2957ee81" kindref="member">u</ref>.<ref refid="struct_queue_definition_1aea4a2daf33054ff6b535f158bd4007f0" kindref="member">xQueue</ref>.<ref refid="struct_queue_pointers_1af381d02bbe6bc4a77934c6fd97598913" kindref="member">pcReadFrom</ref>,<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>)<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a81bb7d3826909244baa9debf5a55abb0" kindref="member">uxItemSize</ref><sp/>);</highlight></codeline>
<codeline lineno="2609"><highlight class="normal"></highlight></codeline>
<codeline lineno="2610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>*pxCoRoutineWoken<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="croutine_8h_1af2a96db518b18f5a7e1cd2fdf3c82873" kindref="member">xCoRoutineRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1aaab135c4345cb0393d6ff3cd5164c7b2" kindref="member">xTasksWaitingToSend</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pxCoRoutineWoken<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"></highlight></codeline>
<codeline lineno="2633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2639"><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"></highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_CO_ROUTINES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2645"><highlight class="normal"></highlight></codeline>
<codeline lineno="2646"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configQUEUE_REGISTRY_SIZE<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"></highlight></codeline>
<codeline lineno="2648"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_free_r_t_o_s_8h_1a3e103eedd5088f5f30bc55e55820a9e3" kindref="member">vQueueAddToRegistry</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcQueueName<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2650"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>ux;</highlight></codeline>
<codeline lineno="2651"><highlight class="normal"></highlight></codeline>
<codeline lineno="2652"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>if<sp/>there<sp/>is<sp/>an<sp/>empty<sp/>space<sp/>in<sp/>the<sp/>registry.<sp/><sp/>A<sp/>NULL<sp/>name<sp/>denotes</highlight></codeline>
<codeline lineno="2653"><highlight class="comment"><sp/><sp/><sp/><sp/>a<sp/>free<sp/>slot.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ux<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U;<sp/>ux<sp/>&lt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1aa4b5138c4e42a180f0abd4f2455f90fb" kindref="member">configQUEUE_REGISTRY_SIZE</ref>;<sp/>ux++<sp/>)</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xQueueRegistry[<sp/>ux<sp/>].pcQueueName<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>information<sp/>on<sp/>this<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xQueueRegistry[<sp/>ux<sp/>].pcQueueName<sp/>=<sp/>pcQueueName;</highlight></codeline>
<codeline lineno="2660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xQueueRegistry[<sp/>ux<sp/>].xHandle<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="2661"><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2f326b01ad82a3ab14cc9fc4b3abd6b8" kindref="member">traceQUEUE_REGISTRY_ADD</ref>(<sp/>xQueue,<sp/>pcQueueName<sp/>);</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2671"><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configQUEUE_REGISTRY_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"></highlight></codeline>
<codeline lineno="2675"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configQUEUE_REGISTRY_SIZE<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="_free_r_t_o_s_8h_1ae9c520a136753cfb579e5caac11077a6" kindref="member">pcQueueGetName</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2679"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>ux;</highlight></codeline>
<codeline lineno="2680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcReturn<sp/>=<sp/>NULL;<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"></highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Note<sp/>there<sp/>is<sp/>nothing<sp/>here<sp/>to<sp/>protect<sp/>against<sp/>another<sp/>task<sp/>adding<sp/>or</highlight></codeline>
<codeline lineno="2683"><highlight class="comment"><sp/><sp/><sp/><sp/>removing<sp/>entries<sp/>from<sp/>the<sp/>registry<sp/>while<sp/>it<sp/>is<sp/>being<sp/>searched.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2684"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ux<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U;<sp/>ux<sp/>&lt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1aa4b5138c4e42a180f0abd4f2455f90fb" kindref="member">configQUEUE_REGISTRY_SIZE</ref>;<sp/>ux++<sp/>)</highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xQueueRegistry[<sp/>ux<sp/>].xHandle<sp/>==<sp/>xQueue<sp/>)</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcReturn<sp/>=<sp/>xQueueRegistry[<sp/>ux<sp/>].pcQueueName;</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"></highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pcReturn;</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>xQueue<sp/>cannot<sp/>be<sp/>a<sp/>pointer<sp/>to<sp/>const<sp/>because<sp/>it<sp/>is<sp/>a<sp/>typedef.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2699"><highlight class="normal"></highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configQUEUE_REGISTRY_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2702"><highlight class="normal"></highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configQUEUE_REGISTRY_SIZE<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_free_r_t_o_s_8h_1af007b655ee91c919bad9cd2798195899" kindref="member">vQueueUnregisterQueue</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue<sp/>)</highlight></codeline>
<codeline lineno="2706"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>ux;</highlight></codeline>
<codeline lineno="2708"><highlight class="normal"></highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>if<sp/>the<sp/>handle<sp/>of<sp/>the<sp/>queue<sp/>being<sp/>unregistered<sp/>in<sp/>actually<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="2710"><highlight class="comment"><sp/><sp/><sp/><sp/>registry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>ux<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U;<sp/>ux<sp/>&lt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1aa4b5138c4e42a180f0abd4f2455f90fb" kindref="member">configQUEUE_REGISTRY_SIZE</ref>;<sp/>ux++<sp/>)</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xQueueRegistry[<sp/>ux<sp/>].xHandle<sp/>==<sp/>xQueue<sp/>)</highlight></codeline>
<codeline lineno="2714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>name<sp/>to<sp/>NULL<sp/>to<sp/>show<sp/>that<sp/>this<sp/>slot<sp/>if<sp/>free<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xQueueRegistry[<sp/>ux<sp/>].pcQueueName<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"></highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>handle<sp/>to<sp/>NULL<sp/>to<sp/>ensure<sp/>the<sp/>same<sp/>queue<sp/>handle<sp/>cannot</highlight></codeline>
<codeline lineno="2719"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appear<sp/>in<sp/>the<sp/>registry<sp/>twice<sp/>if<sp/>it<sp/>is<sp/>added,<sp/>removed,<sp/>then</highlight></codeline>
<codeline lineno="2720"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>added<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xQueueRegistry[<sp/>ux<sp/>].xHandle<sp/>=<sp/>(<sp/><ref refid="queue_8h_1a57349603001f8ddf51c888c49e2804d7" kindref="member">QueueHandle_t</ref><sp/>)<sp/>0;</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"></highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>xQueue<sp/>could<sp/>not<sp/>be<sp/>pointer<sp/>to<sp/>const<sp/>because<sp/>it<sp/>is<sp/>a<sp/>typedef.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2731"><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configQUEUE_REGISTRY_SIZE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2733"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2734"><highlight class="normal"></highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"></highlight></codeline>
<codeline lineno="2737"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="queue_8h_1abaa0f8224837d82e60cf799127185546" kindref="member">vQueueWaitForMessageRestricted</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>xQueue,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xWaitIndefinitely<sp/>)</highlight></codeline>
<codeline lineno="2738"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2739"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>=<sp/>xQueue;</highlight></codeline>
<codeline lineno="2740"><highlight class="normal"></highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>should<sp/>not<sp/>be<sp/>called<sp/>by<sp/>application<sp/>code<sp/>hence<sp/>the</highlight></codeline>
<codeline lineno="2742"><highlight class="comment"><sp/><sp/><sp/><sp/>&apos;Restricted&apos;<sp/>in<sp/>its<sp/>name.<sp/><sp/>It<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>public<sp/>API.<sp/><sp/>It<sp/>is</highlight></codeline>
<codeline lineno="2743"><highlight class="comment"><sp/><sp/><sp/><sp/>designed<sp/>for<sp/>use<sp/>by<sp/>kernel<sp/>code,<sp/>and<sp/>has<sp/>special<sp/>calling<sp/>requirements.</highlight></codeline>
<codeline lineno="2744"><highlight class="comment"><sp/><sp/><sp/><sp/>It<sp/>can<sp/>result<sp/>in<sp/>vListInsert()<sp/>being<sp/>called<sp/>on<sp/>a<sp/>list<sp/>that<sp/>can<sp/>only</highlight></codeline>
<codeline lineno="2745"><highlight class="comment"><sp/><sp/><sp/><sp/>possibly<sp/>ever<sp/>have<sp/>one<sp/>item<sp/>in<sp/>it,<sp/>so<sp/>the<sp/>list<sp/>will<sp/>be<sp/>fast,<sp/>but<sp/>even</highlight></codeline>
<codeline lineno="2746"><highlight class="comment"><sp/><sp/><sp/><sp/>so<sp/>it<sp/>should<sp/>be<sp/>called<sp/>with<sp/>the<sp/>scheduler<sp/>locked<sp/>and<sp/>not<sp/>from<sp/>a<sp/>critical</highlight></codeline>
<codeline lineno="2747"><highlight class="comment"><sp/><sp/><sp/><sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2748"><highlight class="normal"></highlight></codeline>
<codeline lineno="2749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>do<sp/>anything<sp/>if<sp/>there<sp/>are<sp/>no<sp/>messages<sp/>in<sp/>the<sp/>queue.<sp/><sp/>This<sp/>function</highlight></codeline>
<codeline lineno="2750"><highlight class="comment"><sp/><sp/><sp/><sp/>will<sp/>not<sp/>actually<sp/>cause<sp/>the<sp/>task<sp/>to<sp/>block,<sp/>just<sp/>place<sp/>it<sp/>on<sp/>a<sp/>blocked</highlight></codeline>
<codeline lineno="2751"><highlight class="comment"><sp/><sp/><sp/><sp/>list.<sp/><sp/>It<sp/>will<sp/>not<sp/>block<sp/>until<sp/>the<sp/>scheduler<sp/>is<sp/>unlocked<sp/>-<sp/>at<sp/>which</highlight></codeline>
<codeline lineno="2752"><highlight class="comment"><sp/><sp/><sp/><sp/>time<sp/>a<sp/>yield<sp/>will<sp/>be<sp/>performed.<sp/><sp/>If<sp/>an<sp/>item<sp/>is<sp/>added<sp/>to<sp/>the<sp/>queue<sp/>while</highlight></codeline>
<codeline lineno="2753"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>queue<sp/>is<sp/>locked,<sp/>and<sp/>the<sp/>calling<sp/>task<sp/>blocks<sp/>on<sp/>the<sp/>queue,<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="2754"><highlight class="comment"><sp/><sp/><sp/><sp/>calling<sp/>task<sp/>will<sp/>be<sp/>immediately<sp/>unblocked<sp/>when<sp/>the<sp/>queue<sp/>is<sp/>unlocked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="queue_8c_1ae4efd14c0f4dee7f189ef2e4d9ce1f1b" kindref="member">prvLockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U<sp/>)</highlight></codeline>
<codeline lineno="2757"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>nothing<sp/>in<sp/>the<sp/>queue,<sp/>block<sp/>for<sp/>the<sp/>specified<sp/>period.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ada3eb00e16241f5b648184a406a6a6fd" kindref="member">vTaskPlaceOnEventListRestricted</ref>(<sp/>&amp;(<sp/>pxQueue-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>),<sp/>xTicksToWait,<sp/>xWaitIndefinitely<sp/>);</highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2762"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" kindref="member">prvUnlockQueue</ref>(<sp/>pxQueue<sp/>);</highlight></codeline>
<codeline lineno="2766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2767"><highlight class="normal"></highlight></codeline>
<codeline lineno="2768"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TIMERS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2769"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"></highlight></codeline>
<codeline lineno="2771"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"></highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetHandle_t</ref><sp/><ref refid="queue_8h_1ad4208ad97f737af942a13e64b45e83e8" kindref="member">xQueueCreateSet</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxEventQueueLength<sp/>)</highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetHandle_t</ref><sp/>pxQueue;</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"></highlight></codeline>
<codeline lineno="2777"><highlight class="normal"><sp/><sp/><sp/><sp/>pxQueue<sp/>=<sp/>xQueueGenericCreate(<sp/>uxEventQueueLength,<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>),<sp/><ref refid="queue_8h_1a9b8e1b1d5d9952bd0121ae71cf3aba8d" kindref="member">queueQUEUE_TYPE_SET</ref><sp/>);</highlight></codeline>
<codeline lineno="2778"><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pxQueue;</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2781"><highlight class="normal"></highlight></codeline>
<codeline lineno="2782"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2784"><highlight class="normal"></highlight></codeline>
<codeline lineno="2785"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2786"><highlight class="normal"></highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8h_1ae07b563e6bbe42a977f7c46853aa11eb" kindref="member">xQueueAddToSet</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetMemberHandle_t</ref><sp/>xQueueOrSemaphore,<sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetHandle_t</ref><sp/>xQueueSet<sp/>)</highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"></highlight></codeline>
<codeline lineno="2791"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xQueueOrSemaphore<sp/>)-&gt;pxQueueSetContainer<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cannot<sp/>add<sp/>a<sp/>queue/semaphore<sp/>to<sp/>more<sp/>than<sp/>one<sp/>queue<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="2797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xQueueOrSemaphore<sp/>)-&gt;uxMessagesWaiting<sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Cannot<sp/>add<sp/>a<sp/>queue/semaphore<sp/>to<sp/>a<sp/>queue<sp/>set<sp/>if<sp/>there<sp/>are<sp/>already</highlight></codeline>
<codeline lineno="2801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>items<sp/>in<sp/>the<sp/>queue/semaphore.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="2803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xQueueOrSemaphore<sp/>)-&gt;pxQueueSetContainer<sp/>=<sp/>xQueueSet;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"></highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2814"><highlight class="normal"></highlight></codeline>
<codeline lineno="2815"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2816"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2819"><highlight class="normal"></highlight></codeline>
<codeline lineno="2820"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="queue_8h_1ab16fdd17b9b6d74a82c8366f47cda162" kindref="member">xQueueRemoveFromSet</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetMemberHandle_t</ref><sp/>xQueueOrSemaphore,<sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetHandle_t</ref><sp/>xQueueSet<sp/>)</highlight></codeline>
<codeline lineno="2821"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueueOrSemaphore<sp/>=<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/>)<sp/>xQueueOrSemaphore;</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"></highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueueOrSemaphore-&gt;pxQueueSetContainer<sp/>!=<sp/>xQueueSet<sp/>)</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>was<sp/>not<sp/>a<sp/>member<sp/>of<sp/>the<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueueOrSemaphore-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>dangerous<sp/>to<sp/>remove<sp/>a<sp/>queue<sp/>from<sp/>a<sp/>set<sp/>when<sp/>the<sp/>queue<sp/>is</highlight></codeline>
<codeline lineno="2833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>empty<sp/>because<sp/>the<sp/>queue<sp/>set<sp/>will<sp/>still<sp/>hold<sp/>pending<sp/>events<sp/>for</highlight></codeline>
<codeline lineno="2834"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>queue.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>queue<sp/>is<sp/>no<sp/>longer<sp/>contained<sp/>in<sp/>the<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueueOrSemaphore-&gt;pxQueueSetContainer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2849"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>xQueueSet<sp/>could<sp/>not<sp/>be<sp/>declared<sp/>as<sp/>pointing<sp/>to<sp/>const<sp/>as<sp/>it<sp/>is<sp/>a<sp/>typedef.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"></highlight></codeline>
<codeline lineno="2851"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2852"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2853"><highlight class="normal"></highlight></codeline>
<codeline lineno="2854"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2855"><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetMemberHandle_t</ref><sp/><ref refid="queue_8h_1a71f56e6277ed4e419c707c8d0c785065" kindref="member">xQueueSelectFromSet</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetHandle_t</ref><sp/>xQueueSet,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetMemberHandle_t</ref><sp/>xReturn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"></highlight></codeline>
<codeline lineno="2860"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="queue_8c_1ad0a166f3b1219a5e37e31f8090d4800d" kindref="member">xQueueReceive</ref>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>)<sp/>xQueueSet,<sp/>&amp;xReturn,<sp/>xTicksToWait<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>Casting<sp/>from<sp/>one<sp/>typedef<sp/>to<sp/>another<sp/>is<sp/>not<sp/>redundant.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2863"><highlight class="normal"></highlight></codeline>
<codeline lineno="2864"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"></highlight></codeline>
<codeline lineno="2867"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetMemberHandle_t</ref><sp/><ref refid="queue_8h_1ac58b34fd733cf460cddab1abb9a899b3" kindref="member">xQueueSelectFromSetFromISR</ref>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetHandle_t</ref><sp/>xQueueSet<sp/>)</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">QueueSetMemberHandle_t</ref><sp/>xReturn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="queue_8c_1ac61ec62828e70ed35d18559a35550462" kindref="member">xQueueReceiveFromISR</ref>(<sp/>(<sp/><ref refid="struct_queue_definition" kindref="compound">QueueHandle_t</ref><sp/>)<sp/>xQueueSet,<sp/>&amp;xReturn,<sp/>NULL<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>Casting<sp/>from<sp/>one<sp/>typedef<sp/>to<sp/>another<sp/>is<sp/>not<sp/>redundant.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2874"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2876"><highlight class="normal"></highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_QUEUE_SETS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"></highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>prvNotifyQueueSetContainer(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxQueue<sp/>)</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"><sp/><sp/><ref refid="struct_queue_definition" kindref="compound">Queue_t</ref><sp/>*pxQueueSetContainer<sp/>=<sp/>pxQueue-&gt;pxQueueSetContainer;</highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2886"><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>must<sp/>be<sp/>called<sp/>form<sp/>a<sp/>critical<sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2888"><highlight class="normal"></highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueueSetContainer<sp/>);</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxQueueSetContainer-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>&lt;<sp/>pxQueueSetContainer-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>);</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxQueueSetContainer-&gt;<ref refid="struct_queue_definition_1a12b07a40152d0f21488ca06d362d13d1" kindref="member">uxMessagesWaiting</ref><sp/>&lt;<sp/>pxQueueSetContainer-&gt;<ref refid="struct_queue_definition_1ae80d17a812c669d4d41265b7f693988c" kindref="member">uxLength</ref><sp/>)</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int8_t<sp/>cTxLock<sp/>=<sp/>pxQueueSetContainer-&gt;<ref refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" kindref="member">cTxLock</ref>;</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a5cfc9dd899c89966172cb329740f551a" kindref="member">traceQUEUE_SEND</ref>(<sp/>pxQueueSetContainer<sp/>);</highlight></codeline>
<codeline lineno="2897"><highlight class="normal"></highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>data<sp/>copied<sp/>is<sp/>the<sp/>handle<sp/>of<sp/>the<sp/>queue<sp/>that<sp/>contains<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="queue_8c_1a77098159b7735e0c27e27aa7072376c6" kindref="member">prvCopyDataToQueue</ref>(<sp/>pxQueueSetContainer,<sp/>&amp;pxQueue,<sp/><ref refid="queue_8h_1a4d78fa863fbeb90425a2dda08fae8b12" kindref="member">queueSEND_TO_BACK</ref><sp/>);</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"></highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cTxLock<sp/>==<sp/><ref refid="queue_8c_1acdb781ba6b38714cf41f7417de8fe6bf" kindref="member">queueUNLOCKED</ref><sp/>)</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;(<sp/>pxQueueSetContainer-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" kindref="member">xTaskRemoveFromEventList</ref>(<sp/>&amp;(<sp/>pxQueueSetContainer-&gt;<ref refid="struct_queue_definition_1af6d61526f77beee659cd604a0c473359" kindref="member">xTasksWaitingToReceive</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>waiting<sp/>has<sp/>a<sp/>higher<sp/>priority.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxQueueSetContainer-&gt;<ref refid="struct_queue_definition_1a24ac3f0707f098da2a22244d843fcf82" kindref="member">cTxLock</ref><sp/>=<sp/>(<sp/>int8_t<sp/>)<sp/>(<sp/>cTxLock<sp/>+<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2931"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_QUEUE_SETS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"></highlight></codeline>
<codeline lineno="2935"><highlight class="normal"></highlight></codeline>
<codeline lineno="2936"><highlight class="normal"></highlight></codeline>
<codeline lineno="2937"><highlight class="normal"></highlight></codeline>
<codeline lineno="2938"><highlight class="normal"></highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"></highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"></highlight></codeline>
<codeline lineno="2944"><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/queue.c"/>
  </compounddef>
</doxygen>
