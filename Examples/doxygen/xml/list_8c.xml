<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="list_8c" kind="file" language="C++">
    <compoundname>list.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="_free_r_t_o_s_8h" local="yes">FreeRTOS.h</includes>
    <includes refid="list_8h" local="yes">list.h</includes>
    <incdepgraph>
      <node id="6">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
      </node>
      <node id="3">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>deprecated_definitions.h</label>
        <link refid="deprecated__definitions_8h"/>
      </node>
      <node id="12">
        <label>list.h</label>
        <link refid="list_8h"/>
      </node>
      <node id="11">
        <label>mpu_wrappers.h</label>
        <link refid="mpu__wrappers_8h"/>
      </node>
      <node id="8">
        <label>portable.h</label>
        <link refid="portable_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>projdefs.h</label>
        <link refid="projdefs_8h"/>
      </node>
      <node id="1">
        <label>NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c</label>
        <link refid="list_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>portmacro.h</label>
        <link refid="portmacro_8h"/>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="list_8c_1aa0831d347bba16bfbe524f4faa790b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vListInitialise</definition>
        <argsstring>(List_t *const pxList)</argsstring>
        <name>vListInitialise</name>
        <param>
          <type><ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref> *const</type>
          <declname>pxList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c" line="37" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c" bodystart="37" bodyend="59"/>
        <references refid="list_8h_1a5d68b1187d09c64d6ee329786cb0289b" compoundref="list_8h" startline="112">listSET_LIST_INTEGRITY_CHECK_1_VALUE</references>
        <references refid="list_8h_1a83b40c6e61534ef41229bd912dacab48" compoundref="list_8h" startline="113">listSET_LIST_INTEGRITY_CHECK_2_VALUE</references>
        <references refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" compoundref="portmacro_8h" startline="64">portMAX_DELAY</references>
        <references refid="structx_l_i_s_t_1aa8dbb12e54fab6a83458349c1c9eba47" compoundref="list_8h" startline="168">xLIST::pxIndex</references>
        <references refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1aa297f3eba16856d00d0d3a6cea5e9df6" compoundref="list_8h" startline="156">xMINI_LIST_ITEM::pxNext</references>
        <references refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1ad19d1e1268e41f04c17c6c0234264116" compoundref="list_8h" startline="157">xMINI_LIST_ITEM::pxPrevious</references>
        <references refid="structx_l_i_s_t_1a2abe49a37d8c396d60ba8a752b89da9f" compoundref="list_8h" startline="167">xLIST::uxNumberOfItems</references>
        <references refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1ae8e582796ebea18d5f36740f61eface0" compoundref="list_8h" startline="155">xMINI_LIST_ITEM::xItemValue</references>
        <references refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" compoundref="list_8h" startline="169">xLIST::xListEnd</references>
        <referencedby refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" compoundref="tasks_8c" startline="3606" endline="3635">prvInitialiseTaskLists</referencedby>
        <referencedby refid="queue_8h_1a3c13a9fe455ec2d35b5f8386a1040599" compoundref="queue_8c" startline="255" endline="305">xQueueGenericReset</referencedby>
      </memberdef>
      <memberdef kind="function" id="list_8c_1a43e37223a86f5d0688ac4470d3106e87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vListInitialiseItem</definition>
        <argsstring>(ListItem_t *const pxItem)</argsstring>
        <name>vListInitialiseItem</name>
        <param>
          <type><ref refid="list_8h_1a1a62d469392f9bfe2443e7efab9c8398" kindref="member">ListItem_t</ref> *const</type>
          <declname>pxItem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c" line="62" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c" bodystart="62" bodyend="71"/>
        <references refid="list_8h_1a0e65118e1baa7ab805cdfb37e580501d" compoundref="list_8h" startline="110">listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE</references>
        <references refid="list_8h_1ac8b9d912bdcfdb5544f373d2a94268b2" compoundref="list_8h" startline="111">listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE</references>
        <references refid="structx_l_i_s_t___i_t_e_m_1a07dc4f55365dc7d44624d04290a80263" compoundref="list_8h" startline="147">xLIST_ITEM::pxContainer</references>
      </memberdef>
      <memberdef kind="function" id="list_8c_1a3240bc0f43fcf755be02bfc6de7dc6ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vListInsertEnd</definition>
        <argsstring>(List_t *const pxList, ListItem_t *const pxNewListItem)</argsstring>
        <name>vListInsertEnd</name>
        <param>
          <type><ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref> *const</type>
          <declname>pxList</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1a1a62d469392f9bfe2443e7efab9c8398" kindref="member">ListItem_t</ref> *const</type>
          <declname>pxNewListItem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c" line="74" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c" bodystart="74" bodyend="100"/>
        <references refid="list_8h_1a337d6137e0a4d37321efc5c2f31dba22" compoundref="list_8h" startline="115">listTEST_LIST_INTEGRITY</references>
        <references refid="list_8h_1a95b994725c299cdc81c74efc16210cc6" compoundref="list_8h" startline="114">listTEST_LIST_ITEM_INTEGRITY</references>
        <references refid="_free_r_t_o_s_8h_1a2ddaee9013b02cfbfe2773ec4257375c" compoundref="_free_r_t_o_s_8h" startline="818">mtCOVERAGE_TEST_DELAY</references>
        <references refid="structx_l_i_s_t___i_t_e_m_1a07dc4f55365dc7d44624d04290a80263" compoundref="list_8h" startline="147">xLIST_ITEM::pxContainer</references>
        <references refid="structx_l_i_s_t_1aa8dbb12e54fab6a83458349c1c9eba47" compoundref="list_8h" startline="168">xLIST::pxIndex</references>
        <references refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" compoundref="list_8h" startline="144">xLIST_ITEM::pxNext</references>
        <references refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" compoundref="list_8h" startline="145">xLIST_ITEM::pxPrevious</references>
        <references refid="structx_l_i_s_t_1a2abe49a37d8c396d60ba8a752b89da9f" compoundref="list_8h" startline="167">xLIST::uxNumberOfItems</references>
        <referencedby refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</referencedby>
        <referencedby refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" compoundref="tasks_8c" startline="3080" endline="3101">vTaskPlaceOnUnorderedEventList</referencedby>
        <referencedby refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</referencedby>
      </memberdef>
      <memberdef kind="function" id="list_8c_1a28faa70d3ec4b4f39e53b0fc52d62ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vListInsert</definition>
        <argsstring>(List_t *const pxList, ListItem_t *const pxNewListItem)</argsstring>
        <name>vListInsert</name>
        <param>
          <type><ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref> *const</type>
          <declname>pxList</declname>
        </param>
        <param>
          <type><ref refid="list_8h_1a1a62d469392f9bfe2443e7efab9c8398" kindref="member">ListItem_t</ref> *const</type>
          <declname>pxNewListItem</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c" line="103" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c" bodystart="103" bodyend="167"/>
        <references refid="list_8h_1a337d6137e0a4d37321efc5c2f31dba22" compoundref="list_8h" startline="115">listTEST_LIST_INTEGRITY</references>
        <references refid="list_8h_1a95b994725c299cdc81c74efc16210cc6" compoundref="list_8h" startline="114">listTEST_LIST_ITEM_INTEGRITY</references>
        <references refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" compoundref="portmacro_8h" startline="64">portMAX_DELAY</references>
        <references refid="structx_l_i_s_t___i_t_e_m_1a07dc4f55365dc7d44624d04290a80263" compoundref="list_8h" startline="147">xLIST_ITEM::pxContainer</references>
        <references refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" compoundref="list_8h" startline="144">xLIST_ITEM::pxNext</references>
        <references refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" compoundref="list_8h" startline="145">xLIST_ITEM::pxPrevious</references>
        <references refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1ad19d1e1268e41f04c17c6c0234264116" compoundref="list_8h" startline="157">xMINI_LIST_ITEM::pxPrevious</references>
        <references refid="structx_l_i_s_t_1a2abe49a37d8c396d60ba8a752b89da9f" compoundref="list_8h" startline="167">xLIST::uxNumberOfItems</references>
        <references refid="structx_l_i_s_t___i_t_e_m_1ad87e1d441faf3341ca60b319abc07c6f" compoundref="list_8h" startline="143">xLIST_ITEM::xItemValue</references>
        <references refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" compoundref="list_8h" startline="169">xLIST::xListEnd</references>
        <referencedby refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</referencedby>
        <referencedby refid="task_8h_1a56ae23bc0dece4522d666959902221ca" compoundref="tasks_8c" startline="3063" endline="3077">vTaskPlaceOnEventList</referencedby>
      </memberdef>
      <memberdef kind="function" id="list_8c_1a274fdced76bbdd9d8a4c4840ded2920c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref></type>
        <definition>UBaseType_t uxListRemove</definition>
        <argsstring>(ListItem_t *const pxItemToRemove)</argsstring>
        <name>uxListRemove</name>
        <param>
          <type><ref refid="list_8h_1a1a62d469392f9bfe2443e7efab9c8398" kindref="member">ListItem_t</ref> *const</type>
          <declname>pxItemToRemove</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c" line="170" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c" bodystart="170" bodyend="196"/>
        <references refid="_free_r_t_o_s_8h_1a2ddaee9013b02cfbfe2773ec4257375c" compoundref="_free_r_t_o_s_8h" startline="818">mtCOVERAGE_TEST_DELAY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="structx_l_i_s_t___i_t_e_m_1a07dc4f55365dc7d44624d04290a80263" compoundref="list_8h" startline="147">xLIST_ITEM::pxContainer</references>
        <references refid="structx_l_i_s_t_1aa8dbb12e54fab6a83458349c1c9eba47" compoundref="list_8h" startline="168">xLIST::pxIndex</references>
        <references refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" compoundref="list_8h" startline="144">xLIST_ITEM::pxNext</references>
        <references refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" compoundref="list_8h" startline="145">xLIST_ITEM::pxPrevious</references>
        <references refid="structx_l_i_s_t_1a2abe49a37d8c396d60ba8a752b89da9f" compoundref="list_8h" startline="167">xLIST::uxNumberOfItems</references>
        <referencedby refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</referencedby>
        <referencedby refid="tasks_8c_1a903096c962a2bc907f4b902a7d42302a" compoundref="tasks_8c" startline="3638" endline="3664">prvCheckTasksWaitingTermination</referencedby>
        <referencedby refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" compoundref="tasks_8c" startline="3205" endline="3250">vTaskRemoveFromUnorderedEventList</referencedby>
        <referencedby refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</referencedby>
        <referencedby refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</referencedby>
        <referencedby refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>FreeRTOS<sp/>Kernel<sp/>V10.3.1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020<sp/>Amazon.com,<sp/>Inc.<sp/>or<sp/>its<sp/>affiliates.<sp/><sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>http://www.FreeRTOS.org</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>http://aws.amazon.com/freertos</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>1<sp/>tab<sp/>==<sp/>4<sp/>spaces!</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_free_r_t_o_s_8h" kindref="compound">FreeRTOS.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="list_8h" kindref="compound">list.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>PUBLIC<sp/>LIST<sp/>API<sp/>documented<sp/>in<sp/>list.h</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="list_8c_1aa0831d347bba16bfbe524f4faa790b9d" kindref="member">vListInitialise</ref>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxList<sp/>)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>list<sp/>structure<sp/>contains<sp/>a<sp/>list<sp/>item<sp/>which<sp/>is<sp/>used<sp/>to<sp/>mark<sp/>the</highlight></codeline>
<codeline lineno="40"><highlight class="comment"><sp/><sp/>end<sp/>of<sp/>the<sp/>list.<sp/><sp/>To<sp/>initialise<sp/>the<sp/>list<sp/>the<sp/>list<sp/>end<sp/>is<sp/>inserted</highlight></codeline>
<codeline lineno="41"><highlight class="comment"><sp/><sp/>as<sp/>the<sp/>only<sp/>list<sp/>entry.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1aa8dbb12e54fab6a83458349c1c9eba47" kindref="member">pxIndex</ref><sp/>=<sp/>(<sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/>)<sp/>&amp;(<sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" kindref="member">xListEnd</ref><sp/>);<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e826<sp/>!e740<sp/>!e9087<sp/>The<sp/>mini<sp/>list<sp/>structure<sp/>is<sp/>used<sp/>as<sp/>the<sp/>list<sp/>end<sp/>to<sp/>save<sp/>RAM.<sp/><sp/>This<sp/>is<sp/>checked<sp/>and<sp/>valid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>list<sp/>end<sp/>value<sp/>is<sp/>the<sp/>highest<sp/>possible<sp/>value<sp/>in<sp/>the<sp/>list<sp/>to</highlight></codeline>
<codeline lineno="45"><highlight class="comment"><sp/><sp/>ensure<sp/>it<sp/>remains<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" kindref="member">xListEnd</ref>.<ref refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1ae8e582796ebea18d5f36740f61eface0" kindref="member">xItemValue</ref><sp/>=<sp/><ref refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" kindref="member">portMAX_DELAY</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>list<sp/>end<sp/>next<sp/>and<sp/>previous<sp/>pointers<sp/>point<sp/>to<sp/>itself<sp/>so<sp/>we<sp/>know</highlight></codeline>
<codeline lineno="49"><highlight class="comment"><sp/><sp/>when<sp/>the<sp/>list<sp/>is<sp/>empty.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" kindref="member">xListEnd</ref>.<ref refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1aa297f3eba16856d00d0d3a6cea5e9df6" kindref="member">pxNext</ref><sp/>=<sp/>(<sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/>)<sp/>&amp;(<sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" kindref="member">xListEnd</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e826<sp/>!e740<sp/>!e9087<sp/>The<sp/>mini<sp/>list<sp/>structure<sp/>is<sp/>used<sp/>as<sp/>the<sp/>list<sp/>end<sp/>to<sp/>save<sp/>RAM.<sp/><sp/>This<sp/>is<sp/>checked<sp/>and<sp/>valid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" kindref="member">xListEnd</ref>.<ref refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1ad19d1e1268e41f04c17c6c0234264116" kindref="member">pxPrevious</ref><sp/>=<sp/>(<sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/>)<sp/>&amp;(<sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" kindref="member">xListEnd</ref><sp/>);</highlight><highlight class="comment">/*lint<sp/>!e826<sp/>!e740<sp/>!e9087<sp/>The<sp/>mini<sp/>list<sp/>structure<sp/>is<sp/>used<sp/>as<sp/>the<sp/>list<sp/>end<sp/>to<sp/>save<sp/>RAM.<sp/><sp/>This<sp/>is<sp/>checked<sp/>and<sp/>valid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a2abe49a37d8c396d60ba8a752b89da9f" kindref="member">uxNumberOfItems</ref><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>known<sp/>values<sp/>into<sp/>the<sp/>list<sp/>if</highlight></codeline>
<codeline lineno="56"><highlight class="comment"><sp/><sp/>configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES<sp/>is<sp/>set<sp/>to<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a5d68b1187d09c64d6ee329786cb0289b" kindref="member">listSET_LIST_INTEGRITY_CHECK_1_VALUE</ref>(<sp/>pxList<sp/>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a83b40c6e61534ef41229bd912dacab48" kindref="member">listSET_LIST_INTEGRITY_CHECK_2_VALUE</ref>(<sp/>pxList<sp/>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal">}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="list_8h_1ab91611baae53be209a05d211f55f5395" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="list_8c_1a43e37223a86f5d0688ac4470d3106e87" kindref="member">vListInitialiseItem</ref>(<sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxItem<sp/>)</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>the<sp/>list<sp/>item<sp/>is<sp/>not<sp/>recorded<sp/>as<sp/>being<sp/>on<sp/>a<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>pxItem-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a07dc4f55365dc7d44624d04290a80263" kindref="member">pxContainer</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>known<sp/>values<sp/>into<sp/>the<sp/>list<sp/>item<sp/>if</highlight></codeline>
<codeline lineno="68"><highlight class="comment"><sp/><sp/>configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES<sp/>is<sp/>set<sp/>to<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a0e65118e1baa7ab805cdfb37e580501d" kindref="member">listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE</ref>(<sp/>pxItem<sp/>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1ac8b9d912bdcfdb5544f373d2a94268b2" kindref="member">listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE</ref>(<sp/>pxItem<sp/>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="list_8c_1a3240bc0f43fcf755be02bfc6de7dc6ef" kindref="member">vListInsertEnd</ref>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxList,<sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxNewListItem<sp/>)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxIndex<sp/>=<sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1aa8dbb12e54fab6a83458349c1c9eba47" kindref="member">pxIndex</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>effective<sp/>when<sp/>configASSERT()<sp/>is<sp/>also<sp/>defined,<sp/>these<sp/>tests<sp/>may<sp/>catch</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/><sp/>the<sp/>list<sp/>data<sp/>structures<sp/>being<sp/>overwritten<sp/>in<sp/>memory.<sp/><sp/>They<sp/>will<sp/>not<sp/>catch</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/><sp/>data<sp/>errors<sp/>caused<sp/>by<sp/>incorrect<sp/>configuration<sp/>or<sp/>use<sp/>of<sp/>FreeRTOS.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a337d6137e0a4d37321efc5c2f31dba22" kindref="member">listTEST_LIST_INTEGRITY</ref>(<sp/>pxList<sp/>);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a95b994725c299cdc81c74efc16210cc6" kindref="member">listTEST_LIST_ITEM_INTEGRITY</ref>(<sp/>pxNewListItem<sp/>);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>a<sp/>new<sp/>list<sp/>item<sp/>into<sp/>pxList,<sp/>but<sp/>rather<sp/>than<sp/>sort<sp/>the<sp/>list,</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/><sp/>makes<sp/>the<sp/>new<sp/>list<sp/>item<sp/>the<sp/>last<sp/>item<sp/>to<sp/>be<sp/>removed<sp/>by<sp/>a<sp/>call<sp/>to</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/><sp/>listGET_OWNER_OF_NEXT_ENTRY().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>pxNewListItem-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" kindref="member">pxNext</ref><sp/>=<sp/>pxIndex;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>pxNewListItem-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" kindref="member">pxPrevious</ref><sp/>=<sp/>pxIndex-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" kindref="member">pxPrevious</ref>;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>used<sp/>during<sp/>decision<sp/>coverage<sp/>testing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2ddaee9013b02cfbfe2773ec4257375c" kindref="member">mtCOVERAGE_TEST_DELAY</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>pxIndex-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" kindref="member">pxPrevious</ref>-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" kindref="member">pxNext</ref><sp/>=<sp/>pxNewListItem;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>pxIndex-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" kindref="member">pxPrevious</ref><sp/>=<sp/>pxNewListItem;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remember<sp/>which<sp/>list<sp/>the<sp/>item<sp/>is<sp/>in.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>pxNewListItem-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a07dc4f55365dc7d44624d04290a80263" kindref="member">pxContainer</ref><sp/>=<sp/>pxList;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>(<sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a2abe49a37d8c396d60ba8a752b89da9f" kindref="member">uxNumberOfItems</ref><sp/>)++;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="list_8h_1aa129290da5cbda47dffb7bf877b2f02a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="list_8c_1a28faa70d3ec4b4f39e53b0fc52d62ecf" kindref="member">vListInsert</ref>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxList,<sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxNewListItem<sp/>)</highlight></codeline>
<codeline lineno="104"><highlight class="normal">{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*pxIterator;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xValueOfInsertion<sp/>=<sp/>pxNewListItem-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1ad87e1d441faf3341ca60b319abc07c6f" kindref="member">xItemValue</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>effective<sp/>when<sp/>configASSERT()<sp/>is<sp/>also<sp/>defined,<sp/>these<sp/>tests<sp/>may<sp/>catch</highlight></codeline>
<codeline lineno="109"><highlight class="comment"><sp/><sp/>the<sp/>list<sp/>data<sp/>structures<sp/>being<sp/>overwritten<sp/>in<sp/>memory.<sp/><sp/>They<sp/>will<sp/>not<sp/>catch</highlight></codeline>
<codeline lineno="110"><highlight class="comment"><sp/><sp/>data<sp/>errors<sp/>caused<sp/>by<sp/>incorrect<sp/>configuration<sp/>or<sp/>use<sp/>of<sp/>FreeRTOS.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a337d6137e0a4d37321efc5c2f31dba22" kindref="member">listTEST_LIST_INTEGRITY</ref>(<sp/>pxList<sp/>);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a95b994725c299cdc81c74efc16210cc6" kindref="member">listTEST_LIST_ITEM_INTEGRITY</ref>(<sp/>pxNewListItem<sp/>);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>the<sp/>new<sp/>list<sp/>item<sp/>into<sp/>the<sp/>list,<sp/>sorted<sp/>in<sp/>xItemValue<sp/>order.</highlight></codeline>
<codeline lineno="115"><highlight class="comment"></highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/><sp/>If<sp/>the<sp/>list<sp/>already<sp/>contains<sp/>a<sp/>list<sp/>item<sp/>with<sp/>the<sp/>same<sp/>item<sp/>value<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/><sp/>new<sp/>list<sp/>item<sp/>should<sp/>be<sp/>placed<sp/>after<sp/>it.<sp/><sp/>This<sp/>ensures<sp/>that<sp/>TCBs<sp/>which<sp/>are</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/>stored<sp/>in<sp/>ready<sp/>lists<sp/>(all<sp/>of<sp/>which<sp/>have<sp/>the<sp/>same<sp/>xItemValue<sp/>value)<sp/>get<sp/>a</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/>share<sp/>of<sp/>the<sp/>CPU.<sp/><sp/>However,<sp/>if<sp/>the<sp/>xItemValue<sp/>is<sp/>the<sp/>same<sp/>as<sp/>the<sp/>back<sp/>marker</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/><sp/>the<sp/>iteration<sp/>loop<sp/>below<sp/>will<sp/>not<sp/>end.<sp/><sp/>Therefore<sp/>the<sp/>value<sp/>is<sp/>checked</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/>first,<sp/>and<sp/>the<sp/>algorithm<sp/>slightly<sp/>modified<sp/>if<sp/>necessary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xValueOfInsertion<sp/>==<sp/><ref refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" kindref="member">portMAX_DELAY</ref><sp/>)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>pxIterator<sp/>=<sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" kindref="member">xListEnd</ref>.<ref refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1ad19d1e1268e41f04c17c6c0234264116" kindref="member">pxPrevious</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>***<sp/>NOTE<sp/>***********************************************************</highlight></codeline>
<codeline lineno="129"><highlight class="comment"><sp/><sp/><sp/><sp/>If<sp/>you<sp/>find<sp/>your<sp/>application<sp/>is<sp/>crashing<sp/>here<sp/>then<sp/>likely<sp/>causes<sp/>are</highlight></codeline>
<codeline lineno="130"><highlight class="comment"><sp/><sp/><sp/><sp/>listed<sp/>below.<sp/><sp/>In<sp/>addition<sp/>see<sp/>https://www.freertos.org/FAQHelp.html<sp/>for</highlight></codeline>
<codeline lineno="131"><highlight class="comment"><sp/><sp/><sp/><sp/>more<sp/>tips,<sp/>and<sp/>ensure<sp/>configASSERT()<sp/>is<sp/>defined!</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/>https://www.freertos.org/a00110.html#configASSERT</highlight></codeline>
<codeline lineno="133"><highlight class="comment"></highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>1)<sp/>Stack<sp/>overflow<sp/>-</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>https://www.freertos.org/Stacks-and-stack-overflow-checking.html</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>2)<sp/>Incorrect<sp/>interrupt<sp/>priority<sp/>assignment,<sp/>especially<sp/>on<sp/>Cortex-M</highlight></codeline>
<codeline lineno="137"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parts<sp/>where<sp/>numerically<sp/>high<sp/>priority<sp/>values<sp/>denote<sp/>low<sp/>actual</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interrupt<sp/>priorities,<sp/>which<sp/>can<sp/>seem<sp/>counter<sp/>intuitive.<sp/><sp/>See</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://www.freertos.org/RTOS-Cortex-M3-M4.html<sp/>and<sp/>the<sp/>definition</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>configMAX_SYSCALL_INTERRUPT_PRIORITY<sp/>on</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>https://www.freertos.org/a00110.html</highlight></codeline>
<codeline lineno="142"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>3)<sp/>Calling<sp/>an<sp/>API<sp/>function<sp/>from<sp/>within<sp/>a<sp/>critical<sp/>section<sp/>or<sp/>when</highlight></codeline>
<codeline lineno="143"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>scheduler<sp/>is<sp/>suspended,<sp/>or<sp/>calling<sp/>an<sp/>API<sp/>function<sp/>that<sp/>does</highlight></codeline>
<codeline lineno="144"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>end<sp/>in<sp/>&quot;FromISR&quot;<sp/>from<sp/>an<sp/>interrupt.</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>4)<sp/>Using<sp/>a<sp/>queue<sp/>or<sp/>semaphore<sp/>before<sp/>it<sp/>has<sp/>been<sp/>initialised<sp/>or</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>the<sp/>scheduler<sp/>has<sp/>been<sp/>started<sp/>(are<sp/>interrupts<sp/>firing</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>vTaskStartScheduler()<sp/>has<sp/>been<sp/>called?).</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/><sp/><sp/><sp/>**********************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>pxIterator<sp/>=<sp/>(<sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/>)<sp/>&amp;(<sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" kindref="member">xListEnd</ref><sp/>);<sp/>pxIterator-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" kindref="member">pxNext</ref>-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1ad87e1d441faf3341ca60b319abc07c6f" kindref="member">xItemValue</ref><sp/>&lt;=<sp/>xValueOfInsertion;<sp/>pxIterator<sp/>=<sp/>pxIterator-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" kindref="member">pxNext</ref><sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e826<sp/>!e740<sp/>!e9087<sp/>The<sp/>mini<sp/>list<sp/>structure<sp/>is<sp/>used<sp/>as<sp/>the<sp/>list<sp/>end<sp/>to<sp/>save<sp/>RAM.<sp/><sp/>This<sp/>is<sp/>checked<sp/>and<sp/>valid.<sp/>*/</highlight><highlight class="comment">/*lint<sp/>!e440<sp/>The<sp/>iterator<sp/>moves<sp/>to<sp/>a<sp/>different<sp/>value,<sp/>not<sp/>xValueOfInsertion.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>nothing<sp/>to<sp/>do<sp/>here,<sp/>just<sp/>iterating<sp/>to<sp/>the<sp/>wanted</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>insertion<sp/>position.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/>pxNewListItem-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" kindref="member">pxNext</ref><sp/>=<sp/>pxIterator-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" kindref="member">pxNext</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>pxNewListItem-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" kindref="member">pxNext</ref>-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" kindref="member">pxPrevious</ref><sp/>=<sp/>pxNewListItem;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/>pxNewListItem-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" kindref="member">pxPrevious</ref><sp/>=<sp/>pxIterator;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/>pxIterator-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" kindref="member">pxNext</ref><sp/>=<sp/>pxNewListItem;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remember<sp/>which<sp/>list<sp/>the<sp/>item<sp/>is<sp/>in.<sp/><sp/>This<sp/>allows<sp/>fast<sp/>removal<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/><sp/>item<sp/>later.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>pxNewListItem-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a07dc4f55365dc7d44624d04290a80263" kindref="member">pxContainer</ref><sp/>=<sp/>pxList;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>(<sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a2abe49a37d8c396d60ba8a752b89da9f" kindref="member">uxNumberOfItems</ref><sp/>)++;</highlight></codeline>
<codeline lineno="167"><highlight class="normal">}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170" refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="list_8c_1a274fdced76bbdd9d8a4c4840ded2920c" kindref="member">uxListRemove</ref>(<sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxItemToRemove<sp/>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal">{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>list<sp/>item<sp/>knows<sp/>which<sp/>list<sp/>it<sp/>is<sp/>in.<sp/><sp/>Obtain<sp/>the<sp/>list<sp/>from<sp/>the<sp/>list</highlight></codeline>
<codeline lineno="173"><highlight class="comment">item.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxList<sp/>=<sp/>pxItemToRemove-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a07dc4f55365dc7d44624d04290a80263" kindref="member">pxContainer</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/>pxItemToRemove-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" kindref="member">pxNext</ref>-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" kindref="member">pxPrevious</ref><sp/>=<sp/>pxItemToRemove-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" kindref="member">pxPrevious</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>pxItemToRemove-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" kindref="member">pxPrevious</ref>-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" kindref="member">pxNext</ref><sp/>=<sp/>pxItemToRemove-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1afe105a3d59c8ff0216cdf9850970ef41" kindref="member">pxNext</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>used<sp/>during<sp/>decision<sp/>coverage<sp/>testing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2ddaee9013b02cfbfe2773ec4257375c" kindref="member">mtCOVERAGE_TEST_DELAY</ref>();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>the<sp/>index<sp/>is<sp/>left<sp/>pointing<sp/>to<sp/>a<sp/>valid<sp/>item.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1aa8dbb12e54fab6a83458349c1c9eba47" kindref="member">pxIndex</ref><sp/>==<sp/>pxItemToRemove<sp/>)</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1aa8dbb12e54fab6a83458349c1c9eba47" kindref="member">pxIndex</ref><sp/>=<sp/>pxItemToRemove-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a34f101397816be79dad8e2e4ae65f9e8" kindref="member">pxPrevious</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/>pxItemToRemove-&gt;<ref refid="structx_l_i_s_t___i_t_e_m_1a07dc4f55365dc7d44624d04290a80263" kindref="member">pxContainer</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>(<sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a2abe49a37d8c396d60ba8a752b89da9f" kindref="member">uxNumberOfItems</ref><sp/>)--;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pxList-&gt;<ref refid="structx_l_i_s_t_1a2abe49a37d8c396d60ba8a752b89da9f" kindref="member">uxNumberOfItems</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/list.c"/>
  </compounddef>
</doxygen>
