<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="heap__4_8c" kind="file" language="C++">
    <compoundname>heap_4.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="_free_r_t_o_s_8h" local="yes">FreeRTOS.h</includes>
    <includes refid="task_8h" local="yes">task.h</includes>
    <incdepgraph>
      <node id="6">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
      </node>
      <node id="3">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>deprecated_definitions.h</label>
        <link refid="deprecated__definitions_8h"/>
      </node>
      <node id="13">
        <label>list.h</label>
        <link refid="list_8h"/>
      </node>
      <node id="11">
        <label>mpu_wrappers.h</label>
        <link refid="mpu__wrappers_8h"/>
      </node>
      <node id="8">
        <label>portable.h</label>
        <link refid="portable_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>projdefs.h</label>
        <link refid="projdefs_8h"/>
      </node>
      <node id="12">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>portmacro.h</label>
        <link refid="portmacro_8h"/>
      </node>
      <node id="1">
        <label>NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c</label>
        <link refid="heap__4_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_a___b_l_o_c_k___l_i_n_k" prot="public">A_BLOCK_LINK</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="heap__4_8c_1ab622d8c674f2a417a666a7ed89109e79" prot="public" static="no">
        <name>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="41" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="heap__4_8c_1ab71bae5a95671265c828339d44c44b25" prot="public" static="no">
        <name>heapMINIMUM_BLOCK_SIZE</name>
        <initializer>( ( size_t ) ( <ref refid="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" kindref="member">xHeapStructSize</ref> &lt;&lt; 1 ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="53" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="53" bodyend="-1"/>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
      </memberdef>
      <memberdef kind="define" id="heap__4_8c_1adcef0c4245ebe20ca2b08a574c1caac9" prot="public" static="no">
        <name>heapBITS_PER_BYTE</name>
        <initializer>( ( size_t ) 8 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="56" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="56" bodyend="-1"/>
        <referencedby refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" compoundref="heap__4_8c" startline="333" endline="378">prvHeapInit</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="heap__4_8c_1a5867d4b64d89c6ab51e4783687f8960a" prot="public" static="no">
        <type>struct <ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">A_BLOCK_LINK</ref></type>
        <definition>typedef struct A_BLOCK_LINK BlockLink_t</definition>
        <argsstring></argsstring>
        <name>BlockLink_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="73" column="13"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="heap__4_8c_1a286aa29b13471f0d9f5a7ce688682694" prot="public" static="yes" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t ucHeap[configTOTAL_HEAP_SIZE]</definition>
        <argsstring>[configTOTAL_HEAP_SIZE]</argsstring>
        <name>ucHeap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="64" column="16" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="64" bodyend="-1"/>
        <referencedby refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" compoundref="heap__4_8c" startline="333" endline="378">prvHeapInit</referencedby>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" prot="public" static="yes" mutable="no">
        <type>const size_t</type>
        <definition>const size_t xHeapStructSize</definition>
        <argsstring></argsstring>
        <name>xHeapStructSize</name>
        <initializer>= ( sizeof( <ref refid="heap__4_8c_1a5867d4b64d89c6ab51e4783687f8960a" kindref="member">BlockLink_t</ref> ) + ( ( size_t ) ( <ref refid="portmacro_8h_1ab9091ce3940d8bd93ec850122a2c6a1c" kindref="member">portBYTE_ALIGNMENT</ref> - 1 ) ) ) &amp; ~( ( size_t ) portBYTE_ALIGNMENT_MASK )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="95" column="21" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="95" bodyend="-1"/>
        <referencedby refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" compoundref="heap__4_8c" startline="333" endline="378">prvHeapInit</referencedby>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
        <referencedby refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" compoundref="heap__4_8c" startline="266" endline="312">vPortFree</referencedby>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" prot="public" static="yes" mutable="no">
        <type><ref refid="heap__4_8c_1a5867d4b64d89c6ab51e4783687f8960a" kindref="member">BlockLink_t</ref></type>
        <definition>BlockLink_t xStart</definition>
        <argsstring></argsstring>
        <name>xStart</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="98" column="20" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="98" bodyend="-1"/>
        <referencedby refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" compoundref="heap__4_8c" startline="333" endline="378">prvHeapInit</referencedby>
        <referencedby refid="heap__4_8c_1a1a70fdf86d8a603f45e9b93c14e0d24a" compoundref="heap__4_8c" startline="381" endline="439">prvInsertBlockIntoFreeList</referencedby>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
        <referencedby refid="portable_8h_1abbecc6cff952357f60cce5014ecbe470" compoundref="heap__4_8c" startline="442" endline="491">vPortGetHeapStats</referencedby>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" prot="public" static="yes" mutable="no">
        <type><ref refid="heap__4_8c_1a5867d4b64d89c6ab51e4783687f8960a" kindref="member">BlockLink_t</ref> *</type>
        <definition>BlockLink_t * pxEnd</definition>
        <argsstring></argsstring>
        <name>pxEnd</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="98" column="27" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="98" bodyend="-1"/>
        <referencedby refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" compoundref="heap__4_8c" startline="333" endline="378">prvHeapInit</referencedby>
        <referencedby refid="heap__4_8c_1a1a70fdf86d8a603f45e9b93c14e0d24a" compoundref="heap__4_8c" startline="381" endline="439">prvInsertBlockIntoFreeList</referencedby>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
        <referencedby refid="portable_8h_1abbecc6cff952357f60cce5014ecbe470" compoundref="heap__4_8c" startline="442" endline="491">vPortGetHeapStats</referencedby>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t xFreeBytesRemaining</definition>
        <argsstring></argsstring>
        <name>xFreeBytesRemaining</name>
        <initializer>= 0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="102" column="15" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="102" bodyend="-1"/>
        <referencedby refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" compoundref="heap__4_8c" startline="333" endline="378">prvHeapInit</referencedby>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
        <referencedby refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" compoundref="heap__4_8c" startline="266" endline="312">vPortFree</referencedby>
        <referencedby refid="portable_8h_1abbecc6cff952357f60cce5014ecbe470" compoundref="heap__4_8c" startline="442" endline="491">vPortGetHeapStats</referencedby>
        <referencedby refid="portable_8h_1a0c28a12b313bc248be0cb7a37ed81bb7" compoundref="heap__4_8c" startline="315" endline="318">xPortGetFreeHeapSize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t xMinimumEverFreeBytesRemaining</definition>
        <argsstring></argsstring>
        <name>xMinimumEverFreeBytesRemaining</name>
        <initializer>= 0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="103" column="15" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="103" bodyend="-1"/>
        <referencedby refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" compoundref="heap__4_8c" startline="333" endline="378">prvHeapInit</referencedby>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
        <referencedby refid="portable_8h_1abbecc6cff952357f60cce5014ecbe470" compoundref="heap__4_8c" startline="442" endline="491">vPortGetHeapStats</referencedby>
        <referencedby refid="portable_8h_1ab222e4545b8ff12b62fd000fea6b34eb" compoundref="heap__4_8c" startline="321" endline="324">xPortGetMinimumEverFreeHeapSize</referencedby>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1ae3227bcff0d20b136deb25d5e757fa70" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t xNumberOfSuccessfulAllocations</definition>
        <argsstring></argsstring>
        <name>xNumberOfSuccessfulAllocations</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="104" column="15" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="104" bodyend="-1"/>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
        <referencedby refid="portable_8h_1abbecc6cff952357f60cce5014ecbe470" compoundref="heap__4_8c" startline="442" endline="491">vPortGetHeapStats</referencedby>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1a5ce01319c6e92026d88fae7badbc5b71" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t xNumberOfSuccessfulFrees</definition>
        <argsstring></argsstring>
        <name>xNumberOfSuccessfulFrees</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="105" column="15" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="105" bodyend="-1"/>
        <referencedby refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" compoundref="heap__4_8c" startline="266" endline="312">vPortFree</referencedby>
        <referencedby refid="portable_8h_1abbecc6cff952357f60cce5014ecbe470" compoundref="heap__4_8c" startline="442" endline="491">vPortGetHeapStats</referencedby>
      </memberdef>
      <memberdef kind="variable" id="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" prot="public" static="yes" mutable="no">
        <type>size_t</type>
        <definition>size_t xBlockAllocatedBit</definition>
        <argsstring></argsstring>
        <name>xBlockAllocatedBit</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="111" column="15" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="111" bodyend="-1"/>
        <referencedby refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" compoundref="heap__4_8c" startline="333" endline="378">prvHeapInit</referencedby>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
        <referencedby refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" compoundref="heap__4_8c" startline="266" endline="312">vPortFree</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="heap__4_8c_1a1a70fdf86d8a603f45e9b93c14e0d24a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvInsertBlockIntoFreeList</definition>
        <argsstring>(BlockLink_t *pxBlockToInsert)</argsstring>
        <name>prvInsertBlockIntoFreeList</name>
        <param>
          <type><ref refid="heap__4_8c_1a5867d4b64d89c6ab51e4783687f8960a" kindref="member">BlockLink_t</ref> *</type>
          <declname>pxBlockToInsert</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="381" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="381" bodyend="439" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" declline="83" declcolumn="13"/>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" compoundref="heap__4_8c" startline="98">pxEnd</references>
        <references refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" compoundref="heap__4_8c" startline="71">A_BLOCK_LINK::pxNextFreeBlock</references>
        <references refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" compoundref="heap__4_8c" startline="72">A_BLOCK_LINK::xBlockSize</references>
        <references refid="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" compoundref="heap__4_8c" startline="98">xStart</references>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
        <referencedby refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" compoundref="heap__4_8c" startline="266" endline="312">vPortFree</referencedby>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvHeapInit</definition>
        <argsstring>(void)</argsstring>
        <name>prvHeapInit</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="333" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="333" bodyend="378" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" declline="89" declcolumn="13"/>
        <references refid="_free_r_t_o_s_config_8h_1a9f213227674effff0122a75d94d87938" compoundref="_free_r_t_o_s_config_8h" startline="71">configTOTAL_HEAP_SIZE</references>
        <references refid="heap__4_8c_1adcef0c4245ebe20ca2b08a574c1caac9" compoundref="heap__4_8c" startline="56">heapBITS_PER_BYTE</references>
        <references refid="portmacro_8h_1ab9091ce3940d8bd93ec850122a2c6a1c" compoundref="portmacro_8h" startline="75">portBYTE_ALIGNMENT</references>
        <references refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" compoundref="heap__4_8c" startline="98">pxEnd</references>
        <references refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" compoundref="heap__4_8c" startline="71">A_BLOCK_LINK::pxNextFreeBlock</references>
        <references refid="heap__4_8c_1a286aa29b13471f0d9f5a7ce688682694" compoundref="heap__4_8c" startline="64">ucHeap</references>
        <references refid="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" compoundref="heap__4_8c" startline="111">xBlockAllocatedBit</references>
        <references refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" compoundref="heap__4_8c" startline="72">A_BLOCK_LINK::xBlockSize</references>
        <references refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" compoundref="heap__4_8c" startline="102">xFreeBytesRemaining</references>
        <references refid="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" compoundref="heap__4_8c" startline="95">xHeapStructSize</references>
        <references refid="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" compoundref="heap__4_8c" startline="103">xMinimumEverFreeBytesRemaining</references>
        <references refid="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" compoundref="heap__4_8c" startline="98">xStart</references>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1ac56bcb7515f081a5b3df83935499fa4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void * pvPortMalloc</definition>
        <argsstring>(size_t xWantedSize)</argsstring>
        <name>pvPortMalloc</name>
        <param>
          <type>size_t</type>
          <declname>xWantedSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="115" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="115" bodyend="263"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="heap__4_8c_1ab71bae5a95671265c828339d44c44b25" compoundref="heap__4_8c" startline="53">heapMINIMUM_BLOCK_SIZE</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="portmacro_8h_1ab9091ce3940d8bd93ec850122a2c6a1c" compoundref="portmacro_8h" startline="75">portBYTE_ALIGNMENT</references>
        <references refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" compoundref="heap__4_8c" startline="333" endline="378">prvHeapInit</references>
        <references refid="heap__4_8c_1a1a70fdf86d8a603f45e9b93c14e0d24a" compoundref="heap__4_8c" startline="381" endline="439">prvInsertBlockIntoFreeList</references>
        <references refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" compoundref="heap__4_8c" startline="98">pxEnd</references>
        <references refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" compoundref="heap__4_8c" startline="71">A_BLOCK_LINK::pxNextFreeBlock</references>
        <references refid="_free_r_t_o_s_8h_1af326afe922ffa6da245c98dc227a3293" compoundref="_free_r_t_o_s_8h" startline="572">traceMALLOC</references>
        <references refid="cmsis__os2_8c_1ab7e5c95cf72a3f819bc4462a7fb62ca3">vApplicationMallocFailedHook</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" compoundref="heap__4_8c" startline="111">xBlockAllocatedBit</references>
        <references refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" compoundref="heap__4_8c" startline="72">A_BLOCK_LINK::xBlockSize</references>
        <references refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" compoundref="heap__4_8c" startline="102">xFreeBytesRemaining</references>
        <references refid="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" compoundref="heap__4_8c" startline="95">xHeapStructSize</references>
        <references refid="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" compoundref="heap__4_8c" startline="103">xMinimumEverFreeBytesRemaining</references>
        <references refid="heap__4_8c_1ae3227bcff0d20b136deb25d5e757fa70" compoundref="heap__4_8c" startline="104">xNumberOfSuccessfulAllocations</references>
        <references refid="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" compoundref="heap__4_8c" startline="98">xStart</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <referencedby refid="cmsis__os2_8c_1a5606604d56e21ece1a654664be877439" compoundref="cmsis__os2_8c" startline="699" endline="725">osThreadEnumerate</referencedby>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1a1e7cea2fd1bc894ea3b5f5e8179d259b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vPortFree</definition>
        <argsstring>(void *pv)</argsstring>
        <name>vPortFree</name>
        <param>
          <type>void *</type>
          <declname>pv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="266" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="266" bodyend="312"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="heap__4_8c_1a1a70fdf86d8a603f45e9b93c14e0d24a" compoundref="heap__4_8c" startline="381" endline="439">prvInsertBlockIntoFreeList</references>
        <references refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" compoundref="heap__4_8c" startline="71">A_BLOCK_LINK::pxNextFreeBlock</references>
        <references refid="_free_r_t_o_s_8h_1a941bb09090b5788f0c27d9690118eed2" compoundref="_free_r_t_o_s_8h" startline="576">traceFREE</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" compoundref="heap__4_8c" startline="111">xBlockAllocatedBit</references>
        <references refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" compoundref="heap__4_8c" startline="72">A_BLOCK_LINK::xBlockSize</references>
        <references refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" compoundref="heap__4_8c" startline="102">xFreeBytesRemaining</references>
        <references refid="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" compoundref="heap__4_8c" startline="95">xHeapStructSize</references>
        <references refid="heap__4_8c_1a5ce01319c6e92026d88fae7badbc5b71" compoundref="heap__4_8c" startline="105">xNumberOfSuccessfulFrees</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <referencedby refid="cmsis__os2_8c_1a5606604d56e21ece1a654664be877439" compoundref="cmsis__os2_8c" startline="699" endline="725">osThreadEnumerate</referencedby>
        <referencedby refid="event__groups_8c_1a6939faca89fc4ba52fa8288527042464" compoundref="event__groups_8c" startline="613" endline="652">vEventGroupDelete</referencedby>
        <referencedby refid="queue_8h_1a707cbcfe3aed6b877b6aa6d9d75a3f22" compoundref="queue_8c" startline="1975" endline="2014">vQueueDelete</referencedby>
        <referencedby refid="stream__buffer_8h_1a05dc9d2ae220a050526a062eddf6d7a2" compoundref="stream__buffer_8c" startline="359" endline="389">vStreamBufferDelete</referencedby>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1a0c28a12b313bc248be0cb7a37ed81bb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xPortGetFreeHeapSize</definition>
        <argsstring>(void)</argsstring>
        <name>xPortGetFreeHeapSize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="315" column="8" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="315" bodyend="318"/>
        <references refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" compoundref="heap__4_8c" startline="102">xFreeBytesRemaining</references>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1ab222e4545b8ff12b62fd000fea6b34eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xPortGetMinimumEverFreeHeapSize</definition>
        <argsstring>(void)</argsstring>
        <name>xPortGetMinimumEverFreeHeapSize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="321" column="8" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="321" bodyend="324"/>
        <references refid="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" compoundref="heap__4_8c" startline="103">xMinimumEverFreeBytesRemaining</references>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1a8bf103ce32ce8473574e9920af8b4eec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vPortInitialiseBlocks</definition>
        <argsstring>(void)</argsstring>
        <name>vPortInitialiseBlocks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="327" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="327" bodyend="330"/>
      </memberdef>
      <memberdef kind="function" id="heap__4_8c_1abbecc6cff952357f60cce5014ecbe470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vPortGetHeapStats</definition>
        <argsstring>(HeapStats_t *pxHeapStats)</argsstring>
        <name>vPortGetHeapStats</name>
        <param>
          <type><ref refid="portable_8h_1aebfa6771f45f6a5ac026e91ee2fd57f4" kindref="member">HeapStats_t</ref> *</type>
          <declname>pxHeapStats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" line="442" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c" bodystart="442" bodyend="491"/>
        <references refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" compoundref="portmacro_8h" startline="64">portMAX_DELAY</references>
        <references refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" compoundref="heap__4_8c" startline="98">pxEnd</references>
        <references refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" compoundref="heap__4_8c" startline="71">A_BLOCK_LINK::pxNextFreeBlock</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="structx_heap_stats_1a7641b3a1494c093b3fe92a511419e36f" compoundref="portable_8h" startline="132">xHeapStats::xAvailableHeapSpaceInBytes</references>
        <references refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" compoundref="heap__4_8c" startline="72">A_BLOCK_LINK::xBlockSize</references>
        <references refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" compoundref="heap__4_8c" startline="102">xFreeBytesRemaining</references>
        <references refid="structx_heap_stats_1a2ef01d960466f5cba4d61c61723118e7" compoundref="portable_8h" startline="136">xHeapStats::xMinimumEverFreeBytesRemaining</references>
        <references refid="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" compoundref="heap__4_8c" startline="103">xMinimumEverFreeBytesRemaining</references>
        <references refid="structx_heap_stats_1af66da4ca5a39e1ae32edca5896e056ce" compoundref="portable_8h" startline="135">xHeapStats::xNumberOfFreeBlocks</references>
        <references refid="structx_heap_stats_1a0474041a978f26b0ac0e721689a7c8db" compoundref="portable_8h" startline="137">xHeapStats::xNumberOfSuccessfulAllocations</references>
        <references refid="heap__4_8c_1ae3227bcff0d20b136deb25d5e757fa70" compoundref="heap__4_8c" startline="104">xNumberOfSuccessfulAllocations</references>
        <references refid="structx_heap_stats_1a2a11579b572a1bd744b22f418b00279d" compoundref="portable_8h" startline="138">xHeapStats::xNumberOfSuccessfulFrees</references>
        <references refid="heap__4_8c_1a5ce01319c6e92026d88fae7badbc5b71" compoundref="heap__4_8c" startline="105">xNumberOfSuccessfulFrees</references>
        <references refid="structx_heap_stats_1aaaf136c838775162f7f9d8218ee0ba06" compoundref="portable_8h" startline="133">xHeapStats::xSizeOfLargestFreeBlockInBytes</references>
        <references refid="structx_heap_stats_1af881dc708d82b808ad78fce2cc318af7" compoundref="portable_8h" startline="134">xHeapStats::xSizeOfSmallestFreeBlockInBytes</references>
        <references refid="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" compoundref="heap__4_8c" startline="98">xStart</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>FreeRTOS<sp/>Kernel<sp/>V10.3.1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020<sp/>Amazon.com,<sp/>Inc.<sp/>or<sp/>its<sp/>affiliates.<sp/><sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>http://www.FreeRTOS.org</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>http://aws.amazon.com/freertos</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>1<sp/>tab<sp/>==<sp/>4<sp/>spaces!</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="29"><highlight class="comment"><sp/>*<sp/>A<sp/>sample<sp/>implementation<sp/>of<sp/>pvPortMalloc()<sp/>and<sp/>vPortFree()<sp/>that<sp/>combines</highlight></codeline>
<codeline lineno="30"><highlight class="comment"><sp/>*<sp/>(coalescences)<sp/>adjacent<sp/>memory<sp/>blocks<sp/>as<sp/>they<sp/>are<sp/>freed,<sp/>and<sp/>in<sp/>so<sp/>doing</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>limits<sp/>memory<sp/>fragmentation.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="33"><highlight class="comment"><sp/>*<sp/>See<sp/>heap_1.c,<sp/>heap_2.c<sp/>and<sp/>heap_3.c<sp/>for<sp/>alternative<sp/>implementations,<sp/>and<sp/>the</highlight></codeline>
<codeline lineno="34"><highlight class="comment"><sp/>*<sp/>memory<sp/>management<sp/>pages<sp/>of<sp/>http://www.FreeRTOS.org<sp/>for<sp/>more<sp/>information.</highlight></codeline>
<codeline lineno="35"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Defining<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/>prevents<sp/>task.h<sp/>from<sp/>redefining</highlight></codeline>
<codeline lineno="39"><highlight class="comment">all<sp/>the<sp/>API<sp/>functions<sp/>to<sp/>use<sp/>the<sp/>MPU<sp/>wrappers.<sp/><sp/>That<sp/>should<sp/>only<sp/>be<sp/>done<sp/>when</highlight></codeline>
<codeline lineno="40"><highlight class="comment">task.h<sp/>is<sp/>included<sp/>from<sp/>an<sp/>application<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="heap__4_8c_1ab622d8c674f2a417a666a7ed89109e79" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_free_r_t_o_s_8h" kindref="compound">FreeRTOS.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="task_8h" kindref="compound">task.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>This<sp/>file<sp/>must<sp/>not<sp/>be<sp/>used<sp/>if<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>is<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Block<sp/>sizes<sp/>must<sp/>not<sp/>get<sp/>too<sp/>small.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="heap__4_8c_1ab71bae5a95671265c828339d44c44b25" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>heapMINIMUM_BLOCK_SIZE<sp/><sp/>(<sp/>(<sp/>size_t<sp/>)<sp/>(<sp/>xHeapStructSize<sp/>&lt;&lt;<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Assumes<sp/>8bit<sp/>bytes!<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="heap__4_8c_1adcef0c4245ebe20ca2b08a574c1caac9" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>heapBITS_PER_BYTE<sp/><sp/><sp/>(<sp/>(<sp/>size_t<sp/>)<sp/>8<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Allocate<sp/>the<sp/>memory<sp/>for<sp/>the<sp/>heap.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configAPPLICATION_ALLOCATED_HEAP<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>application<sp/>writer<sp/>has<sp/>already<sp/>defined<sp/>the<sp/>array<sp/>used<sp/>for<sp/>the<sp/>RTOS</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/>heap<sp/>-<sp/>probably<sp/>so<sp/>it<sp/>can<sp/>be<sp/>placed<sp/>in<sp/>a<sp/>special<sp/>segment<sp/>or<sp/>address.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="heap__4_8c_1a286aa29b13471f0d9f5a7ce688682694" kindref="member">ucHeap</ref>[<sp/><ref refid="_free_r_t_o_s_config_8h_1a9f213227674effff0122a75d94d87938" kindref="member">configTOTAL_HEAP_SIZE</ref><sp/>];</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="heap__4_8c_1a286aa29b13471f0d9f5a7ce688682694" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint8_t<sp/><ref refid="heap__4_8c_1a286aa29b13471f0d9f5a7ce688682694" kindref="member">ucHeap</ref>[<sp/><ref refid="_free_r_t_o_s_config_8h_1a9f213227674effff0122a75d94d87938" kindref="member">configTOTAL_HEAP_SIZE</ref><sp/>];</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configAPPLICATION_ALLOCATED_HEAP<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>linked<sp/>list<sp/>structure.<sp/><sp/>This<sp/>is<sp/>used<sp/>to<sp/>link<sp/>free<sp/>blocks<sp/>in<sp/>order</highlight></codeline>
<codeline lineno="68"><highlight class="comment">of<sp/>their<sp/>memory<sp/>address.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="struct_a___b_l_o_c_k___l_i_n_k" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">A_BLOCK_LINK</ref></highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71" refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">A_BLOCK_LINK</ref><sp/>*<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref>;<sp/></highlight><highlight class="comment">/*&lt;&lt;<sp/>The<sp/>next<sp/>free<sp/>block<sp/>in<sp/>the<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;&lt;<sp/>The<sp/>size<sp/>of<sp/>the<sp/>free<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="heap__4_8c_1a5867d4b64d89c6ab51e4783687f8960a" refkind="member"><highlight class="normal">}<sp/><ref refid="heap__4_8c_1a5867d4b64d89c6ab51e4783687f8960a" kindref="member">BlockLink_t</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="78"><highlight class="comment"><sp/>*<sp/>Inserts<sp/>a<sp/>block<sp/>of<sp/>memory<sp/>that<sp/>is<sp/>being<sp/>freed<sp/>into<sp/>the<sp/>correct<sp/>position<sp/>in</highlight></codeline>
<codeline lineno="79"><highlight class="comment"><sp/>*<sp/>the<sp/>list<sp/>of<sp/>free<sp/>memory<sp/>blocks.<sp/><sp/>The<sp/>block<sp/>being<sp/>freed<sp/>will<sp/>be<sp/>merged<sp/>with</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>the<sp/>block<sp/>in<sp/>front<sp/>it<sp/>and/or<sp/>the<sp/>block<sp/>behind<sp/>it<sp/>if<sp/>the<sp/>memory<sp/>blocks<sp/>are</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>adjacent<sp/>to<sp/>each<sp/>other.</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1a1a70fdf86d8a603f45e9b93c14e0d24a" kindref="member">prvInsertBlockIntoFreeList</ref>(<sp/><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxBlockToInsert<sp/>);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>Called<sp/>automatically<sp/>to<sp/>setup<sp/>the<sp/>required<sp/>heap<sp/>structures<sp/>the<sp/>first<sp/>time</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>pvPortMalloc()<sp/>is<sp/>called.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" kindref="member">prvHeapInit</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>size<sp/>of<sp/>the<sp/>structure<sp/>placed<sp/>at<sp/>the<sp/>beginning<sp/>of<sp/>each<sp/>allocated<sp/>memory</highlight></codeline>
<codeline lineno="94"><highlight class="comment">block<sp/>must<sp/>by<sp/>correctly<sp/>byte<sp/>aligned.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" kindref="member">xHeapStructSize</ref><sp/>=<sp/>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="heap__4_8c_1a5867d4b64d89c6ab51e4783687f8960a" kindref="member">BlockLink_t</ref><sp/>)<sp/>+<sp/>(<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>(<sp/><ref refid="portmacro_8h_1ab9091ce3940d8bd93ec850122a2c6a1c" kindref="member">portBYTE_ALIGNMENT</ref><sp/>-<sp/>1<sp/>)<sp/>)<sp/>)<sp/>&amp;<sp/>~(<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>portBYTE_ALIGNMENT_MASK<sp/>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>couple<sp/>of<sp/>list<sp/>links<sp/>to<sp/>mark<sp/>the<sp/>start<sp/>and<sp/>end<sp/>of<sp/>the<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/><ref refid="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" kindref="member">xStart</ref>,<sp/>*<ref refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" kindref="member">pxEnd</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Keeps<sp/>track<sp/>of<sp/>the<sp/>number<sp/>of<sp/>calls<sp/>to<sp/>allocate<sp/>and<sp/>free<sp/>memory<sp/>as<sp/>well<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="101"><highlight class="comment">number<sp/>of<sp/>free<sp/>bytes<sp/>remaining,<sp/>but<sp/>says<sp/>nothing<sp/>about<sp/>fragmentation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" kindref="member">xFreeBytesRemaining</ref><sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="103" refid="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" kindref="member">xMinimumEverFreeBytesRemaining</ref><sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="104" refid="heap__4_8c_1ae3227bcff0d20b136deb25d5e757fa70" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1ae3227bcff0d20b136deb25d5e757fa70" kindref="member">xNumberOfSuccessfulAllocations</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="105" refid="heap__4_8c_1a5ce01319c6e92026d88fae7badbc5b71" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1a5ce01319c6e92026d88fae7badbc5b71" kindref="member">xNumberOfSuccessfulFrees</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Gets<sp/>set<sp/>to<sp/>the<sp/>top<sp/>bit<sp/>of<sp/>an<sp/>size_t<sp/>type.<sp/><sp/>When<sp/>this<sp/>bit<sp/>in<sp/>the<sp/>xBlockSize</highlight></codeline>
<codeline lineno="108"><highlight class="comment">member<sp/>of<sp/>an<sp/>BlockLink_t<sp/>structure<sp/>is<sp/>set<sp/>then<sp/>the<sp/>block<sp/>belongs<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="109"><highlight class="comment">application.<sp/><sp/>When<sp/>the<sp/>bit<sp/>is<sp/>free<sp/>the<sp/>block<sp/>is<sp/>still<sp/>part<sp/>of<sp/>the<sp/>free<sp/>heap</highlight></codeline>
<codeline lineno="110"><highlight class="comment">space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" kindref="member">xBlockAllocatedBit</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="heap__4_8c_1ac56bcb7515f081a5b3df83935499fa4a" kindref="member">pvPortMalloc</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xWantedSize<sp/>)</highlight></codeline>
<codeline lineno="116"><highlight class="normal">{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxBlock,<sp/>*pxPreviousBlock,<sp/>*pxNewBlockLink;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvReturn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>is<sp/>the<sp/>first<sp/>call<sp/>to<sp/>malloc<sp/>then<sp/>the<sp/>heap<sp/>will<sp/>require</highlight></codeline>
<codeline lineno="123"><highlight class="comment"><sp/><sp/><sp/><sp/>initialisation<sp/>to<sp/>setup<sp/>the<sp/>list<sp/>of<sp/>free<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" kindref="member">pxEnd</ref><sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" kindref="member">prvHeapInit</ref>();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>requested<sp/>block<sp/>size<sp/>is<sp/>not<sp/>so<sp/>large<sp/>that<sp/>the<sp/>top<sp/>bit<sp/>is</highlight></codeline>
<codeline lineno="134"><highlight class="comment"><sp/><sp/><sp/><sp/>set.<sp/><sp/>The<sp/>top<sp/>bit<sp/>of<sp/>the<sp/>block<sp/>size<sp/>member<sp/>of<sp/>the<sp/>BlockLink_t<sp/>structure</highlight></codeline>
<codeline lineno="135"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>used<sp/>to<sp/>determine<sp/>who<sp/>owns<sp/>the<sp/>block<sp/>-<sp/>the<sp/>application<sp/>or<sp/>the</highlight></codeline>
<codeline lineno="136"><highlight class="comment"><sp/><sp/><sp/><sp/>kernel,<sp/>so<sp/>it<sp/>must<sp/>be<sp/>free.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>xWantedSize<sp/>&amp;<sp/><ref refid="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" kindref="member">xBlockAllocatedBit</ref><sp/>)<sp/>==<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>wanted<sp/>size<sp/>is<sp/>increased<sp/>so<sp/>it<sp/>can<sp/>contain<sp/>a<sp/>BlockLink_t</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>structure<sp/>in<sp/>addition<sp/>to<sp/>the<sp/>requested<sp/>amount<sp/>of<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xWantedSize<sp/>&gt;<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xWantedSize<sp/>+=<sp/><ref refid="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" kindref="member">xHeapStructSize</ref>;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>that<sp/>blocks<sp/>are<sp/>always<sp/>aligned<sp/>to<sp/>the<sp/>required<sp/>number</highlight></codeline>
<codeline lineno="146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>xWantedSize<sp/>&amp;<sp/>portBYTE_ALIGNMENT_MASK<sp/>)<sp/>!=<sp/>0x00<sp/>)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Byte<sp/>alignment<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xWantedSize<sp/>+=<sp/>(<sp/><ref refid="portmacro_8h_1ab9091ce3940d8bd93ec850122a2c6a1c" kindref="member">portBYTE_ALIGNMENT</ref><sp/>-<sp/>(<sp/>xWantedSize<sp/>&amp;<sp/>portBYTE_ALIGNMENT_MASK<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>xWantedSize<sp/>&amp;<sp/>portBYTE_ALIGNMENT_MASK<sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>xWantedSize<sp/>&gt;<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>xWantedSize<sp/>&lt;=<sp/><ref refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" kindref="member">xFreeBytesRemaining</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Traverse<sp/>the<sp/>list<sp/>from<sp/>the<sp/>start<sp/>(lowest<sp/>address)<sp/>block<sp/>until</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>one<sp/>of<sp/>adequate<sp/>size<sp/>is<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxPreviousBlock<sp/>=<sp/>&amp;<ref refid="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" kindref="member">xStart</ref>;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlock<sp/>=<sp/><ref refid="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" kindref="member">xStart</ref>.<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>(<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>&lt;<sp/>xWantedSize<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>!=<sp/>NULL<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxPreviousBlock<sp/>=<sp/>pxBlock;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlock<sp/>=<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>end<sp/>marker<sp/>was<sp/>reached<sp/>then<sp/>a<sp/>block<sp/>of<sp/>adequate<sp/>size</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>was<sp/>not<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxBlock<sp/>!=<sp/><ref refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" kindref="member">pxEnd</ref><sp/>)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>memory<sp/>space<sp/>pointed<sp/>to<sp/>-<sp/>jumping<sp/>over<sp/>the</highlight></codeline>
<codeline lineno="180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BlockLink_t<sp/>structure<sp/>at<sp/>its<sp/>start.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pvReturn<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>(<sp/>(<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxPreviousBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>)<sp/>+<sp/><ref refid="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" kindref="member">xHeapStructSize</ref><sp/>);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>block<sp/>is<sp/>being<sp/>returned<sp/>for<sp/>use<sp/>so<sp/>must<sp/>be<sp/>taken<sp/>out</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>list<sp/>of<sp/>free<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxPreviousBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>=<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>block<sp/>is<sp/>larger<sp/>than<sp/>required<sp/>it<sp/>can<sp/>be<sp/>split<sp/>into</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>two.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>-<sp/>xWantedSize<sp/>)<sp/>&gt;<sp/><ref refid="heap__4_8c_1ab71bae5a95671265c828339d44c44b25" kindref="member">heapMINIMUM_BLOCK_SIZE</ref><sp/>)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>block<sp/>is<sp/>to<sp/>be<sp/>split<sp/>into<sp/>two.<sp/><sp/>Create<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>block<sp/>following<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>requested.<sp/>The<sp/>void</highlight></codeline>
<codeline lineno="193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cast<sp/>is<sp/>used<sp/>to<sp/>prevent<sp/>byte<sp/>alignment<sp/>warnings<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewBlockLink<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>(<sp/>(<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxBlock<sp/>)<sp/>+<sp/>xWantedSize<sp/>);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>(<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>pxNewBlockLink<sp/>)<sp/>&amp;<sp/>portBYTE_ALIGNMENT_MASK<sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>sizes<sp/>of<sp/>two<sp/>blocks<sp/>split<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>single<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewBlockLink-&gt;xBlockSize<sp/>=<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>-<sp/>xWantedSize;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>=<sp/>xWantedSize;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Insert<sp/>the<sp/>new<sp/>block<sp/>into<sp/>the<sp/>list<sp/>of<sp/>free<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap__4_8c_1a1a70fdf86d8a603f45e9b93c14e0d24a" kindref="member">prvInsertBlockIntoFreeList</ref>(<sp/>pxNewBlockLink<sp/>);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" kindref="member">xFreeBytesRemaining</ref><sp/>-=<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" kindref="member">xFreeBytesRemaining</ref><sp/>&lt;<sp/><ref refid="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" kindref="member">xMinimumEverFreeBytesRemaining</ref><sp/>)</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" kindref="member">xMinimumEverFreeBytesRemaining</ref><sp/>=<sp/><ref refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" kindref="member">xFreeBytesRemaining</ref>;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>block<sp/>is<sp/>being<sp/>returned<sp/>-<sp/>it<sp/>is<sp/>allocated<sp/>and<sp/>owned</highlight></codeline>
<codeline lineno="223"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>by<sp/>the<sp/>application<sp/>and<sp/>has<sp/>no<sp/>&quot;next&quot;<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>|=<sp/><ref refid="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" kindref="member">xBlockAllocatedBit</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap__4_8c_1ae3227bcff0d20b136deb25d5e757fa70" kindref="member">xNumberOfSuccessfulAllocations</ref>++;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af326afe922ffa6da245c98dc227a3293" kindref="member">traceMALLOC</ref>(<sp/>pvReturn,<sp/>xWantedSize<sp/>);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configUSE_MALLOC_FAILED_HOOK<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pvReturn<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cmsis__os2_8c_1ab7e5c95cf72a3f819bc4462a7fb62ca3" kindref="member">vApplicationMallocFailedHook</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmsis__os2_8c_1ab7e5c95cf72a3f819bc4462a7fb62ca3" kindref="member">vApplicationMallocFailedHook</ref>();</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>(<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>pvReturn<sp/>)<sp/>&amp;<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>portBYTE_ALIGNMENT_MASK<sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pvReturn;</highlight></codeline>
<codeline lineno="263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pv<sp/>)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal">uint8_t<sp/>*puc<sp/>=<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pv;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxLink;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pv<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>memory<sp/>being<sp/>freed<sp/>will<sp/>have<sp/>an<sp/>BlockLink_t<sp/>structure<sp/>immediately</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/><sp/><sp/><sp/>before<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>puc<sp/>-=<sp/><ref refid="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" kindref="member">xHeapStructSize</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>casting<sp/>is<sp/>to<sp/>keep<sp/>the<sp/>compiler<sp/>from<sp/>issuing<sp/>warnings.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>pxLink<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>puc;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>block<sp/>is<sp/>actually<sp/>allocated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>pxLink-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>&amp;<sp/><ref refid="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" kindref="member">xBlockAllocatedBit</ref><sp/>)<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxLink-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxLink-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>&amp;<sp/><ref refid="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" kindref="member">xBlockAllocatedBit</ref><sp/>)<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxLink-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>block<sp/>is<sp/>being<sp/>returned<sp/>to<sp/>the<sp/>heap<sp/>-<sp/>it<sp/>is<sp/>no<sp/>longer</highlight></codeline>
<codeline lineno="289"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>allocated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxLink-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>&amp;=<sp/>~xBlockAllocatedBit;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>this<sp/>block<sp/>to<sp/>the<sp/>list<sp/>of<sp/>free<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" kindref="member">xFreeBytesRemaining</ref><sp/>+=<sp/>pxLink-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a941bb09090b5788f0c27d9690118eed2" kindref="member">traceFREE</ref>(<sp/>pv,<sp/>pxLink-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap__4_8c_1a1a70fdf86d8a603f45e9b93c14e0d24a" kindref="member">prvInsertBlockIntoFreeList</ref>(<sp/>(<sp/>(<sp/><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*<sp/>)<sp/>pxLink<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="heap__4_8c_1a5ce01319c6e92026d88fae7badbc5b71" kindref="member">xNumberOfSuccessfulFrees</ref>++;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal">}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="portable_8h_1a0c28a12b313bc248be0cb7a37ed81bb7" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1a0c28a12b313bc248be0cb7a37ed81bb7" kindref="member">xPortGetFreeHeapSize</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="316"><highlight class="normal">{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" kindref="member">xFreeBytesRemaining</ref>;</highlight></codeline>
<codeline lineno="318"><highlight class="normal">}</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="portable_8h_1ab222e4545b8ff12b62fd000fea6b34eb" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1ab222e4545b8ff12b62fd000fea6b34eb" kindref="member">xPortGetMinimumEverFreeHeapSize</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="322"><highlight class="normal">{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" kindref="member">xMinimumEverFreeBytesRemaining</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="portable_8h_1a8bf103ce32ce8473574e9920af8b4eec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1a8bf103ce32ce8473574e9920af8b4eec" kindref="member">vPortInitialiseBlocks</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>just<sp/>exists<sp/>to<sp/>keep<sp/>the<sp/>linker<sp/>quiet.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal">}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333" refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1a3e55181f788f17d9a3e7d226a5206e4f" kindref="member">prvHeapInit</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="334"><highlight class="normal">{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxFirstFreeBlock;</highlight></codeline>
<codeline lineno="336"><highlight class="normal">uint8_t<sp/>*pucAlignedHeap;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>uxAddress;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xTotalHeapSize<sp/>=<sp/><ref refid="_free_r_t_o_s_config_8h_1a9f213227674effff0122a75d94d87938" kindref="member">configTOTAL_HEAP_SIZE</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>the<sp/>heap<sp/>starts<sp/>on<sp/>a<sp/>correctly<sp/>aligned<sp/>boundary.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>uxAddress<sp/>=<sp/>(<sp/>size_t<sp/>)<sp/><ref refid="heap__4_8c_1a286aa29b13471f0d9f5a7ce688682694" kindref="member">ucHeap</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>uxAddress<sp/>&amp;<sp/>portBYTE_ALIGNMENT_MASK<sp/>)<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>uxAddress<sp/>+=<sp/>(<sp/><ref refid="portmacro_8h_1ab9091ce3940d8bd93ec850122a2c6a1c" kindref="member">portBYTE_ALIGNMENT</ref><sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>uxAddress<sp/>&amp;=<sp/>~(<sp/>(<sp/>size_t<sp/>)<sp/>portBYTE_ALIGNMENT_MASK<sp/>);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>xTotalHeapSize<sp/>-=<sp/>uxAddress<sp/>-<sp/>(<sp/>size_t<sp/>)<sp/><ref refid="heap__4_8c_1a286aa29b13471f0d9f5a7ce688682694" kindref="member">ucHeap</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>pucAlignedHeap<sp/>=<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>uxAddress;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>xStart<sp/>is<sp/>used<sp/>to<sp/>hold<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>item<sp/>in<sp/>the<sp/>list<sp/>of<sp/>free</highlight></codeline>
<codeline lineno="353"><highlight class="comment"><sp/><sp/>blocks.<sp/><sp/>The<sp/>void<sp/>cast<sp/>is<sp/>used<sp/>to<sp/>prevent<sp/>compiler<sp/>warnings.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><ref refid="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" kindref="member">xStart</ref>.<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pucAlignedHeap;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><ref refid="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" kindref="member">xStart</ref>.<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>=<sp/>(<sp/>size_t<sp/>)<sp/>0;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>pxEnd<sp/>is<sp/>used<sp/>to<sp/>mark<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list<sp/>of<sp/>free<sp/>blocks<sp/>and<sp/>is<sp/>inserted</highlight></codeline>
<codeline lineno="358"><highlight class="comment"><sp/><sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>heap<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>uxAddress<sp/>=<sp/>(<sp/>(<sp/>size_t<sp/>)<sp/>pucAlignedHeap<sp/>)<sp/>+<sp/>xTotalHeapSize;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>uxAddress<sp/>-=<sp/><ref refid="heap__4_8c_1aff7bec0da6b44e3634d215b40eb1db76" kindref="member">xHeapStructSize</ref>;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>uxAddress<sp/>&amp;=<sp/>~(<sp/>(<sp/>size_t<sp/>)<sp/>portBYTE_ALIGNMENT_MASK<sp/>);</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><ref refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" kindref="member">pxEnd</ref><sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>uxAddress;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" kindref="member">pxEnd</ref>-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><ref refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" kindref="member">pxEnd</ref>-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>To<sp/>start<sp/>with<sp/>there<sp/>is<sp/>a<sp/>single<sp/>free<sp/>block<sp/>that<sp/>is<sp/>sized<sp/>to<sp/>take<sp/>up<sp/>the</highlight></codeline>
<codeline lineno="367"><highlight class="comment"><sp/><sp/>entire<sp/>heap<sp/>space,<sp/>minus<sp/>the<sp/>space<sp/>taken<sp/>by<sp/>pxEnd.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>pxFirstFreeBlock<sp/>=<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pucAlignedHeap;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/>pxFirstFreeBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>=<sp/>uxAddress<sp/>-<sp/>(<sp/>size_t<sp/>)<sp/>pxFirstFreeBlock;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>pxFirstFreeBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>=<sp/><ref refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" kindref="member">pxEnd</ref>;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>one<sp/>block<sp/>exists<sp/>-<sp/>and<sp/>it<sp/>covers<sp/>the<sp/>entire<sp/>usable<sp/>heap<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><ref refid="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" kindref="member">xMinimumEverFreeBytesRemaining</ref><sp/>=<sp/>pxFirstFreeBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><ref refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" kindref="member">xFreeBytesRemaining</ref><sp/>=<sp/>pxFirstFreeBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Work<sp/>out<sp/>the<sp/>position<sp/>of<sp/>the<sp/>top<sp/>bit<sp/>in<sp/>a<sp/>size_t<sp/>variable.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><ref refid="heap__4_8c_1ad7d272a4def963ce2d0185bb02fc7da4" kindref="member">xBlockAllocatedBit</ref><sp/>=<sp/>(<sp/>(<sp/>size_t<sp/>)<sp/>1<sp/>)<sp/>&lt;&lt;<sp/>(<sp/>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/>size_t<sp/>)<sp/>*<sp/><ref refid="heap__4_8c_1adcef0c4245ebe20ca2b08a574c1caac9" kindref="member">heapBITS_PER_BYTE</ref><sp/>)<sp/>-<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="378"><highlight class="normal">}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="heap__4_8c_1a1a70fdf86d8a603f45e9b93c14e0d24a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1a1a70fdf86d8a603f45e9b93c14e0d24a" kindref="member">prvInsertBlockIntoFreeList</ref>(<sp/><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxBlockToInsert<sp/>)</highlight></codeline>
<codeline lineno="382"><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxIterator;</highlight></codeline>
<codeline lineno="384"><highlight class="normal">uint8_t<sp/>*puc;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Iterate<sp/>through<sp/>the<sp/>list<sp/>until<sp/>a<sp/>block<sp/>is<sp/>found<sp/>that<sp/>has<sp/>a<sp/>higher<sp/>address</highlight></codeline>
<codeline lineno="387"><highlight class="comment"><sp/><sp/>than<sp/>the<sp/>block<sp/>being<sp/>inserted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>pxIterator<sp/>=<sp/>&amp;<ref refid="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" kindref="member">xStart</ref>;<sp/>pxIterator-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>&lt;<sp/>pxBlockToInsert;<sp/>pxIterator<sp/>=<sp/>pxIterator-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Nothing<sp/>to<sp/>do<sp/>here,<sp/>just<sp/>iterate<sp/>to<sp/>the<sp/>right<sp/>position.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>the<sp/>block<sp/>being<sp/>inserted,<sp/>and<sp/>the<sp/>block<sp/>it<sp/>is<sp/>being<sp/>inserted<sp/>after</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/>make<sp/>a<sp/>contiguous<sp/>block<sp/>of<sp/>memory?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>puc<sp/>=<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxIterator;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>puc<sp/>+<sp/>pxIterator-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>)<sp/>==<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxBlockToInsert<sp/>)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/>pxIterator-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>+=<sp/>pxBlockToInsert-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>pxBlockToInsert<sp/>=<sp/>pxIterator;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>the<sp/>block<sp/>being<sp/>inserted,<sp/>and<sp/>the<sp/>block<sp/>it<sp/>is<sp/>being<sp/>inserted<sp/>before</highlight></codeline>
<codeline lineno="407"><highlight class="comment"><sp/><sp/>make<sp/>a<sp/>contiguous<sp/>block<sp/>of<sp/>memory?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>puc<sp/>=<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxBlockToInsert;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>puc<sp/>+<sp/>pxBlockToInsert-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>)<sp/>==<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxIterator-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>)</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxIterator-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>!=<sp/><ref refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" kindref="member">pxEnd</ref><sp/>)</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Form<sp/>one<sp/>big<sp/>block<sp/>from<sp/>the<sp/>two<sp/>blocks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxBlockToInsert-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>+=<sp/>pxIterator-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref>-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref>;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxBlockToInsert-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>=<sp/>pxIterator-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref>-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref>;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxBlockToInsert-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>=<sp/><ref refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" kindref="member">pxEnd</ref>;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/>pxBlockToInsert-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>=<sp/>pxIterator-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref>;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>block<sp/>being<sp/>inserted<sp/>plugged<sp/>a<sp/>gab,<sp/>so<sp/>was<sp/>merged<sp/>with<sp/>the<sp/>block</highlight></codeline>
<codeline lineno="428"><highlight class="comment"><sp/><sp/>before<sp/>and<sp/>the<sp/>block<sp/>after,<sp/>then<sp/>it&apos;s<sp/>pxNextFreeBlock<sp/>pointer<sp/>will<sp/>have</highlight></codeline>
<codeline lineno="429"><highlight class="comment"><sp/><sp/>already<sp/>been<sp/>set,<sp/>and<sp/>should<sp/>not<sp/>be<sp/>set<sp/>here<sp/>as<sp/>that<sp/>would<sp/>make<sp/>it<sp/>point</highlight></codeline>
<codeline lineno="430"><highlight class="comment"><sp/><sp/>to<sp/>itself.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxIterator<sp/>!=<sp/>pxBlockToInsert<sp/>)</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>pxIterator-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref><sp/>=<sp/>pxBlockToInsert;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal">}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="portable_8h_1abbecc6cff952357f60cce5014ecbe470" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="heap__4_8c_1abbecc6cff952357f60cce5014ecbe470" kindref="member">vPortGetHeapStats</ref>(<sp/><ref refid="structx_heap_stats" kindref="compound">HeapStats_t</ref><sp/>*pxHeapStats<sp/>)</highlight></codeline>
<codeline lineno="443"><highlight class="normal">{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><ref refid="struct_a___b_l_o_c_k___l_i_n_k" kindref="compound">BlockLink_t</ref><sp/>*pxBlock;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBlocks<sp/>=<sp/>0,<sp/>xMaxSize<sp/>=<sp/>0,<sp/>xMinSize<sp/>=<sp/><ref refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" kindref="member">portMAX_DELAY</ref>;<sp/></highlight><highlight class="comment">/*<sp/>portMAX_DELAY<sp/>used<sp/>as<sp/>a<sp/>portable<sp/>way<sp/>of<sp/>getting<sp/>the<sp/>maximum<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>pxBlock<sp/>=<sp/><ref refid="heap__4_8c_1a02f2ab4cbfe2167dc3bbdaf9b6c629c9" kindref="member">xStart</ref>.<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref>;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>pxBlock<sp/>will<sp/>be<sp/>NULL<sp/>if<sp/>the<sp/>heap<sp/>has<sp/>not<sp/>been<sp/>initialised.<sp/><sp/>The<sp/>heap</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>initialised<sp/>automatically<sp/>when<sp/>the<sp/>first<sp/>allocation<sp/>is<sp/>made.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxBlock<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>the<sp/>number<sp/>of<sp/>blocks<sp/>and<sp/>record<sp/>the<sp/>largest<sp/>block<sp/>seen</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>far.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xBlocks++;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>&gt;<sp/>xMaxSize<sp/>)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMaxSize<sp/>=<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref>;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref><sp/>&lt;<sp/>xMinSize<sp/>)</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMinSize<sp/>=<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1ad5dcf5df03d8be6186c567be9e2c657b" kindref="member">xBlockSize</ref>;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>to<sp/>the<sp/>next<sp/>block<sp/>in<sp/>the<sp/>chain<sp/>until<sp/>the<sp/>last<sp/>block<sp/>is</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reached.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxBlock<sp/>=<sp/>pxBlock-&gt;<ref refid="struct_a___b_l_o_c_k___l_i_n_k_1a005de4303d4b4e61065e77d97c9774fe" kindref="member">pxNextFreeBlock</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>pxBlock<sp/>!=<sp/><ref refid="heap__4_8c_1a9e133e4e5cd5400005b1378227cbdf7e" kindref="member">pxEnd</ref><sp/>);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>pxHeapStats-&gt;<ref refid="structx_heap_stats_1aaaf136c838775162f7f9d8218ee0ba06" kindref="member">xSizeOfLargestFreeBlockInBytes</ref><sp/>=<sp/>xMaxSize;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>pxHeapStats-&gt;<ref refid="structx_heap_stats_1af881dc708d82b808ad78fce2cc318af7" kindref="member">xSizeOfSmallestFreeBlockInBytes</ref><sp/>=<sp/>xMinSize;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>pxHeapStats-&gt;<ref refid="structx_heap_stats_1af66da4ca5a39e1ae32edca5896e056ce" kindref="member">xNumberOfFreeBlocks</ref><sp/>=<sp/>xBlocks;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>pxHeapStats-&gt;<ref refid="structx_heap_stats_1a7641b3a1494c093b3fe92a511419e36f" kindref="member">xAvailableHeapSpaceInBytes</ref><sp/>=<sp/><ref refid="heap__4_8c_1a338244e3e604d3b290a3ef1903e97e4b" kindref="member">xFreeBytesRemaining</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>pxHeapStats-&gt;<ref refid="structx_heap_stats_1a0474041a978f26b0ac0e721689a7c8db" kindref="member">xNumberOfSuccessfulAllocations</ref><sp/>=<sp/><ref refid="heap__4_8c_1ae3227bcff0d20b136deb25d5e757fa70" kindref="member">xNumberOfSuccessfulAllocations</ref>;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>pxHeapStats-&gt;<ref refid="structx_heap_stats_1a2a11579b572a1bd744b22f418b00279d" kindref="member">xNumberOfSuccessfulFrees</ref><sp/>=<sp/><ref refid="heap__4_8c_1a5ce01319c6e92026d88fae7badbc5b71" kindref="member">xNumberOfSuccessfulFrees</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>pxHeapStats-&gt;<ref refid="structx_heap_stats_1a2ef01d960466f5cba4d61c61723118e7" kindref="member">xMinimumEverFreeBytesRemaining</ref><sp/>=<sp/><ref refid="heap__4_8c_1ae88e8dc4d81326f752232a0a39eb119f" kindref="member">xMinimumEverFreeBytesRemaining</ref>;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/portable/MemMang/heap_4.c"/>
  </compounddef>
</doxygen>
