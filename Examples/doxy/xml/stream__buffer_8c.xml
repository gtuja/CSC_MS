<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="stream__buffer_8c" kind="file" language="C++">
    <compoundname>stream_buffer.c</compoundname>
    <includes local="no">stdint.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="_free_r_t_o_s_8h" local="yes">FreeRTOS.h</includes>
    <includes refid="task_8h" local="yes">task.h</includes>
    <includes refid="stream__buffer_8h" local="yes">stream_buffer.h</includes>
    <incdepgraph>
      <node id="6">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
      </node>
      <node id="4">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>deprecated_definitions.h</label>
        <link refid="deprecated__definitions_8h"/>
      </node>
      <node id="13">
        <label>list.h</label>
        <link refid="list_8h"/>
      </node>
      <node id="11">
        <label>mpu_wrappers.h</label>
        <link refid="mpu__wrappers_8h"/>
      </node>
      <node id="8">
        <label>portable.h</label>
        <link refid="portable_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>projdefs.h</label>
        <link refid="projdefs_8h"/>
      </node>
      <node id="14">
        <label>stream_buffer.h</label>
        <link refid="stream__buffer_8h"/>
      </node>
      <node id="12">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>portmacro.h</label>
        <link refid="portmacro_8h"/>
      </node>
      <node id="1">
        <label>NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c</label>
        <link refid="stream__buffer_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="2">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_stream_buffer_def__t" prot="public">StreamBufferDef_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="stream__buffer_8c_1ab622d8c674f2a417a666a7ed89109e79" prot="public" static="no">
        <name>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="35" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="stream__buffer_8c_1a4d6a29d283acfa2d4ef576476eedc789" prot="public" static="no">
        <name>sbRECEIVE_COMPLETED</name>
        <param><defname>pxStreamBuffer</defname></param>
        <initializer>		<ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();																\
		{																				\
			if( ( pxStreamBuffer )-&gt;xTaskWaitingToSend != NULL )						\
			{																			\
				( void ) <ref refid="task_8h_1a0d2d54fb8a64011dfbb54983e4ed06bd" kindref="member">xTaskNotify</ref>( ( pxStreamBuffer )-&gt;xTaskWaitingToSend,			\
									  ( uint32_t ) 0,									\
									  <ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" kindref="member">eNoAction</ref> );										\
				( pxStreamBuffer )-&gt;xTaskWaitingToSend = NULL;							\
			}																			\
		}																				\
		( void ) <ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="57" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="57" bodyend="68"/>
        <referencedby refid="stream__buffer_8h_1a55efc144b988598d84a6087d3e20b507" compoundref="stream__buffer_8c" startline="713" endline="814">xStreamBufferReceive</referencedby>
      </memberdef>
      <memberdef kind="define" id="stream__buffer_8c_1ab72c363566113705c021596f90c6eb5a" prot="public" static="no">
        <name>sbRECEIVE_COMPLETED_FROM_ISR</name>
        <param><defname>pxStreamBuffer</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer>	{																					\
	<ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref> uxSavedInterruptStatus;													\
																						\
		uxSavedInterruptStatus = ( <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref> ) <ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();		\
		{																				\
			if( ( pxStreamBuffer )-&gt;xTaskWaitingToSend != NULL )						\
			{																			\
				( void ) <ref refid="task_8h_1a1ed9129068b96a909356bd0369c5ecb0" kindref="member">xTaskNotifyFromISR</ref>( ( pxStreamBuffer )-&gt;xTaskWaitingToSend,	\
											 ( uint32_t ) 0,							\
											 <ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" kindref="member">eNoAction</ref>,									\
											 pxHigherPriorityTaskWoken );				\
				( pxStreamBuffer )-&gt;xTaskWaitingToSend = NULL;							\
			}																			\
		}																				\
		<ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>( uxSavedInterruptStatus );					\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="73" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="72" bodyend="-1"/>
        <referencedby refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" compoundref="stream__buffer_8c" startline="861" endline="915">xStreamBufferReceiveFromISR</referencedby>
      </memberdef>
      <memberdef kind="define" id="stream__buffer_8c_1aa75273dfbcd92710254df0165ae1da5d" prot="public" static="no">
        <name>sbSEND_COMPLETED</name>
        <param><defname>pxStreamBuffer</defname></param>
        <initializer>		<ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();																\
		{																				\
			if( ( pxStreamBuffer )-&gt;xTaskWaitingToReceive != NULL )						\
			{																			\
				( void ) <ref refid="task_8h_1a0d2d54fb8a64011dfbb54983e4ed06bd" kindref="member">xTaskNotify</ref>( ( pxStreamBuffer )-&gt;xTaskWaitingToReceive,		\
									  ( uint32_t ) 0,									\
									  <ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" kindref="member">eNoAction</ref> );										\
				( pxStreamBuffer )-&gt;xTaskWaitingToReceive = NULL;						\
			}																			\
		}																				\
		( void ) <ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="96" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="96" bodyend="107"/>
        <referencedby refid="stream__buffer_8h_1a35cdf3b6bf677086b9128782f762499d" compoundref="stream__buffer_8c" startline="506" endline="607">xStreamBufferSend</referencedby>
      </memberdef>
      <memberdef kind="define" id="stream__buffer_8c_1aadd3cf567c5086402552c463c55dda7c" prot="public" static="no">
        <name>sbSEND_COMPLETE_FROM_ISR</name>
        <param><defname>pxStreamBuffer</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer>	{																					\
	<ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref> uxSavedInterruptStatus;													\
																						\
		uxSavedInterruptStatus = ( <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref> ) <ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();		\
		{																				\
			if( ( pxStreamBuffer )-&gt;xTaskWaitingToReceive != NULL )						\
			{																			\
				( void ) <ref refid="task_8h_1a1ed9129068b96a909356bd0369c5ecb0" kindref="member">xTaskNotifyFromISR</ref>( ( pxStreamBuffer )-&gt;xTaskWaitingToReceive,	\
											 ( uint32_t ) 0,							\
											 <ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" kindref="member">eNoAction</ref>,									\
											 pxHigherPriorityTaskWoken );				\
				( pxStreamBuffer )-&gt;xTaskWaitingToReceive = NULL;						\
			}																			\
		}																				\
		<ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>( uxSavedInterruptStatus );					\
	}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="111" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="111" bodyend="127"/>
        <referencedby refid="stream__buffer_8h_1a1dab226e99230e01e79bc2b5c0605e44" compoundref="stream__buffer_8c" startline="610" endline="658">xStreamBufferSendFromISR</referencedby>
      </memberdef>
      <memberdef kind="define" id="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" prot="public" static="no">
        <name>sbBYTES_TO_STORE_MESSAGE_LENGTH</name>
        <initializer>( sizeof( <ref refid="_free_r_t_o_s_config_8h_1a019c8bfcdd8eca676c7b9993bda95967" kindref="member">configMESSAGE_BUFFER_LENGTH_TYPE</ref> ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="132" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="132" bodyend="-1"/>
        <referencedby refid="stream__buffer_8c_1a1415b7e265e106aab476023f9a6cce6c" compoundref="stream__buffer_8c" startline="661" endline="710">prvWriteMessageToBuffer</referencedby>
        <referencedby refid="stream__buffer_8h_1ae393d82ee06e89692248a4381f85dc86" compoundref="stream__buffer_8c" startline="993" endline="1025">xStreamBufferIsFull</referencedby>
        <referencedby refid="stream__buffer_8h_1a9a952a2cffab91471ec2a3651e2160ec" compoundref="stream__buffer_8c" startline="817" endline="858">xStreamBufferNextMessageLengthBytes</referencedby>
        <referencedby refid="stream__buffer_8h_1a55efc144b988598d84a6087d3e20b507" compoundref="stream__buffer_8c" startline="713" endline="814">xStreamBufferReceive</referencedby>
        <referencedby refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" compoundref="stream__buffer_8c" startline="861" endline="915">xStreamBufferReceiveFromISR</referencedby>
        <referencedby refid="stream__buffer_8h_1a35cdf3b6bf677086b9128782f762499d" compoundref="stream__buffer_8c" startline="506" endline="607">xStreamBufferSend</referencedby>
        <referencedby refid="stream__buffer_8h_1a1dab226e99230e01e79bc2b5c0605e44" compoundref="stream__buffer_8c" startline="610" endline="658">xStreamBufferSendFromISR</referencedby>
      </memberdef>
      <memberdef kind="define" id="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" prot="public" static="no">
        <name>sbFLAGS_IS_MESSAGE_BUFFER</name>
        <initializer>( ( uint8_t ) 1 ) /* Set if the stream buffer was created as a message buffer, in which case it holds discrete messages rather than a stream. */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="135" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="135" bodyend="-1"/>
        <referencedby refid="stream__buffer_8c_1a1415b7e265e106aab476023f9a6cce6c" compoundref="stream__buffer_8c" startline="661" endline="710">prvWriteMessageToBuffer</referencedby>
        <referencedby refid="stream__buffer_8h_1ae393d82ee06e89692248a4381f85dc86" compoundref="stream__buffer_8c" startline="993" endline="1025">xStreamBufferIsFull</referencedby>
        <referencedby refid="stream__buffer_8h_1a9a952a2cffab91471ec2a3651e2160ec" compoundref="stream__buffer_8c" startline="817" endline="858">xStreamBufferNextMessageLengthBytes</referencedby>
        <referencedby refid="stream__buffer_8h_1a55efc144b988598d84a6087d3e20b507" compoundref="stream__buffer_8c" startline="713" endline="814">xStreamBufferReceive</referencedby>
        <referencedby refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" compoundref="stream__buffer_8c" startline="861" endline="915">xStreamBufferReceiveFromISR</referencedby>
        <referencedby refid="stream__buffer_8h_1a35cdf3b6bf677086b9128782f762499d" compoundref="stream__buffer_8c" startline="506" endline="607">xStreamBufferSend</referencedby>
        <referencedby refid="stream__buffer_8h_1a1dab226e99230e01e79bc2b5c0605e44" compoundref="stream__buffer_8c" startline="610" endline="658">xStreamBufferSendFromISR</referencedby>
      </memberdef>
      <memberdef kind="define" id="stream__buffer_8c_1a80943e49aae8a493f02d78527b3fc01e" prot="public" static="no">
        <name>sbFLAGS_IS_STATICALLY_ALLOCATED</name>
        <initializer>( ( uint8_t ) 2 ) /* Set if the stream buffer was created using statically allocated memory. */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="136" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="136" bodyend="-1"/>
        <referencedby refid="stream__buffer_8h_1a05dc9d2ae220a050526a062eddf6d7a2" compoundref="stream__buffer_8c" startline="359" endline="389">vStreamBufferDelete</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="stream__buffer_8c_1ac30372f81bb381115f91d7daa384db2d" prot="public" static="no">
        <type>struct <ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferDef_t</ref></type>
        <definition>typedef struct StreamBufferDef_t StreamBuffer_t</definition>
        <argsstring></argsstring>
        <name>StreamBuffer_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="155" column="16"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t prvBytesInBuffer</definition>
        <argsstring>(const StreamBuffer_t *const pxStreamBuffer) PRIVILEGED_FUNCTION</argsstring>
        <name>prvBytesInBuffer</name>
        <param>
          <type>const <ref refid="stream__buffer_8c_1ac30372f81bb381115f91d7daa384db2d" kindref="member">StreamBuffer_t</ref> *const</type>
          <declname>pxStreamBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="1189" column="15" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="1189" bodyend="1206" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" declline="160" declcolumn="15"/>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="struct_stream_buffer_def__t_1a75aafb9fdee8f0666837302bd9b12341" compoundref="stream__buffer_8c" startline="144">StreamBufferDef_t::xHead</references>
        <references refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" compoundref="stream__buffer_8c" startline="145">StreamBufferDef_t::xLength</references>
        <references refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" compoundref="stream__buffer_8c" startline="143">StreamBufferDef_t::xTail</references>
        <referencedby refid="stream__buffer_8h_1af32d1737de29f24ee31ac1e3c407d9fd" compoundref="stream__buffer_8c" startline="494" endline="503">xStreamBufferBytesAvailable</referencedby>
        <referencedby refid="stream__buffer_8h_1a9a952a2cffab91471ec2a3651e2160ec" compoundref="stream__buffer_8c" startline="817" endline="858">xStreamBufferNextMessageLengthBytes</referencedby>
        <referencedby refid="stream__buffer_8h_1a55efc144b988598d84a6087d3e20b507" compoundref="stream__buffer_8c" startline="713" endline="814">xStreamBufferReceive</referencedby>
        <referencedby refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" compoundref="stream__buffer_8c" startline="861" endline="915">xStreamBufferReceiveFromISR</referencedby>
        <referencedby refid="stream__buffer_8h_1a35cdf3b6bf677086b9128782f762499d" compoundref="stream__buffer_8c" startline="506" endline="607">xStreamBufferSend</referencedby>
        <referencedby refid="stream__buffer_8h_1a1dab226e99230e01e79bc2b5c0605e44" compoundref="stream__buffer_8c" startline="610" endline="658">xStreamBufferSendFromISR</referencedby>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1ab05b79124292dd7bed33fca7a92473c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t prvWriteBytesToBuffer</definition>
        <argsstring>(StreamBuffer_t *const pxStreamBuffer, const uint8_t *pucData, size_t xCount) PRIVILEGED_FUNCTION</argsstring>
        <name>prvWriteBytesToBuffer</name>
        <param>
          <type><ref refid="stream__buffer_8c_1ac30372f81bb381115f91d7daa384db2d" kindref="member">StreamBuffer_t</ref> *const</type>
          <declname>pxStreamBuffer</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>pucData</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="1088" column="15" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="1088" bodyend="1131" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" declline="168" declcolumn="15"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="_free_r_t_o_s_8h_1a101a57cef3f76ec13110cec59ce49edf" compoundref="_free_r_t_o_s_8h" startline="933">configMIN</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" compoundref="stream__buffer_8c" startline="149">StreamBufferDef_t::pucBuffer</references>
        <references refid="struct_stream_buffer_def__t_1a75aafb9fdee8f0666837302bd9b12341" compoundref="stream__buffer_8c" startline="144">StreamBufferDef_t::xHead</references>
        <references refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" compoundref="stream__buffer_8c" startline="145">StreamBufferDef_t::xLength</references>
        <referencedby refid="stream__buffer_8c_1a1415b7e265e106aab476023f9a6cce6c" compoundref="stream__buffer_8c" startline="661" endline="710">prvWriteMessageToBuffer</referencedby>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1aea486f3983538e061b22cce98612d8bc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t prvReadMessageFromBuffer</definition>
        <argsstring>(StreamBuffer_t *pxStreamBuffer, void *pvRxData, size_t xBufferLengthBytes, size_t xBytesAvailable, size_t xBytesToStoreMessageLength) PRIVILEGED_FUNCTION</argsstring>
        <name>prvReadMessageFromBuffer</name>
        <param>
          <type><ref refid="stream__buffer_8c_1ac30372f81bb381115f91d7daa384db2d" kindref="member">StreamBuffer_t</ref> *</type>
          <declname>pxStreamBuffer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pvRxData</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xBufferLengthBytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xBytesAvailable</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xBytesToStoreMessageLength</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="918" column="15" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="918" bodyend="967" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" declline="177" declcolumn="15"/>
        <references refid="_free_r_t_o_s_config_8h_1a019c8bfcdd8eca676c7b9993bda95967" compoundref="_free_r_t_o_s_config_8h" startline="84">configMESSAGE_BUFFER_LENGTH_TYPE</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="stream__buffer_8c_1a8ec163e54dc25c091dbff11c1b8f7a2c" compoundref="stream__buffer_8c" startline="1134" endline="1186">prvReadBytesFromBuffer</references>
        <references refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" compoundref="stream__buffer_8c" startline="143">StreamBufferDef_t::xTail</references>
        <referencedby refid="stream__buffer_8h_1a55efc144b988598d84a6087d3e20b507" compoundref="stream__buffer_8c" startline="713" endline="814">xStreamBufferReceive</referencedby>
        <referencedby refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" compoundref="stream__buffer_8c" startline="861" endline="915">xStreamBufferReceiveFromISR</referencedby>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a1415b7e265e106aab476023f9a6cce6c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t prvWriteMessageToBuffer</definition>
        <argsstring>(StreamBuffer_t *const pxStreamBuffer, const void *pvTxData, size_t xDataLengthBytes, size_t xSpace, size_t xRequiredSpace) PRIVILEGED_FUNCTION</argsstring>
        <name>prvWriteMessageToBuffer</name>
        <param>
          <type><ref refid="stream__buffer_8c_1ac30372f81bb381115f91d7daa384db2d" kindref="member">StreamBuffer_t</ref> *const</type>
          <declname>pxStreamBuffer</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pvTxData</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xDataLengthBytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xSpace</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xRequiredSpace</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="661" column="15" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="661" bodyend="710" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" declline="190" declcolumn="15"/>
        <references refid="_free_r_t_o_s_8h_1a101a57cef3f76ec13110cec59ce49edf" compoundref="_free_r_t_o_s_8h" startline="933">configMIN</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="stream__buffer_8c_1ab05b79124292dd7bed33fca7a92473c0" compoundref="stream__buffer_8c" startline="1088" endline="1131">prvWriteBytesToBuffer</references>
        <references refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" compoundref="stream__buffer_8c" startline="132">sbBYTES_TO_STORE_MESSAGE_LENGTH</references>
        <references refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" compoundref="stream__buffer_8c" startline="135">sbFLAGS_IS_MESSAGE_BUFFER</references>
        <references refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" compoundref="stream__buffer_8c" startline="150">StreamBufferDef_t::ucFlags</references>
        <referencedby refid="stream__buffer_8h_1a35cdf3b6bf677086b9128782f762499d" compoundref="stream__buffer_8c" startline="506" endline="607">xStreamBufferSend</referencedby>
        <referencedby refid="stream__buffer_8h_1a1dab226e99230e01e79bc2b5c0605e44" compoundref="stream__buffer_8c" startline="610" endline="658">xStreamBufferSendFromISR</referencedby>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a8ec163e54dc25c091dbff11c1b8f7a2c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>static size_t prvReadBytesFromBuffer</definition>
        <argsstring>(StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable) PRIVILEGED_FUNCTION</argsstring>
        <name>prvReadBytesFromBuffer</name>
        <param>
          <type><ref refid="stream__buffer_8c_1ac30372f81bb381115f91d7daa384db2d" kindref="member">StreamBuffer_t</ref> *</type>
          <declname>pxStreamBuffer</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>pucData</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xMaxCount</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xBytesAvailable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="1134" column="15" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="1134" bodyend="1186" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" declline="200" declcolumn="15"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="_free_r_t_o_s_8h_1a101a57cef3f76ec13110cec59ce49edf" compoundref="_free_r_t_o_s_8h" startline="933">configMIN</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" compoundref="stream__buffer_8c" startline="149">StreamBufferDef_t::pucBuffer</references>
        <references refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" compoundref="stream__buffer_8c" startline="145">StreamBufferDef_t::xLength</references>
        <references refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" compoundref="stream__buffer_8c" startline="143">StreamBufferDef_t::xTail</references>
        <referencedby refid="stream__buffer_8c_1aea486f3983538e061b22cce98612d8bc" compoundref="stream__buffer_8c" startline="918" endline="967">prvReadMessageFromBuffer</referencedby>
        <referencedby refid="stream__buffer_8h_1a9a952a2cffab91471ec2a3651e2160ec" compoundref="stream__buffer_8c" startline="817" endline="858">xStreamBufferNextMessageLengthBytes</referencedby>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a7f655ff13acb1a5614dbc7e7f43ecbb2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvInitialiseNewStreamBuffer</definition>
        <argsstring>(StreamBuffer_t *const pxStreamBuffer, uint8_t *const pucBuffer, size_t xBufferSizeBytes, size_t xTriggerLevelBytes, uint8_t ucFlags) PRIVILEGED_FUNCTION</argsstring>
        <name>prvInitialiseNewStreamBuffer</name>
        <param>
          <type><ref refid="stream__buffer_8c_1ac30372f81bb381115f91d7daa384db2d" kindref="member">StreamBuffer_t</ref> *const</type>
          <declname>pxStreamBuffer</declname>
        </param>
        <param>
          <type>uint8_t *const</type>
          <declname>pucBuffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xBufferSizeBytes</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xTriggerLevelBytes</declname>
        </param>
        <param>
          <type>uint8_t</type>
          <declname>ucFlags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="1209" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="1209" bodyend="1233" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" declline="209" declcolumn="13"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" compoundref="stream__buffer_8c" startline="149">StreamBufferDef_t::pucBuffer</references>
        <references refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" compoundref="stream__buffer_8c" startline="150">StreamBufferDef_t::ucFlags</references>
        <references refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" compoundref="stream__buffer_8c" startline="145">StreamBufferDef_t::xLength</references>
        <references refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" compoundref="stream__buffer_8c" startline="146">StreamBufferDef_t::xTriggerLevelBytes</references>
        <referencedby refid="stream__buffer_8h_1a5253429645c67902c2fc8682f8af0aac" compoundref="stream__buffer_8c" startline="392" endline="438">xStreamBufferReset</referencedby>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a7e66db41c3fd13acf3b9f814d650f77d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vStreamBufferDelete</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer)</argsstring>
        <name>vStreamBufferDelete</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="359" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="359" bodyend="389"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="stream__buffer_8c_1a80943e49aae8a493f02d78527b3fc01e" compoundref="stream__buffer_8c" startline="136">sbFLAGS_IS_STATICALLY_ALLOCATED</references>
        <references refid="_free_r_t_o_s_8h_1ae919bd00b51b396ff237bc8ec3b6b439" compoundref="_free_r_t_o_s_8h" startline="676">traceSTREAM_BUFFER_DELETE</references>
        <references refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" compoundref="stream__buffer_8c" startline="150">StreamBufferDef_t::ucFlags</references>
        <references refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" compoundref="heap__4_8c" startline="266" endline="312">vPortFree</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a05ed4d42963aa4aaf50e49700d44659c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xStreamBufferReset</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer)</argsstring>
        <name>xStreamBufferReset</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="392" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="392" bodyend="438"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" compoundref="projdefs_8h" startline="48">pdFAIL</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="stream__buffer_8c_1a7f655ff13acb1a5614dbc7e7f43ecbb2" compoundref="stream__buffer_8c" startline="1209" endline="1233">prvInitialiseNewStreamBuffer</references>
        <references refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" compoundref="stream__buffer_8c" startline="149">StreamBufferDef_t::pucBuffer</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="_free_r_t_o_s_8h_1a2ef92acbaa66efdb85be7f8256fe91ba" compoundref="_free_r_t_o_s_8h" startline="680">traceSTREAM_BUFFER_RESET</references>
        <references refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" compoundref="stream__buffer_8c" startline="150">StreamBufferDef_t::ucFlags</references>
        <references refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" compoundref="stream__buffer_8c" startline="145">StreamBufferDef_t::xLength</references>
        <references refid="struct_stream_buffer_def__t_1a8377ae8625121efa22d66e678add4057" compoundref="stream__buffer_8c" startline="147">StreamBufferDef_t::xTaskWaitingToReceive</references>
        <references refid="struct_stream_buffer_def__t_1a85b1cf05c0222f8d67a64f7d01722e52" compoundref="stream__buffer_8c" startline="148">StreamBufferDef_t::xTaskWaitingToSend</references>
        <references refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" compoundref="stream__buffer_8c" startline="146">StreamBufferDef_t::xTriggerLevelBytes</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a375b92e87b73351a6a30c8a2ba7d2ce0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xStreamBufferSetTriggerLevel</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer, size_t xTriggerLevel)</argsstring>
        <name>xStreamBufferSetTriggerLevel</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xTriggerLevel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="441" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="441" bodyend="467"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" compoundref="stream__buffer_8c" startline="146">StreamBufferDef_t::xTriggerLevelBytes</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a8fb90892c74eb94fb063b2a018a10509" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xStreamBufferSpacesAvailable</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer)</argsstring>
        <name>xStreamBufferSpacesAvailable</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="470" column="8" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="470" bodyend="491"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="struct_stream_buffer_def__t_1a75aafb9fdee8f0666837302bd9b12341" compoundref="stream__buffer_8c" startline="144">StreamBufferDef_t::xHead</references>
        <references refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" compoundref="stream__buffer_8c" startline="145">StreamBufferDef_t::xLength</references>
        <references refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" compoundref="stream__buffer_8c" startline="143">StreamBufferDef_t::xTail</references>
        <referencedby refid="stream__buffer_8h_1ae393d82ee06e89692248a4381f85dc86" compoundref="stream__buffer_8c" startline="993" endline="1025">xStreamBufferIsFull</referencedby>
        <referencedby refid="stream__buffer_8h_1a35cdf3b6bf677086b9128782f762499d" compoundref="stream__buffer_8c" startline="506" endline="607">xStreamBufferSend</referencedby>
        <referencedby refid="stream__buffer_8h_1a1dab226e99230e01e79bc2b5c0605e44" compoundref="stream__buffer_8c" startline="610" endline="658">xStreamBufferSendFromISR</referencedby>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a5c473cb971d8a20b0528a1abc890833c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xStreamBufferBytesAvailable</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer)</argsstring>
        <name>xStreamBufferBytesAvailable</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="494" column="8" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="494" bodyend="503"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" compoundref="stream__buffer_8c" startline="1189" endline="1206">prvBytesInBuffer</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1adf807ecf262fcd5df2584d5d3e6ed6c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xStreamBufferSend</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer, const void *pvTxData, size_t xDataLengthBytes, TickType_t xTicksToWait)</argsstring>
        <name>xStreamBufferSend</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pvTxData</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xDataLengthBytes</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="506" column="8" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="506" bodyend="607"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" compoundref="stream__buffer_8c" startline="1189" endline="1206">prvBytesInBuffer</references>
        <references refid="stream__buffer_8c_1a1415b7e265e106aab476023f9a6cce6c" compoundref="stream__buffer_8c" startline="661" endline="710">prvWriteMessageToBuffer</references>
        <references refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" compoundref="stream__buffer_8c" startline="132">sbBYTES_TO_STORE_MESSAGE_LENGTH</references>
        <references refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" compoundref="stream__buffer_8c" startline="135">sbFLAGS_IS_MESSAGE_BUFFER</references>
        <references refid="stream__buffer_8c_1aa75273dfbcd92710254df0165ae1da5d" compoundref="stream__buffer_8c" startline="96" endline="107">sbSEND_COMPLETED</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="_free_r_t_o_s_8h_1a5788bf0db92eda90675aa5f3caa42eeb" compoundref="_free_r_t_o_s_8h" startline="684">traceBLOCKING_ON_STREAM_BUFFER_SEND</references>
        <references refid="_free_r_t_o_s_8h_1a4f4fc6954ae7c5b8a4819f70afd37c1f" compoundref="_free_r_t_o_s_8h" startline="688">traceSTREAM_BUFFER_SEND</references>
        <references refid="_free_r_t_o_s_8h_1a527e8f19c9b9b339985c2b8e47bff02a" compoundref="_free_r_t_o_s_8h" startline="692">traceSTREAM_BUFFER_SEND_FAILED</references>
        <references refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" compoundref="stream__buffer_8c" startline="150">StreamBufferDef_t::ucFlags</references>
        <references refid="task_8h_1a67155ad4ea2482b5f4597a69f2152be0" compoundref="tasks_8c" startline="3253" endline="3262">vTaskSetTimeOutState</references>
        <references refid="stream__buffer_8c_1a8fb90892c74eb94fb063b2a018a10509" compoundref="stream__buffer_8c" startline="470" endline="491">xStreamBufferSpacesAvailable</references>
        <references refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" compoundref="tasks_8c" startline="3273" endline="3333">xTaskCheckForTimeOut</references>
        <references refid="task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc">xTaskGetCurrentTaskHandle</references>
        <references refid="task_8h_1a4cb6c908a9d2d733e9d519d7dc27bb34">xTaskNotifyStateClear</references>
        <references refid="task_8h_1a0475fcda9718f403521c270a7270ff93">xTaskNotifyWait</references>
        <references refid="struct_stream_buffer_def__t_1a85b1cf05c0222f8d67a64f7d01722e52" compoundref="stream__buffer_8c" startline="148">StreamBufferDef_t::xTaskWaitingToSend</references>
        <references refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" compoundref="stream__buffer_8c" startline="146">StreamBufferDef_t::xTriggerLevelBytes</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a3072d8c5cedf79a72550da051a0866b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xStreamBufferSendFromISR</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer, const void *pvTxData, size_t xDataLengthBytes, BaseType_t *const pxHigherPriorityTaskWoken)</argsstring>
        <name>xStreamBufferSendFromISR</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>pvTxData</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xDataLengthBytes</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref> *const</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="610" column="8" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="610" bodyend="658"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" compoundref="stream__buffer_8c" startline="1189" endline="1206">prvBytesInBuffer</references>
        <references refid="stream__buffer_8c_1a1415b7e265e106aab476023f9a6cce6c" compoundref="stream__buffer_8c" startline="661" endline="710">prvWriteMessageToBuffer</references>
        <references refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" compoundref="stream__buffer_8c" startline="132">sbBYTES_TO_STORE_MESSAGE_LENGTH</references>
        <references refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" compoundref="stream__buffer_8c" startline="135">sbFLAGS_IS_MESSAGE_BUFFER</references>
        <references refid="stream__buffer_8c_1aadd3cf567c5086402552c463c55dda7c" compoundref="stream__buffer_8c" startline="111" endline="127">sbSEND_COMPLETE_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1ab79a8d87f1c865b1a76af02932b3dda6" compoundref="_free_r_t_o_s_8h" startline="696">traceSTREAM_BUFFER_SEND_FROM_ISR</references>
        <references refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" compoundref="stream__buffer_8c" startline="150">StreamBufferDef_t::ucFlags</references>
        <references refid="stream__buffer_8c_1a8fb90892c74eb94fb063b2a018a10509" compoundref="stream__buffer_8c" startline="470" endline="491">xStreamBufferSpacesAvailable</references>
        <references refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" compoundref="stream__buffer_8c" startline="146">StreamBufferDef_t::xTriggerLevelBytes</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1afcfcf6f4bc80ec5e31e5e1f8093cacac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xStreamBufferReceive</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer, void *pvRxData, size_t xBufferLengthBytes, TickType_t xTicksToWait)</argsstring>
        <name>xStreamBufferReceive</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pvRxData</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xBufferLengthBytes</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="713" column="8" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="713" bodyend="814"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" compoundref="stream__buffer_8c" startline="1189" endline="1206">prvBytesInBuffer</references>
        <references refid="stream__buffer_8c_1aea486f3983538e061b22cce98612d8bc" compoundref="stream__buffer_8c" startline="918" endline="967">prvReadMessageFromBuffer</references>
        <references refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" compoundref="stream__buffer_8c" startline="132">sbBYTES_TO_STORE_MESSAGE_LENGTH</references>
        <references refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" compoundref="stream__buffer_8c" startline="135">sbFLAGS_IS_MESSAGE_BUFFER</references>
        <references refid="stream__buffer_8c_1a4d6a29d283acfa2d4ef576476eedc789" compoundref="stream__buffer_8c" startline="57" endline="68">sbRECEIVE_COMPLETED</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="_free_r_t_o_s_8h_1a80419264672cb0ddd2b865048483b537" compoundref="_free_r_t_o_s_8h" startline="700">traceBLOCKING_ON_STREAM_BUFFER_RECEIVE</references>
        <references refid="_free_r_t_o_s_8h_1a6ecefd3df93cb11986cca1b41f215138" compoundref="_free_r_t_o_s_8h" startline="704">traceSTREAM_BUFFER_RECEIVE</references>
        <references refid="_free_r_t_o_s_8h_1a57e5d8ccc74dd8e04bd3a8534de79bb4" compoundref="_free_r_t_o_s_8h" startline="708">traceSTREAM_BUFFER_RECEIVE_FAILED</references>
        <references refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" compoundref="stream__buffer_8c" startline="150">StreamBufferDef_t::ucFlags</references>
        <references refid="task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc">xTaskGetCurrentTaskHandle</references>
        <references refid="task_8h_1a4cb6c908a9d2d733e9d519d7dc27bb34">xTaskNotifyStateClear</references>
        <references refid="task_8h_1a0475fcda9718f403521c270a7270ff93">xTaskNotifyWait</references>
        <references refid="struct_stream_buffer_def__t_1a8377ae8625121efa22d66e678add4057" compoundref="stream__buffer_8c" startline="147">StreamBufferDef_t::xTaskWaitingToReceive</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1afe4f32e931b684bc32189f086e5ec41c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xStreamBufferNextMessageLengthBytes</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer)</argsstring>
        <name>xStreamBufferNextMessageLengthBytes</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="817" column="8" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="817" bodyend="858"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="_free_r_t_o_s_config_8h_1a019c8bfcdd8eca676c7b9993bda95967" compoundref="_free_r_t_o_s_config_8h" startline="84">configMESSAGE_BUFFER_LENGTH_TYPE</references>
        <references refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" compoundref="stream__buffer_8c" startline="1189" endline="1206">prvBytesInBuffer</references>
        <references refid="stream__buffer_8c_1a8ec163e54dc25c091dbff11c1b8f7a2c" compoundref="stream__buffer_8c" startline="1134" endline="1186">prvReadBytesFromBuffer</references>
        <references refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" compoundref="stream__buffer_8c" startline="132">sbBYTES_TO_STORE_MESSAGE_LENGTH</references>
        <references refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" compoundref="stream__buffer_8c" startline="135">sbFLAGS_IS_MESSAGE_BUFFER</references>
        <references refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" compoundref="stream__buffer_8c" startline="150">StreamBufferDef_t::ucFlags</references>
        <references refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" compoundref="stream__buffer_8c" startline="143">StreamBufferDef_t::xTail</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a06c67a59495190f8359322184fe0462b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t xStreamBufferReceiveFromISR</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer, void *pvRxData, size_t xBufferLengthBytes, BaseType_t *const pxHigherPriorityTaskWoken)</argsstring>
        <name>xStreamBufferReceiveFromISR</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>pvRxData</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>xBufferLengthBytes</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref> *const</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="861" column="8" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="861" bodyend="915"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" compoundref="stream__buffer_8c" startline="1189" endline="1206">prvBytesInBuffer</references>
        <references refid="stream__buffer_8c_1aea486f3983538e061b22cce98612d8bc" compoundref="stream__buffer_8c" startline="918" endline="967">prvReadMessageFromBuffer</references>
        <references refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" compoundref="stream__buffer_8c" startline="132">sbBYTES_TO_STORE_MESSAGE_LENGTH</references>
        <references refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" compoundref="stream__buffer_8c" startline="135">sbFLAGS_IS_MESSAGE_BUFFER</references>
        <references refid="stream__buffer_8c_1ab72c363566113705c021596f90c6eb5a" compoundref="stream__buffer_8c" startline="72">sbRECEIVE_COMPLETED_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a30fe3a49605cf2c232d190e4f6565a0d" compoundref="_free_r_t_o_s_8h" startline="712">traceSTREAM_BUFFER_RECEIVE_FROM_ISR</references>
        <references refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" compoundref="stream__buffer_8c" startline="150">StreamBufferDef_t::ucFlags</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a95465cd3702e3eae08afb8e69e1c6525" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xStreamBufferIsEmpty</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer)</argsstring>
        <name>xStreamBufferIsEmpty</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="970" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="970" bodyend="990"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="struct_stream_buffer_def__t_1a75aafb9fdee8f0666837302bd9b12341" compoundref="stream__buffer_8c" startline="144">StreamBufferDef_t::xHead</references>
        <references refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" compoundref="stream__buffer_8c" startline="143">StreamBufferDef_t::xTail</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a77c2ae33c45c948e7af4d61fdd6cf1f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xStreamBufferIsFull</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer)</argsstring>
        <name>xStreamBufferIsFull</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="993" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="993" bodyend="1025"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" compoundref="stream__buffer_8c" startline="132">sbBYTES_TO_STORE_MESSAGE_LENGTH</references>
        <references refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" compoundref="stream__buffer_8c" startline="135">sbFLAGS_IS_MESSAGE_BUFFER</references>
        <references refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" compoundref="stream__buffer_8c" startline="150">StreamBufferDef_t::ucFlags</references>
        <references refid="stream__buffer_8c_1a8fb90892c74eb94fb063b2a018a10509" compoundref="stream__buffer_8c" startline="470" endline="491">xStreamBufferSpacesAvailable</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1a734bf1bcef16810abb6d53781b8f1f07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xStreamBufferSendCompletedFromISR</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken)</argsstring>
        <name>xStreamBufferSendCompletedFromISR</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref> *</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="1028" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="1028" bodyend="1055"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" compoundref="task_8h" startline="92">eNoAction</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" compoundref="_free_r_t_o_s_8h" startline="286">portCLEAR_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" compoundref="_free_r_t_o_s_8h" startline="282">portSET_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="task_8h_1a1ed9129068b96a909356bd0369c5ecb0" compoundref="task_8h" startline="1945">xTaskNotifyFromISR</references>
      </memberdef>
      <memberdef kind="function" id="stream__buffer_8c_1adbcf08da91cb0b9c179d012e0c99237d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xStreamBufferReceiveCompletedFromISR</definition>
        <argsstring>(StreamBufferHandle_t xStreamBuffer, BaseType_t *pxHigherPriorityTaskWoken)</argsstring>
        <name>xStreamBufferReceiveCompletedFromISR</name>
        <param>
          <type><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref></type>
          <declname>xStreamBuffer</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref> *</type>
          <declname>pxHigherPriorityTaskWoken</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" line="1058" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c" bodystart="1058" bodyend="1085"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" compoundref="task_8h" startline="92">eNoAction</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" compoundref="_free_r_t_o_s_8h" startline="286">portCLEAR_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" compoundref="_free_r_t_o_s_8h" startline="282">portSET_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="task_8h_1a1ed9129068b96a909356bd0369c5ecb0" compoundref="task_8h" startline="1945">xTaskNotifyFromISR</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>FreeRTOS<sp/>Kernel<sp/>V10.3.1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020<sp/>Amazon.com,<sp/>Inc.<sp/>or<sp/>its<sp/>affiliates.<sp/><sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>http://www.FreeRTOS.org</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>http://aws.amazon.com/freertos</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>1<sp/>tab<sp/>==<sp/>4<sp/>spaces!</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Standard<sp/>includes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Defining<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/>prevents<sp/>task.h<sp/>from<sp/>redefining</highlight></codeline>
<codeline lineno="33"><highlight class="comment">all<sp/>the<sp/>API<sp/>functions<sp/>to<sp/>use<sp/>the<sp/>MPU<sp/>wrappers.<sp/><sp/>That<sp/>should<sp/>only<sp/>be<sp/>done<sp/>when</highlight></codeline>
<codeline lineno="34"><highlight class="comment">task.h<sp/>is<sp/>included<sp/>from<sp/>an<sp/>application<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="stream__buffer_8c_1ab622d8c674f2a417a666a7ed89109e79" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FreeRTOS<sp/>includes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_free_r_t_o_s_8h" kindref="compound">FreeRTOS.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="task_8h" kindref="compound">task.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stream__buffer_8h" kindref="compound">stream_buffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>!=<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>configUSE_TASK_NOTIFICATIONS<sp/>must<sp/>be<sp/>set<sp/>to<sp/>1<sp/>to<sp/>build<sp/>stream_buffer.c</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Lint<sp/>e961,<sp/>e9021<sp/>and<sp/>e750<sp/>are<sp/>suppressed<sp/>as<sp/>a<sp/>MISRA<sp/>exception<sp/>justified</highlight></codeline>
<codeline lineno="47"><highlight class="comment">because<sp/>the<sp/>MPU<sp/>ports<sp/>require<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/>to<sp/>be<sp/>defined</highlight></codeline>
<codeline lineno="48"><highlight class="comment">for<sp/>the<sp/>header<sp/>files<sp/>above,<sp/>but<sp/>not<sp/>in<sp/>this<sp/>file,<sp/>in<sp/>order<sp/>to<sp/>generate<sp/>the</highlight></codeline>
<codeline lineno="49"><highlight class="comment">correct<sp/>privileged<sp/>Vs<sp/>unprivileged<sp/>linkage<sp/>and<sp/>placement.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>!e750<sp/>!e9021.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>user<sp/>has<sp/>not<sp/>provided<sp/>application<sp/>specific<sp/>Rx<sp/>notification<sp/>macros,</highlight></codeline>
<codeline lineno="53"><highlight class="comment">or<sp/>#defined<sp/>the<sp/>notification<sp/>macros<sp/>away,<sp/>them<sp/>provide<sp/>default<sp/>implementations</highlight></codeline>
<codeline lineno="54"><highlight class="comment">that<sp/>uses<sp/>task<sp/>notifications.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">/*lint<sp/>-save<sp/>-e9026<sp/>Function<sp/>like<sp/>macros<sp/>allowed<sp/>and<sp/>needed<sp/>here<sp/>so<sp/>they<sp/>can<sp/>be<sp/>overidden.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>sbRECEIVE_COMPLETED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="stream__buffer_8c_1a4d6a29d283acfa2d4ef576476eedc789" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>sbRECEIVE_COMPLETED(<sp/>pxStreamBuffer<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vTaskSuspendAll();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToSend<sp/>!=<sp/>NULL<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>xTaskNotify(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToSend,<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>uint32_t<sp/>)<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eNoAction<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToSend<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>xTaskResumeAll();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>sbRECEIVE_COMPLETED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>sbRECEIVE_COMPLETED_FROM_ISR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="stream__buffer_8c_1ab72c363566113705c021596f90c6eb5a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>sbRECEIVE_COMPLETED_FROM_ISR(<sp/>pxStreamBuffer,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxHigherPriorityTaskWoken<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/>UBaseType_t<sp/>uxSavedInterruptStatus;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="77"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/>(<sp/>UBaseType_t<sp/>)<sp/>portSET_INTERRUPT_MASK_FROM_ISR();<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToSend<sp/>!=<sp/>NULL<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>xTaskNotifyFromISR(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToSend,<sp/><sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>uint32_t<sp/>)<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="83"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eNoAction,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="84"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxHigherPriorityTaskWoken<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="85"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToSend<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="86"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="87"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="88"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>portCLEAR_INTERRUPT_MASK_FROM_ISR(<sp/>uxSavedInterruptStatus<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="89"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>sbRECEIVE_COMPLETED_FROM_ISR<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>user<sp/>has<sp/>not<sp/>provided<sp/>an<sp/>application<sp/>specific<sp/>Tx<sp/>notification<sp/>macro,</highlight></codeline>
<codeline lineno="93"><highlight class="comment">or<sp/>#defined<sp/>the<sp/>notification<sp/>macro<sp/>away,<sp/>them<sp/>provide<sp/>a<sp/>default<sp/>implementation</highlight></codeline>
<codeline lineno="94"><highlight class="comment">that<sp/>uses<sp/>task<sp/>notifications.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>sbSEND_COMPLETED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="stream__buffer_8c_1aa75273dfbcd92710254df0165ae1da5d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>sbSEND_COMPLETED(<sp/>pxStreamBuffer<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>vTaskSuspendAll();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="98"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToReceive<sp/>!=<sp/>NULL<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>xTaskNotify(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToReceive,<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>uint32_t<sp/>)<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eNoAction<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToReceive<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>xTaskResumeAll();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>sbSEND_COMPLETED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>sbSEND_COMPLETE_FROM_ISR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="stream__buffer_8c_1aadd3cf567c5086402552c463c55dda7c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>sbSEND_COMPLETE_FROM_ISR(<sp/>pxStreamBuffer,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/>UBaseType_t<sp/>uxSavedInterruptStatus;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/>(<sp/>UBaseType_t<sp/>)<sp/>portSET_INTERRUPT_MASK_FROM_ISR();<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToReceive<sp/>!=<sp/>NULL<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>xTaskNotifyFromISR(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToReceive,<sp/>\</highlight></codeline>
<codeline lineno="120"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>uint32_t<sp/>)<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eNoAction,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxHigherPriorityTaskWoken<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="123"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToReceive<sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>portCLEAR_INTERRUPT_MASK_FROM_ISR(<sp/>uxSavedInterruptStatus<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>sbSEND_COMPLETE_FROM_ISR<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">/*lint<sp/>-restore<sp/>(9026)<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>number<sp/>of<sp/>bytes<sp/>used<sp/>to<sp/>hold<sp/>the<sp/>length<sp/>of<sp/>a<sp/>message<sp/>in<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sbBYTES_TO_STORE_MESSAGE_LENGTH<sp/>(<sp/>sizeof(<sp/>configMESSAGE_BUFFER_LENGTH_TYPE<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Bits<sp/>stored<sp/>in<sp/>the<sp/>ucFlags<sp/>field<sp/>of<sp/>the<sp/>stream<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sbFLAGS_IS_MESSAGE_BUFFER<sp/><sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>1<sp/>)<sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>if<sp/>the<sp/>stream<sp/>buffer<sp/>was<sp/>created<sp/>as<sp/>a<sp/>message<sp/>buffer,<sp/>in<sp/>which<sp/>case<sp/>it<sp/>holds<sp/>discrete<sp/>messages<sp/>rather<sp/>than<sp/>a<sp/>stream.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="stream__buffer_8c_1a80943e49aae8a493f02d78527b3fc01e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>sbFLAGS_IS_STATICALLY_ALLOCATED<sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>2<sp/>)<sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>if<sp/>the<sp/>stream<sp/>buffer<sp/>was<sp/>created<sp/>using<sp/>statically<sp/>allocated<sp/>memory.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Structure<sp/>that<sp/>hold<sp/>state<sp/>information<sp/>on<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="struct_stream_buffer_def__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferDef_t</ref><sp/></highlight><highlight class="comment">/*lint<sp/>!e9058<sp/>Style<sp/>convention<sp/>uses<sp/>tag.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">{</highlight></codeline>
<codeline lineno="143" refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" kindref="member">xTail</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>to<sp/>the<sp/>next<sp/>item<sp/>to<sp/>read<sp/>within<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="struct_stream_buffer_def__t_1a75aafb9fdee8f0666837302bd9b12341" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_stream_buffer_def__t_1a75aafb9fdee8f0666837302bd9b12341" kindref="member">xHead</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Index<sp/>to<sp/>the<sp/>next<sp/>item<sp/>to<sp/>write<sp/>within<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145" refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>length<sp/>of<sp/>the<sp/>buffer<sp/>pointed<sp/>to<sp/>by<sp/>pucBuffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" kindref="member">xTriggerLevelBytes</ref>;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>number<sp/>of<sp/>bytes<sp/>that<sp/>must<sp/>be<sp/>in<sp/>the<sp/>stream<sp/>buffer<sp/>before<sp/>a<sp/>task<sp/>that<sp/>is<sp/>waiting<sp/>for<sp/>data<sp/>is<sp/>unblocked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="struct_stream_buffer_def__t_1a8377ae8625121efa22d66e678add4057" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/><ref refid="struct_stream_buffer_def__t_1a8377ae8625121efa22d66e678add4057" kindref="member">xTaskWaitingToReceive</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Holds<sp/>the<sp/>handle<sp/>of<sp/>a<sp/>task<sp/>waiting<sp/>for<sp/>data,<sp/>or<sp/>NULL<sp/>if<sp/>no<sp/>tasks<sp/>are<sp/>waiting.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="struct_stream_buffer_def__t_1a85b1cf05c0222f8d67a64f7d01722e52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/><ref refid="struct_stream_buffer_def__t_1a85b1cf05c0222f8d67a64f7d01722e52" kindref="member">xTaskWaitingToSend</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Holds<sp/>the<sp/>handle<sp/>of<sp/>a<sp/>task<sp/>waiting<sp/>to<sp/>send<sp/>data<sp/>to<sp/>a<sp/>message<sp/>buffer<sp/>that<sp/>is<sp/>full.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149" refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" refkind="member"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*<ref refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" kindref="member">pucBuffer</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Points<sp/>to<sp/>the<sp/>buffer<sp/>itself<sp/>-<sp/>that<sp/>is<sp/>-<sp/>the<sp/>RAM<sp/>that<sp/>stores<sp/>the<sp/>data<sp/>passed<sp/>through<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" refkind="member"><highlight class="normal"><sp/><sp/>uint8_t<sp/><ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxStreamBufferNumber;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Used<sp/>for<sp/>tracing<sp/>purposes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="stream__buffer_8c_1ac30372f81bb381115f91d7daa384db2d" refkind="member"><highlight class="normal">}<sp/><ref refid="stream__buffer_8c_1ac30372f81bb381115f91d7daa384db2d" kindref="member">StreamBuffer_t</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/>*<sp/>The<sp/>number<sp/>of<sp/>bytes<sp/>available<sp/>to<sp/>be<sp/>read<sp/>from<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" kindref="member">prvBytesInBuffer</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="163"><highlight class="comment"><sp/>*<sp/>Add<sp/>xCount<sp/>bytes<sp/>from<sp/>pucData<sp/>into<sp/>the<sp/>pxStreamBuffer<sp/>message<sp/>buffer.</highlight></codeline>
<codeline lineno="164"><highlight class="comment"><sp/>*<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>written,<sp/>which<sp/>will<sp/>either<sp/>equal<sp/>xCount<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="165"><highlight class="comment"><sp/>*<sp/>success<sp/>case,<sp/>or<sp/>0<sp/>if<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>space<sp/>in<sp/>the<sp/>buffer<sp/>(in<sp/>which<sp/>case</highlight></codeline>
<codeline lineno="166"><highlight class="comment"><sp/>*<sp/>no<sp/>data<sp/>is<sp/>written<sp/>into<sp/>the<sp/>buffer).</highlight></codeline>
<codeline lineno="167"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1ab05b79124292dd7bed33fca7a92473c0" kindref="member">prvWriteBytesToBuffer</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*pucData,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xCount<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>stream<sp/>buffer<sp/>is<sp/>being<sp/>used<sp/>as<sp/>a<sp/>message<sp/>buffer,<sp/>then<sp/>reads<sp/>an<sp/>entire</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/>*<sp/>message<sp/>out<sp/>of<sp/>the<sp/>buffer.<sp/><sp/>If<sp/>the<sp/>stream<sp/>buffer<sp/>is<sp/>being<sp/>used<sp/>as<sp/>a<sp/>stream</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/>*<sp/>buffer<sp/>then<sp/>read<sp/>as<sp/>many<sp/>bytes<sp/>as<sp/>possible<sp/>from<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="174"><highlight class="comment"><sp/>*<sp/>prvReadBytesFromBuffer()<sp/>is<sp/>called<sp/>to<sp/>actually<sp/>extract<sp/>the<sp/>bytes<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="175"><highlight class="comment"><sp/>*<sp/>buffer&apos;s<sp/>data<sp/>storage<sp/>area.</highlight></codeline>
<codeline lineno="176"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1aea486f3983538e061b22cce98612d8bc" kindref="member">prvReadMessageFromBuffer</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*pxStreamBuffer,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvRxData,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBufferLengthBytes,</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBytesAvailable,</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBytesToStoreMessageLength<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="184"><highlight class="comment"><sp/>*<sp/>If<sp/>the<sp/>stream<sp/>buffer<sp/>is<sp/>being<sp/>used<sp/>as<sp/>a<sp/>message<sp/>buffer,<sp/>then<sp/>writes<sp/>an<sp/>entire</highlight></codeline>
<codeline lineno="185"><highlight class="comment"><sp/>*<sp/>message<sp/>to<sp/>the<sp/>buffer.<sp/><sp/>If<sp/>the<sp/>stream<sp/>buffer<sp/>is<sp/>being<sp/>used<sp/>as<sp/>a<sp/>stream</highlight></codeline>
<codeline lineno="186"><highlight class="comment"><sp/>*<sp/>buffer<sp/>then<sp/>write<sp/>as<sp/>many<sp/>bytes<sp/>as<sp/>possible<sp/>to<sp/>the<sp/>buffer.</highlight></codeline>
<codeline lineno="187"><highlight class="comment"><sp/>*<sp/>prvWriteBytestoBuffer()<sp/>is<sp/>called<sp/>to<sp/>actually<sp/>send<sp/>the<sp/>bytes<sp/>to<sp/>the<sp/>buffer&apos;s</highlight></codeline>
<codeline lineno="188"><highlight class="comment"><sp/>*<sp/>data<sp/>storage<sp/>area.</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1a1415b7e265e106aab476023f9a6cce6c" kindref="member">prvWriteMessageToBuffer</ref>(<sp/><sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>pvTxData,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xDataLengthBytes,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xSpace,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xRequiredSpace<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="197"><highlight class="comment"><sp/>*<sp/>Read<sp/>xMaxCount<sp/>bytes<sp/>from<sp/>the<sp/>pxStreamBuffer<sp/>message<sp/>buffer<sp/>and<sp/>write<sp/>them</highlight></codeline>
<codeline lineno="198"><highlight class="comment"><sp/>*<sp/>to<sp/>pucData.</highlight></codeline>
<codeline lineno="199"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1a8ec163e54dc25c091dbff11c1b8f7a2c" kindref="member">prvReadBytesFromBuffer</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*pxStreamBuffer,</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*pucData,</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xMaxCount,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBytesAvailable<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="206"><highlight class="comment"><sp/>*<sp/>Called<sp/>by<sp/>both<sp/>pxStreamBufferCreate()<sp/>and<sp/>pxStreamBufferCreateStatic()<sp/>to</highlight></codeline>
<codeline lineno="207"><highlight class="comment"><sp/>*<sp/>initialise<sp/>the<sp/>members<sp/>of<sp/>the<sp/>newly<sp/>created<sp/>stream<sp/>buffer<sp/>structure.</highlight></codeline>
<codeline lineno="208"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1a7f655ff13acb1a5614dbc7e7f43ecbb2" kindref="member">prvInitialiseNewStreamBuffer</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pucBuffer,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBufferSizeBytes,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xTriggerLevelBytes,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ucFlags<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/><ref refid="stream__buffer_8h_1a7a613c6fa11323c871ce7991db214096" kindref="member">xStreamBufferGenericCreate</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBufferSizeBytes,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xTriggerLevelBytes,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xIsMessageBuffer<sp/>)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*pucAllocatedMemory;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/>uint8_t<sp/>ucFlags;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>the<sp/>stream<sp/>buffer<sp/>is<sp/>going<sp/>to<sp/>be<sp/>used<sp/>as<sp/>a<sp/>message<sp/>buffer</highlight></codeline>
<codeline lineno="225"><highlight class="comment"><sp/><sp/><sp/><sp/>(that<sp/>is,<sp/>it<sp/>will<sp/>hold<sp/>discrete<sp/>messages<sp/>with<sp/>a<sp/>little<sp/>meta<sp/>data<sp/>that</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/><sp/><sp/><sp/>says<sp/>how<sp/>big<sp/>the<sp/>next<sp/>message<sp/>is)<sp/>check<sp/>the<sp/>buffer<sp/>will<sp/>be<sp/>large<sp/>enough</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>hold<sp/>at<sp/>least<sp/>one<sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xIsMessageBuffer<sp/>==<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref><sp/>)</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>a<sp/>message<sp/>buffer<sp/>but<sp/>not<sp/>statically<sp/>allocated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucFlags<sp/>=<sp/><ref refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" kindref="member">sbFLAGS_IS_MESSAGE_BUFFER</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xBufferSizeBytes<sp/>&gt;<sp/><ref refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" kindref="member">sbBYTES_TO_STORE_MESSAGE_LENGTH</ref><sp/>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Not<sp/>a<sp/>message<sp/>buffer<sp/>and<sp/>not<sp/>statically<sp/>allocated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucFlags<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xBufferSizeBytes<sp/>&gt;<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xTriggerLevelBytes<sp/>&lt;=<sp/>xBufferSizeBytes<sp/>);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>trigger<sp/>level<sp/>of<sp/>0<sp/>would<sp/>cause<sp/>a<sp/>waiting<sp/>task<sp/>to<sp/>unblock<sp/>even<sp/>when</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>buffer<sp/>was<sp/>empty.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTriggerLevelBytes<sp/>==<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTriggerLevelBytes<sp/>=<sp/>(<sp/>size_t<sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>stream<sp/>buffer<sp/>requires<sp/>a<sp/>StreamBuffer_t<sp/>structure<sp/>and<sp/>a<sp/>buffer.</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/><sp/><sp/><sp/>Both<sp/>are<sp/>allocated<sp/>in<sp/>a<sp/>single<sp/>call<sp/>to<sp/>pvPortMalloc().<sp/><sp/>The</highlight></codeline>
<codeline lineno="251"><highlight class="comment"><sp/><sp/><sp/><sp/>StreamBuffer_t<sp/>structure<sp/>is<sp/>placed<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>allocated<sp/>memory</highlight></codeline>
<codeline lineno="252"><highlight class="comment"><sp/><sp/><sp/><sp/>and<sp/>the<sp/>buffer<sp/>follows<sp/>immediately<sp/>after.<sp/><sp/>The<sp/>requested<sp/>size<sp/>is</highlight></codeline>
<codeline lineno="253"><highlight class="comment"><sp/><sp/><sp/><sp/>incremented<sp/>so<sp/>the<sp/>free<sp/>space<sp/>is<sp/>returned<sp/>as<sp/>the<sp/>user<sp/>would<sp/>expect<sp/>-</highlight></codeline>
<codeline lineno="254"><highlight class="comment"><sp/><sp/><sp/><sp/>this<sp/>is<sp/>a<sp/>quirk<sp/>of<sp/>the<sp/>implementation<sp/>that<sp/>means<sp/>otherwise<sp/>the<sp/>free</highlight></codeline>
<codeline lineno="255"><highlight class="comment"><sp/><sp/><sp/><sp/>space<sp/>would<sp/>be<sp/>reported<sp/>as<sp/>one<sp/>byte<sp/>smaller<sp/>than<sp/>would<sp/>be<sp/>logically</highlight></codeline>
<codeline lineno="256"><highlight class="comment"><sp/><sp/><sp/><sp/>expected.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>xBufferSizeBytes++;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>pucAllocatedMemory<sp/>=<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/><ref refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" kindref="member">pvPortMalloc</ref>(<sp/>xBufferSizeBytes<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>malloc()<sp/>only<sp/>returns<sp/>void*.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pucAllocatedMemory<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stream__buffer_8c_1a7f655ff13acb1a5614dbc7e7f43ecbb2" kindref="member">prvInitialiseNewStreamBuffer</ref>(<sp/>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/>)<sp/>pucAllocatedMemory,<sp/></highlight><highlight class="comment">/*<sp/>Structure<sp/>at<sp/>the<sp/>start<sp/>of<sp/>the<sp/>allocated<sp/>memory.<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>Safe<sp/>cast<sp/>as<sp/>allocated<sp/>memory<sp/>is<sp/>aligned.<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*lint<sp/>!e826<sp/>Area<sp/>is<sp/>not<sp/>too<sp/>small<sp/>and<sp/>alignment<sp/>is<sp/>guaranteed<sp/>provided<sp/>malloc()<sp/>behaves<sp/>as<sp/>expected<sp/>and<sp/>returns<sp/>aligned<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pucAllocatedMemory<sp/>+<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>),<sp/><sp/></highlight><highlight class="comment">/*<sp/>Storage<sp/>area<sp/>follows.<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*lint<sp/>!e9016<sp/>Indexing<sp/>past<sp/>structure<sp/>valid<sp/>for<sp/>uint8_t<sp/>pointer,<sp/>also<sp/>storage<sp/>area<sp/>has<sp/>no<sp/>alignment<sp/>requirement.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xBufferSizeBytes,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTriggerLevelBytes,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucFlags<sp/>);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a3666750a606dd4323b011db1b146e7b9" kindref="member">traceSTREAM_BUFFER_CREATE</ref>(<sp/>(<sp/>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/>)<sp/>pucAllocatedMemory<sp/>),<sp/>xIsMessageBuffer<sp/>);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2bc57023bb903e717940ac8aa13a3016" kindref="member">traceSTREAM_BUFFER_CREATE_FAILED</ref>(<sp/>xIsMessageBuffer<sp/>);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>)<sp/>pucAllocatedMemory;<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>!e826<sp/>Safe<sp/>cast<sp/>as<sp/>allocated<sp/>memory<sp/>is<sp/>aligned.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/><ref refid="stream__buffer_8h_1a1263847a3f77a4f34462df326d78c48c" kindref="member">xStreamBufferGenericCreateStatic</ref>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBufferSizeBytes,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xTriggerLevelBytes,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xIsMessageBuffer,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pucStreamBufferStorageArea,</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structx_s_t_a_t_i_c___s_t_r_e_a_m___b_u_f_f_e_r" kindref="compound">StaticStreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStaticStreamBuffer<sp/>)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/>)<sp/>pxStaticStreamBuffer;<sp/></highlight><highlight class="comment">/*lint<sp/>!e740<sp/>!e9087<sp/>Safe<sp/>cast<sp/>as<sp/>StaticStreamBuffer_t<sp/>is<sp/>opaque<sp/>Streambuffer_t.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>uint8_t<sp/>ucFlags;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pucStreamBufferStorageArea<sp/>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStaticStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xTriggerLevelBytes<sp/>&lt;=<sp/>xBufferSizeBytes<sp/>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>trigger<sp/>level<sp/>of<sp/>0<sp/>would<sp/>cause<sp/>a<sp/>waiting<sp/>task<sp/>to<sp/>unblock<sp/>even<sp/>when</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>buffer<sp/>was<sp/>empty.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTriggerLevelBytes<sp/>==<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTriggerLevelBytes<sp/>=<sp/>(<sp/>size_t<sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xIsMessageBuffer<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Statically<sp/>allocated<sp/>message<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucFlags<sp/>=<sp/><ref refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" kindref="member">sbFLAGS_IS_MESSAGE_BUFFER</ref><sp/>|<sp/><ref refid="stream__buffer_8c_1a80943e49aae8a493f02d78527b3fc01e" kindref="member">sbFLAGS_IS_STATICALLY_ALLOCATED</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Statically<sp/>allocated<sp/>stream<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucFlags<sp/>=<sp/><ref refid="stream__buffer_8c_1a80943e49aae8a493f02d78527b3fc01e" kindref="member">sbFLAGS_IS_STATICALLY_ALLOCATED</ref>;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>the<sp/>stream<sp/>buffer<sp/>is<sp/>going<sp/>to<sp/>be<sp/>used<sp/>as<sp/>a<sp/>message<sp/>buffer</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/><sp/><sp/>(that<sp/>is,<sp/>it<sp/>will<sp/>hold<sp/>discrete<sp/>messages<sp/>with<sp/>a<sp/>little<sp/>meta<sp/>data<sp/>that</highlight></codeline>
<codeline lineno="317"><highlight class="comment"><sp/><sp/><sp/><sp/>says<sp/>how<sp/>big<sp/>the<sp/>next<sp/>message<sp/>is)<sp/>check<sp/>the<sp/>buffer<sp/>will<sp/>be<sp/>large<sp/>enough</highlight></codeline>
<codeline lineno="318"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>hold<sp/>at<sp/>least<sp/>one<sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xBufferSizeBytes<sp/>&gt;<sp/><ref refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" kindref="member">sbBYTES_TO_STORE_MESSAGE_LENGTH</ref><sp/>);</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>configASSERT_DEFINED<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>that<sp/>the<sp/>size<sp/>of<sp/>the<sp/>structure<sp/>used<sp/>to<sp/>declare<sp/>a</highlight></codeline>
<codeline lineno="324"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>of<sp/>type<sp/>StaticStreamBuffer_t<sp/>equals<sp/>the<sp/>size<sp/>of<sp/>the<sp/>real</highlight></codeline>
<codeline lineno="325"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>message<sp/>buffer<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="_free_r_t_o_s_8h_1a3675ce07f6d3e0e7130bc6ea01162d34" kindref="member">StaticStreamBuffer_t</ref><sp/>);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xSize<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e529<sp/>xSize<sp/>is<sp/>referenced<sp/>is<sp/>configASSERT()<sp/>is<sp/>defined.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configASSERT_DEFINED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pucStreamBufferStorageArea<sp/>!=<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>pxStaticStreamBuffer<sp/>!=<sp/>NULL<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stream__buffer_8c_1a7f655ff13acb1a5614dbc7e7f43ecbb2" kindref="member">prvInitialiseNewStreamBuffer</ref>(<sp/>pxStreamBuffer,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pucStreamBufferStorageArea,</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xBufferSizeBytes,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTriggerLevelBytes,</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ucFlags<sp/>);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remember<sp/>this<sp/>was<sp/>statically<sp/>allocated<sp/>in<sp/>case<sp/>it<sp/>is<sp/>ever<sp/>deleted</highlight></codeline>
<codeline lineno="340"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>|=<sp/><ref refid="stream__buffer_8c_1a80943e49aae8a493f02d78527b3fc01e" kindref="member">sbFLAGS_IS_STATICALLY_ALLOCATED</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a3666750a606dd4323b011db1b146e7b9" kindref="member">traceSTREAM_BUFFER_CREATE</ref>(<sp/>pxStreamBuffer,<sp/>xIsMessageBuffer<sp/>);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>(<sp/><ref refid="stream__buffer_8h_1a8b80974e2278f073412293e6580ce56f" kindref="member">StreamBufferHandle_t</ref><sp/>)<sp/>pxStaticStreamBuffer;<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>Data<sp/>hiding<sp/>requires<sp/>cast<sp/>to<sp/>opaque<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a8437a62aa94288842b56a2d63786c118" kindref="member">traceSTREAM_BUFFER_CREATE_STATIC_FAILED</ref>(<sp/>xReturn,<sp/>xIsMessageBuffer<sp/>);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359" refid="stream__buffer_8h_1a05dc9d2ae220a050526a062eddf6d7a2" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1a7e66db41c3fd13acf3b9f814d650f77d" kindref="member">vStreamBufferDelete</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer<sp/>)</highlight></codeline>
<codeline lineno="360"><highlight class="normal">{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ae919bd00b51b396ff237bc8ec3b6b439" kindref="member">traceSTREAM_BUFFER_DELETE</ref>(<sp/>xStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>&amp;<sp/><ref refid="stream__buffer_8c_1a80943e49aae8a493f02d78527b3fc01e" kindref="member">sbFLAGS_IS_STATICALLY_ALLOCATED</ref><sp/>)<sp/>==<sp/>(<sp/>uint8_t<sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Both<sp/>the<sp/>structure<sp/>and<sp/>the<sp/>buffer<sp/>were<sp/>allocated<sp/>using<sp/>a<sp/>single<sp/>call</highlight></codeline>
<codeline lineno="372"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>pvPortMalloc(),<sp/>hence<sp/>only<sp/>one<sp/>call<sp/>to<sp/>vPortFree()<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pxStreamBuffer<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>Standard<sp/>free()<sp/>semantics<sp/>require<sp/>void<sp/>*,<sp/>plus<sp/>pxStreamBuffer<sp/>was<sp/>allocated<sp/>by<sp/>pvPortMalloc().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>not<sp/>be<sp/>possible<sp/>to<sp/>get<sp/>here,<sp/>ucFlags<sp/>must<sp/>be<sp/>corrupt.</highlight></codeline>
<codeline lineno="378"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>Force<sp/>an<sp/>assert.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xStreamBuffer<sp/>==<sp/>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>)<sp/>~0<sp/>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>structure<sp/>and<sp/>buffer<sp/>were<sp/>not<sp/>allocated<sp/>dynamically<sp/>and<sp/>cannot<sp/>be</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/>freed<sp/>-<sp/>just<sp/>scrub<sp/>the<sp/>structure<sp/>so<sp/>future<sp/>use<sp/>will<sp/>assert.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>memset(<sp/>pxStreamBuffer,<sp/>0x00,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="stream__buffer_8h_1a5253429645c67902c2fc8682f8af0aac" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="stream__buffer_8c_1a05ed4d42963aa4aaf50e49700d44659c" kindref="member">xStreamBufferReset</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer<sp/>)</highlight></codeline>
<codeline lineno="393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxStreamBufferNumber;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>stream<sp/>buffer<sp/>number<sp/>so<sp/>it<sp/>can<sp/>be<sp/>restored<sp/>after<sp/>the</highlight></codeline>
<codeline lineno="406"><highlight class="comment"><sp/><sp/><sp/><sp/>reset.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>uxStreamBufferNumber<sp/>=<sp/>pxStreamBuffer-&gt;uxStreamBufferNumber;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Can<sp/>only<sp/>reset<sp/>a<sp/>message<sp/>buffer<sp/>if<sp/>there<sp/>are<sp/>no<sp/>tasks<sp/>blocked<sp/>on<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a8377ae8625121efa22d66e678add4057" kindref="member">xTaskWaitingToReceive</ref><sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a85b1cf05c0222f8d67a64f7d01722e52" kindref="member">xTaskWaitingToSend</ref><sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stream__buffer_8c_1a7f655ff13acb1a5614dbc7e7f43ecbb2" kindref="member">prvInitialiseNewStreamBuffer</ref>(<sp/>pxStreamBuffer,</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" kindref="member">pucBuffer</ref>,</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref>,</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" kindref="member">xTriggerLevelBytes</ref>,</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;uxStreamBufferNumber<sp/>=<sp/>uxStreamBufferNumber;</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2ef92acbaa66efdb85be7f8256fe91ba" kindref="member">traceSTREAM_BUFFER_RESET</ref>(<sp/>xStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="438"><highlight class="normal">}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441" refid="stream__buffer_8h_1a28f0280587c76e71efeaa8f415ebde04" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="stream__buffer_8c_1a375b92e87b73351a6a30c8a2ba7d2ce0" kindref="member">xStreamBufferSetTriggerLevel</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xTriggerLevel<sp/>)</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>not<sp/>valid<sp/>for<sp/>the<sp/>trigger<sp/>level<sp/>to<sp/>be<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTriggerLevel<sp/>==<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>xTriggerLevel<sp/>=<sp/>(<sp/>size_t<sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>trigger<sp/>level<sp/>is<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>that<sp/>must<sp/>be<sp/>in<sp/>the<sp/>stream</highlight></codeline>
<codeline lineno="455"><highlight class="comment"><sp/><sp/>buffer<sp/>before<sp/>a<sp/>task<sp/>that<sp/>is<sp/>waiting<sp/>for<sp/>data<sp/>is<sp/>unblocked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTriggerLevel<sp/>&lt;=<sp/>pxStreamBuffer-&gt;xLength<sp/>)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" kindref="member">xTriggerLevelBytes</ref><sp/>=<sp/>xTriggerLevel;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="stream__buffer_8h_1a9a78e0206cb1dc343c329f9db579208d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1a8fb90892c74eb94fb063b2a018a10509" kindref="member">xStreamBufferSpacesAvailable</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer<sp/>)</highlight></codeline>
<codeline lineno="471"><highlight class="normal">{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xSpace;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>xSpace<sp/>=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>+<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" kindref="member">xTail</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>xSpace<sp/>-=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a75aafb9fdee8f0666837302bd9b12341" kindref="member">xHead</ref>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>xSpace<sp/>-=<sp/>(<sp/>size_t<sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xSpace<sp/>&gt;=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>)</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>xSpace<sp/>-=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref>;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xSpace;</highlight></codeline>
<codeline lineno="491"><highlight class="normal">}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494" refid="stream__buffer_8h_1af32d1737de29f24ee31ac1e3c407d9fd" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1a5c473cb971d8a20b0528a1abc890833c" kindref="member">xStreamBufferBytesAvailable</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer<sp/>)</highlight></codeline>
<codeline lineno="495"><highlight class="normal">{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/>xReturn<sp/>=<sp/><ref refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" kindref="member">prvBytesInBuffer</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="503"><highlight class="normal">}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506" refid="stream__buffer_8h_1a35cdf3b6bf677086b9128782f762499d" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1adf807ecf262fcd5df2584d5d3e6ed6c5" kindref="member">xStreamBufferSend</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer,</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvTxData,</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xDataLengthBytes,</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="510"><highlight class="normal">{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xReturn,<sp/>xSpace<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xRequiredSpace<sp/>=<sp/>xDataLengthBytes;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">TimeOut_t</ref><sp/>xTimeOut;</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pvTxData<sp/>);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>send<sp/>function<sp/>is<sp/>used<sp/>to<sp/>write<sp/>to<sp/>both<sp/>message<sp/>buffers<sp/>and<sp/>stream</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/><sp/>buffers.<sp/><sp/>If<sp/>this<sp/>is<sp/>a<sp/>message<sp/>buffer<sp/>then<sp/>the<sp/>space<sp/>needed<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/><sp/>increased<sp/>by<sp/>the<sp/>amount<sp/>of<sp/>bytes<sp/>needed<sp/>to<sp/>store<sp/>the<sp/>length<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/><sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>&amp;<sp/><ref refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" kindref="member">sbFLAGS_IS_MESSAGE_BUFFER</ref><sp/>)<sp/>!=<sp/>(<sp/>uint8_t<sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>xRequiredSpace<sp/>+=<sp/><ref refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" kindref="member">sbBYTES_TO_STORE_MESSAGE_LENGTH</ref>;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Overflow?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xRequiredSpace<sp/>&gt;<sp/>xDataLengthBytes<sp/>);</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1a67155ad4ea2482b5f4597a69f2152be0" kindref="member">vTaskSetTimeOutState</ref>(<sp/>&amp;xTimeOut<sp/>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>until<sp/>the<sp/>required<sp/>number<sp/>of<sp/>bytes<sp/>are<sp/>free<sp/>in<sp/>the<sp/>message</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSpace<sp/>=<sp/><ref refid="stream__buffer_8c_1a8fb90892c74eb94fb063b2a018a10509" kindref="member">xStreamBufferSpacesAvailable</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xSpace<sp/>&lt;<sp/>xRequiredSpace<sp/>)</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>notification<sp/>state<sp/>as<sp/>going<sp/>to<sp/>wait<sp/>for<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a4cb6c908a9d2d733e9d519d7dc27bb34" kindref="member">xTaskNotifyStateClear</ref>(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>only<sp/>be<sp/>one<sp/>writer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a85b1cf05c0222f8d67a64f7d01722e52" kindref="member">xTaskWaitingToSend</ref><sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a85b1cf05c0222f8d67a64f7d01722e52" kindref="member">xTaskWaitingToSend</ref><sp/>=<sp/><ref refid="task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc" kindref="member">xTaskGetCurrentTaskHandle</ref>();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a5788bf0db92eda90675aa5f3caa42eeb" kindref="member">traceBLOCKING_ON_STREAM_BUFFER_SEND</ref>(<sp/>xStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait</ref>(<sp/>(<sp/>uint32_t<sp/>)<sp/>0,<sp/>(<sp/>uint32_t<sp/>)<sp/>0,<sp/>NULL,<sp/>xTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a85b1cf05c0222f8d67a64f7d01722e52" kindref="member">xTaskWaitingToSend</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" kindref="member">xTaskCheckForTimeOut</ref>(<sp/>&amp;xTimeOut,<sp/>&amp;xTicksToWait<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>);</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xSpace<sp/>==<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/>xSpace<sp/>=<sp/><ref refid="stream__buffer_8c_1a8fb90892c74eb94fb063b2a018a10509" kindref="member">xStreamBufferSpacesAvailable</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>xReturn<sp/>=<sp/><ref refid="stream__buffer_8c_1a1415b7e265e106aab476023f9a6cce6c" kindref="member">prvWriteMessageToBuffer</ref>(<sp/>pxStreamBuffer,<sp/>pvTxData,<sp/>xDataLengthBytes,<sp/>xSpace,<sp/>xRequiredSpace<sp/>);</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xReturn<sp/>&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a4f4fc6954ae7c5b8a4819f70afd37c1f" kindref="member">traceSTREAM_BUFFER_SEND</ref>(<sp/>xStreamBuffer,<sp/>xReturn<sp/>);</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Was<sp/>a<sp/>task<sp/>waiting<sp/>for<sp/>the<sp/>data?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" kindref="member">prvBytesInBuffer</ref>(<sp/>pxStreamBuffer<sp/>)<sp/>&gt;=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" kindref="member">xTriggerLevelBytes</ref><sp/>)</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stream__buffer_8c_1aa75273dfbcd92710254df0165ae1da5d" kindref="member">sbSEND_COMPLETED</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a527e8f19c9b9b339985c2b8e47bff02a" kindref="member">traceSTREAM_BUFFER_SEND_FAILED</ref>(<sp/>xStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="607"><highlight class="normal">}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"></highlight></codeline>
<codeline lineno="610" refid="stream__buffer_8h_1a1dab226e99230e01e79bc2b5c0605e44" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1a3072d8c5cedf79a72550da051a0866b4" kindref="member">xStreamBufferSendFromISR</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvTxData,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xDataLengthBytes,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxHigherPriorityTaskWoken<sp/>)</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xReturn,<sp/>xSpace;</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xRequiredSpace<sp/>=<sp/>xDataLengthBytes;</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pvTxData<sp/>);</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>send<sp/>function<sp/>is<sp/>used<sp/>to<sp/>write<sp/>to<sp/>both<sp/>message<sp/>buffers<sp/>and<sp/>stream</highlight></codeline>
<codeline lineno="623"><highlight class="comment"><sp/><sp/>buffers.<sp/><sp/>If<sp/>this<sp/>is<sp/>a<sp/>message<sp/>buffer<sp/>then<sp/>the<sp/>space<sp/>needed<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="624"><highlight class="comment"><sp/><sp/>increased<sp/>by<sp/>the<sp/>amount<sp/>of<sp/>bytes<sp/>needed<sp/>to<sp/>store<sp/>the<sp/>length<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>&amp;<sp/><ref refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" kindref="member">sbFLAGS_IS_MESSAGE_BUFFER</ref><sp/>)<sp/>!=<sp/>(<sp/>uint8_t<sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>xRequiredSpace<sp/>+=<sp/><ref refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" kindref="member">sbBYTES_TO_STORE_MESSAGE_LENGTH</ref>;</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>xSpace<sp/>=<sp/><ref refid="stream__buffer_8c_1a8fb90892c74eb94fb063b2a018a10509" kindref="member">xStreamBufferSpacesAvailable</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>xReturn<sp/>=<sp/><ref refid="stream__buffer_8c_1a1415b7e265e106aab476023f9a6cce6c" kindref="member">prvWriteMessageToBuffer</ref>(<sp/>pxStreamBuffer,<sp/>pvTxData,<sp/>xDataLengthBytes,<sp/>xSpace,<sp/>xRequiredSpace<sp/>);</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xReturn<sp/>&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Was<sp/>a<sp/>task<sp/>waiting<sp/>for<sp/>the<sp/>data?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" kindref="member">prvBytesInBuffer</ref>(<sp/>pxStreamBuffer<sp/>)<sp/>&gt;=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" kindref="member">xTriggerLevelBytes</ref><sp/>)</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stream__buffer_8c_1aadd3cf567c5086402552c463c55dda7c" kindref="member">sbSEND_COMPLETE_FROM_ISR</ref>(<sp/>pxStreamBuffer,<sp/>pxHigherPriorityTaskWoken<sp/>);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ab79a8d87f1c865b1a76af02932b3dda6" kindref="member">traceSTREAM_BUFFER_SEND_FROM_ISR</ref>(<sp/>xStreamBuffer,<sp/>xReturn<sp/>);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="658"><highlight class="normal">}</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661" refid="stream__buffer_8c_1a1415b7e265e106aab476023f9a6cce6c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1a1415b7e265e106aab476023f9a6cce6c" kindref="member">prvWriteMessageToBuffer</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer,</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>pvTxData,</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xDataLengthBytes,</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xSpace,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xRequiredSpace<sp/>)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xShouldWrite;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xSpace<sp/>==<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Doesn&apos;t<sp/>matter<sp/>if<sp/>this<sp/>is<sp/>a<sp/>stream<sp/>buffer<sp/>or<sp/>a<sp/>message<sp/>buffer,<sp/>there</highlight></codeline>
<codeline lineno="673"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>no<sp/>space<sp/>to<sp/>write.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>xShouldWrite<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>&amp;<sp/><ref refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" kindref="member">sbFLAGS_IS_MESSAGE_BUFFER</ref><sp/>)<sp/>==<sp/>(<sp/>uint8_t<sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>a<sp/>stream<sp/>buffer,<sp/>as<sp/>opposed<sp/>to<sp/>a<sp/>message<sp/>buffer,<sp/>so<sp/>writing<sp/>a</highlight></codeline>
<codeline lineno="679"><highlight class="comment"><sp/><sp/><sp/><sp/>stream<sp/>of<sp/>bytes<sp/>rather<sp/>than<sp/>discrete<sp/>messages.<sp/><sp/>Write<sp/>as<sp/>many<sp/>bytes<sp/>as</highlight></codeline>
<codeline lineno="680"><highlight class="comment"><sp/><sp/><sp/><sp/>possible.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>xShouldWrite<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>xDataLengthBytes<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a101a57cef3f76ec13110cec59ce49edf" kindref="member">configMIN</ref>(<sp/>xDataLengthBytes,<sp/>xSpace<sp/>);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xSpace<sp/>&gt;=<sp/>xRequiredSpace<sp/>)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>a<sp/>message<sp/>buffer,<sp/>as<sp/>opposed<sp/>to<sp/>a<sp/>stream<sp/>buffer,<sp/>and<sp/>there</highlight></codeline>
<codeline lineno="687"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>enough<sp/>space<sp/>to<sp/>write<sp/>both<sp/>the<sp/>message<sp/>length<sp/>and<sp/>the<sp/>message<sp/>itself</highlight></codeline>
<codeline lineno="688"><highlight class="comment"><sp/><sp/><sp/><sp/>into<sp/>the<sp/>buffer.<sp/><sp/>Start<sp/>by<sp/>writing<sp/>the<sp/>length<sp/>of<sp/>the<sp/>data,<sp/>the<sp/>data</highlight></codeline>
<codeline lineno="689"><highlight class="comment"><sp/><sp/><sp/><sp/>itself<sp/>will<sp/>be<sp/>written<sp/>later<sp/>in<sp/>this<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>xShouldWrite<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="stream__buffer_8c_1ab05b79124292dd7bed33fca7a92473c0" kindref="member">prvWriteBytesToBuffer</ref>(<sp/>pxStreamBuffer,<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>)<sp/>&amp;(<sp/>xDataLengthBytes<sp/>),<sp/><ref refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" kindref="member">sbBYTES_TO_STORE_MESSAGE_LENGTH</ref><sp/>);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>is<sp/>space<sp/>available,<sp/>but<sp/>not<sp/>enough<sp/>space.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>xShouldWrite<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xShouldWrite<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Writes<sp/>the<sp/>data<sp/>itself.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="stream__buffer_8c_1ab05b79124292dd7bed33fca7a92473c0" kindref="member">prvWriteBytesToBuffer</ref>(<sp/>pxStreamBuffer,<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>)<sp/>pvTxData,<sp/>xDataLengthBytes<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>Storage<sp/>buffer<sp/>is<sp/>implemented<sp/>as<sp/>uint8_t<sp/>for<sp/>ease<sp/>of<sp/>sizing,<sp/>alighment<sp/>and<sp/>access.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="708"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="710"><highlight class="normal">}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713" refid="stream__buffer_8h_1a55efc144b988598d84a6087d3e20b507" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1afcfcf6f4bc80ec5e31e5e1f8093cacac" kindref="member">xStreamBufferReceive</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvRxData,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBufferLengthBytes,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="717"><highlight class="normal">{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xReceivedLength<sp/>=<sp/>0,<sp/>xBytesAvailable,<sp/>xBytesToStoreMessageLength;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pvRxData<sp/>);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"></highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>receive<sp/>function<sp/>is<sp/>used<sp/>by<sp/>both<sp/>message<sp/>buffers,<sp/>which<sp/>store</highlight></codeline>
<codeline lineno="725"><highlight class="comment"><sp/><sp/>discrete<sp/>messages,<sp/>and<sp/>stream<sp/>buffers,<sp/>which<sp/>store<sp/>a<sp/>continuous<sp/>stream<sp/>of</highlight></codeline>
<codeline lineno="726"><highlight class="comment"><sp/><sp/>bytes.<sp/><sp/>Discrete<sp/>messages<sp/>include<sp/>an<sp/>additional</highlight></codeline>
<codeline lineno="727"><highlight class="comment"><sp/><sp/>sbBYTES_TO_STORE_MESSAGE_LENGTH<sp/>bytes<sp/>that<sp/>hold<sp/>the<sp/>length<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="728"><highlight class="comment"><sp/><sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>&amp;<sp/><ref refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" kindref="member">sbFLAGS_IS_MESSAGE_BUFFER</ref><sp/>)<sp/>!=<sp/>(<sp/>uint8_t<sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>xBytesToStoreMessageLength<sp/>=<sp/><ref refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" kindref="member">sbBYTES_TO_STORE_MESSAGE_LENGTH</ref>;</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>xBytesToStoreMessageLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checking<sp/>if<sp/>there<sp/>is<sp/>data<sp/>and<sp/>clearing<sp/>the<sp/>notification<sp/>state<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="741"><highlight class="comment"><sp/><sp/><sp/><sp/>performed<sp/>atomically.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xBytesAvailable<sp/>=<sp/><ref refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" kindref="member">prvBytesInBuffer</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>this<sp/>function<sp/>was<sp/>invoked<sp/>by<sp/>a<sp/>message<sp/>buffer<sp/>read<sp/>then</highlight></codeline>
<codeline lineno="747"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>xBytesToStoreMessageLength<sp/>holds<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>used<sp/>to<sp/>hold</highlight></codeline>
<codeline lineno="748"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>length<sp/>of<sp/>the<sp/>next<sp/>discrete<sp/>message.<sp/><sp/>If<sp/>this<sp/>function<sp/>was</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>invoked<sp/>by<sp/>a<sp/>stream<sp/>buffer<sp/>read<sp/>then<sp/>xBytesToStoreMessageLength<sp/>will</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xBytesAvailable<sp/>&lt;=<sp/>xBytesToStoreMessageLength<sp/>)</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>notification<sp/>state<sp/>as<sp/>going<sp/>to<sp/>wait<sp/>for<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a4cb6c908a9d2d733e9d519d7dc27bb34" kindref="member">xTaskNotifyStateClear</ref>(<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>only<sp/>be<sp/>one<sp/>reader.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a8377ae8625121efa22d66e678add4057" kindref="member">xTaskWaitingToReceive</ref><sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a8377ae8625121efa22d66e678add4057" kindref="member">xTaskWaitingToReceive</ref><sp/>=<sp/><ref refid="task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc" kindref="member">xTaskGetCurrentTaskHandle</ref>();</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xBytesAvailable<sp/>&lt;=<sp/>xBytesToStoreMessageLength<sp/>)</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>for<sp/>data<sp/>to<sp/>be<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a80419264672cb0ddd2b865048483b537" kindref="member">traceBLOCKING_ON_STREAM_BUFFER_RECEIVE</ref>(<sp/>xStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait</ref>(<sp/>(<sp/>uint32_t<sp/>)<sp/>0,<sp/>(<sp/>uint32_t<sp/>)<sp/>0,<sp/>NULL,<sp/>xTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a8377ae8625121efa22d66e678add4057" kindref="member">xTaskWaitingToReceive</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Recheck<sp/>the<sp/>data<sp/>available<sp/>after<sp/>blocking.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xBytesAvailable<sp/>=<sp/><ref refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" kindref="member">prvBytesInBuffer</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/>xBytesAvailable<sp/>=<sp/><ref refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" kindref="member">prvBytesInBuffer</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Whether<sp/>receiving<sp/>a<sp/>discrete<sp/>message<sp/>(where<sp/>xBytesToStoreMessageLength</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/><sp/>holds<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>used<sp/>to<sp/>store<sp/>the<sp/>message<sp/>length)<sp/>or<sp/>a<sp/>stream<sp/>of</highlight></codeline>
<codeline lineno="789"><highlight class="comment"><sp/><sp/>bytes<sp/>(where<sp/>xBytesToStoreMessageLength<sp/>is<sp/>zero),<sp/>the<sp/>number<sp/>of<sp/>bytes</highlight></codeline>
<codeline lineno="790"><highlight class="comment"><sp/><sp/>available<sp/>must<sp/>be<sp/>greater<sp/>than<sp/>xBytesToStoreMessageLength<sp/>to<sp/>be<sp/>able<sp/>to</highlight></codeline>
<codeline lineno="791"><highlight class="comment"><sp/><sp/>read<sp/>bytes<sp/>from<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xBytesAvailable<sp/>&gt;<sp/>xBytesToStoreMessageLength<sp/>)</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/>xReceivedLength<sp/>=<sp/><ref refid="stream__buffer_8c_1aea486f3983538e061b22cce98612d8bc" kindref="member">prvReadMessageFromBuffer</ref>(<sp/>pxStreamBuffer,<sp/>pvRxData,<sp/>xBufferLengthBytes,<sp/>xBytesAvailable,<sp/>xBytesToStoreMessageLength<sp/>);</highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Was<sp/>a<sp/>task<sp/>waiting<sp/>for<sp/>space<sp/>in<sp/>the<sp/>buffer?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xReceivedLength<sp/>!=<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a6ecefd3df93cb11986cca1b41f215138" kindref="member">traceSTREAM_BUFFER_RECEIVE</ref>(<sp/>xStreamBuffer,<sp/>xReceivedLength<sp/>);</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stream__buffer_8c_1a4d6a29d283acfa2d4ef576476eedc789" kindref="member">sbRECEIVE_COMPLETED</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a57e5d8ccc74dd8e04bd3a8534de79bb4" kindref="member">traceSTREAM_BUFFER_RECEIVE_FAILED</ref>(<sp/>xStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReceivedLength;</highlight></codeline>
<codeline lineno="814"><highlight class="normal">}</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="817" refid="stream__buffer_8h_1a9a952a2cffab91471ec2a3651e2160ec" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1afe4f32e931b684bc32189f086e5ec41c" kindref="member">xStreamBufferNextMessageLengthBytes</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer<sp/>)</highlight></codeline>
<codeline lineno="818"><highlight class="normal">{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xReturn,<sp/>xBytesAvailable,<sp/>xOriginalTail;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"><ref refid="_free_r_t_o_s_config_8h_1a019c8bfcdd8eca676c7b9993bda95967" kindref="member">configMESSAGE_BUFFER_LENGTH_TYPE</ref><sp/>xTempReturn;</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>the<sp/>stream<sp/>buffer<sp/>is<sp/>being<sp/>used<sp/>as<sp/>a<sp/>message<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>&amp;<sp/><ref refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" kindref="member">sbFLAGS_IS_MESSAGE_BUFFER</ref><sp/>)<sp/>!=<sp/>(<sp/>uint8_t<sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>xBytesAvailable<sp/>=<sp/><ref refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" kindref="member">prvBytesInBuffer</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xBytesAvailable<sp/>&gt;<sp/><ref refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" kindref="member">sbBYTES_TO_STORE_MESSAGE_LENGTH</ref><sp/>)</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>number<sp/>of<sp/>bytes<sp/>available<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>number<sp/>of<sp/>bytes</highlight></codeline>
<codeline lineno="832"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>required<sp/>to<sp/>hold<sp/>the<sp/>length<sp/>of<sp/>the<sp/>next<sp/>message,<sp/>so<sp/>another<sp/>message</highlight></codeline>
<codeline lineno="833"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>available.<sp/><sp/>Return<sp/>its<sp/>length<sp/>without<sp/>removing<sp/>the<sp/>length<sp/>bytes</highlight></codeline>
<codeline lineno="834"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>the<sp/>buffer.<sp/><sp/>A<sp/>copy<sp/>of<sp/>the<sp/>tail<sp/>is<sp/>stored<sp/>so<sp/>the<sp/>buffer<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="835"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>returned<sp/>to<sp/>its<sp/>prior<sp/>state<sp/>as<sp/>the<sp/>message<sp/>is<sp/>not<sp/>actually<sp/>being</highlight></codeline>
<codeline lineno="836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>removed<sp/>from<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xOriginalTail<sp/>=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" kindref="member">xTail</ref>;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="stream__buffer_8c_1a8ec163e54dc25c091dbff11c1b8f7a2c" kindref="member">prvReadBytesFromBuffer</ref>(<sp/>pxStreamBuffer,<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>&amp;xTempReturn,<sp/><ref refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" kindref="member">sbBYTES_TO_STORE_MESSAGE_LENGTH</ref>,<sp/>xBytesAvailable<sp/>);</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>(<sp/>size_t<sp/>)<sp/>xTempReturn;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" kindref="member">xTail</ref><sp/>=<sp/>xOriginalTail;</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>minimum<sp/>amount<sp/>of<sp/>bytes<sp/>in<sp/>a<sp/>message<sp/>buffer<sp/>is</highlight></codeline>
<codeline lineno="845"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>sbBYTES_TO_STORE_MESSAGE_LENGTH<sp/>+<sp/>1<sp/>),<sp/>so<sp/>if<sp/>xBytesAvailable<sp/>is</highlight></codeline>
<codeline lineno="846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>less<sp/>than<sp/>sbBYTES_TO_STORE_MESSAGE_LENGTH<sp/>the<sp/>only<sp/>other<sp/>valid</highlight></codeline>
<codeline lineno="847"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>is<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xBytesAvailable<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="858"><highlight class="normal">}</highlight></codeline>
<codeline lineno="859"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="861" refid="stream__buffer_8h_1a6c882a1d9f26c40f93f271bd1b844b3b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1a06c67a59495190f8359322184fe0462b" kindref="member">xStreamBufferReceiveFromISR</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer,</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvRxData,</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBufferLengthBytes,</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxHigherPriorityTaskWoken<sp/>)</highlight></codeline>
<codeline lineno="865"><highlight class="normal">{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xReceivedLength<sp/>=<sp/>0,<sp/>xBytesAvailable,<sp/>xBytesToStoreMessageLength;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pvRxData<sp/>);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>receive<sp/>function<sp/>is<sp/>used<sp/>by<sp/>both<sp/>message<sp/>buffers,<sp/>which<sp/>store</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/>discrete<sp/>messages,<sp/>and<sp/>stream<sp/>buffers,<sp/>which<sp/>store<sp/>a<sp/>continuous<sp/>stream<sp/>of</highlight></codeline>
<codeline lineno="874"><highlight class="comment"><sp/><sp/>bytes.<sp/><sp/>Discrete<sp/>messages<sp/>include<sp/>an<sp/>additional</highlight></codeline>
<codeline lineno="875"><highlight class="comment"><sp/><sp/>sbBYTES_TO_STORE_MESSAGE_LENGTH<sp/>bytes<sp/>that<sp/>hold<sp/>the<sp/>length<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="876"><highlight class="comment"><sp/><sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>&amp;<sp/><ref refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" kindref="member">sbFLAGS_IS_MESSAGE_BUFFER</ref><sp/>)<sp/>!=<sp/>(<sp/>uint8_t<sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/>xBytesToStoreMessageLength<sp/>=<sp/><ref refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" kindref="member">sbBYTES_TO_STORE_MESSAGE_LENGTH</ref>;</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/>xBytesToStoreMessageLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/>xBytesAvailable<sp/>=<sp/><ref refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" kindref="member">prvBytesInBuffer</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Whether<sp/>receiving<sp/>a<sp/>discrete<sp/>message<sp/>(where<sp/>xBytesToStoreMessageLength</highlight></codeline>
<codeline lineno="889"><highlight class="comment"><sp/><sp/>holds<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>used<sp/>to<sp/>store<sp/>the<sp/>message<sp/>length)<sp/>or<sp/>a<sp/>stream<sp/>of</highlight></codeline>
<codeline lineno="890"><highlight class="comment"><sp/><sp/>bytes<sp/>(where<sp/>xBytesToStoreMessageLength<sp/>is<sp/>zero),<sp/>the<sp/>number<sp/>of<sp/>bytes</highlight></codeline>
<codeline lineno="891"><highlight class="comment"><sp/><sp/>available<sp/>must<sp/>be<sp/>greater<sp/>than<sp/>xBytesToStoreMessageLength<sp/>to<sp/>be<sp/>able<sp/>to</highlight></codeline>
<codeline lineno="892"><highlight class="comment"><sp/><sp/>read<sp/>bytes<sp/>from<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xBytesAvailable<sp/>&gt;<sp/>xBytesToStoreMessageLength<sp/>)</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>xReceivedLength<sp/>=<sp/><ref refid="stream__buffer_8c_1aea486f3983538e061b22cce98612d8bc" kindref="member">prvReadMessageFromBuffer</ref>(<sp/>pxStreamBuffer,<sp/>pvRxData,<sp/>xBufferLengthBytes,<sp/>xBytesAvailable,<sp/>xBytesToStoreMessageLength<sp/>);</highlight></codeline>
<codeline lineno="896"><highlight class="normal"></highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Was<sp/>a<sp/>task<sp/>waiting<sp/>for<sp/>space<sp/>in<sp/>the<sp/>buffer?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xReceivedLength<sp/>!=<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="stream__buffer_8c_1ab72c363566113705c021596f90c6eb5a" kindref="member">sbRECEIVE_COMPLETED_FROM_ISR</ref>(<sp/>pxStreamBuffer,<sp/>pxHigherPriorityTaskWoken<sp/>);</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"></highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a30fe3a49605cf2c232d190e4f6565a0d" kindref="member">traceSTREAM_BUFFER_RECEIVE_FROM_ISR</ref>(<sp/>xStreamBuffer,<sp/>xReceivedLength<sp/>);</highlight></codeline>
<codeline lineno="913"><highlight class="normal"></highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReceivedLength;</highlight></codeline>
<codeline lineno="915"><highlight class="normal">}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918" refid="stream__buffer_8c_1aea486f3983538e061b22cce98612d8bc" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1aea486f3983538e061b22cce98612d8bc" kindref="member">prvReadMessageFromBuffer</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*pxStreamBuffer,</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvRxData,</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBufferLengthBytes,</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBytesAvailable,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBytesToStoreMessageLength<sp/>)</highlight></codeline>
<codeline lineno="923"><highlight class="normal">{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xOriginalTail,<sp/>xReceivedLength,<sp/>xNextMessageLength;</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><ref refid="_free_r_t_o_s_config_8h_1a019c8bfcdd8eca676c7b9993bda95967" kindref="member">configMESSAGE_BUFFER_LENGTH_TYPE</ref><sp/>xTempNextMessageLength;</highlight></codeline>
<codeline lineno="926"><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xBytesToStoreMessageLength<sp/>!=<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>discrete<sp/>message<sp/>is<sp/>being<sp/>received.<sp/><sp/>First<sp/>receive<sp/>the<sp/>length</highlight></codeline>
<codeline lineno="930"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>the<sp/>message.<sp/><sp/>A<sp/>copy<sp/>of<sp/>the<sp/>tail<sp/>is<sp/>stored<sp/>so<sp/>the<sp/>buffer<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="931"><highlight class="comment"><sp/><sp/><sp/><sp/>returned<sp/>to<sp/>its<sp/>prior<sp/>state<sp/>if<sp/>the<sp/>length<sp/>of<sp/>the<sp/>message<sp/>is<sp/>too</highlight></codeline>
<codeline lineno="932"><highlight class="comment"><sp/><sp/><sp/><sp/>large<sp/>for<sp/>the<sp/>provided<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/>xOriginalTail<sp/>=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" kindref="member">xTail</ref>;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="stream__buffer_8c_1a8ec163e54dc25c091dbff11c1b8f7a2c" kindref="member">prvReadBytesFromBuffer</ref>(<sp/>pxStreamBuffer,<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>&amp;xTempNextMessageLength,<sp/>xBytesToStoreMessageLength,<sp/>xBytesAvailable<sp/>);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/>xNextMessageLength<sp/>=<sp/>(<sp/>size_t<sp/>)<sp/>xTempNextMessageLength;</highlight></codeline>
<codeline lineno="936"><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reduce<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>available<sp/>by<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>just</highlight></codeline>
<codeline lineno="938"><highlight class="comment"><sp/><sp/><sp/><sp/>read<sp/>out.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/>xBytesAvailable<sp/>-=<sp/>xBytesToStoreMessageLength;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>there<sp/>is<sp/>enough<sp/>space<sp/>in<sp/>the<sp/>buffer<sp/>provided<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="942"><highlight class="comment"><sp/><sp/><sp/><sp/>user.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xNextMessageLength<sp/>&gt;<sp/>xBufferLengthBytes<sp/>)</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>user<sp/>has<sp/>provided<sp/>insufficient<sp/>space<sp/>to<sp/>read<sp/>the<sp/>message</highlight></codeline>
<codeline lineno="946"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>return<sp/>the<sp/>buffer<sp/>to<sp/>its<sp/>previous<sp/>state<sp/>(so<sp/>the<sp/>length<sp/>of</highlight></codeline>
<codeline lineno="947"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>message<sp/>is<sp/>in<sp/>the<sp/>buffer<sp/>again).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" kindref="member">xTail</ref><sp/>=<sp/>xOriginalTail;</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xNextMessageLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>stream<sp/>of<sp/>bytes<sp/>is<sp/>being<sp/>received<sp/>(as<sp/>opposed<sp/>to<sp/>a<sp/>discrete</highlight></codeline>
<codeline lineno="959"><highlight class="comment"><sp/><sp/><sp/><sp/>message),<sp/>so<sp/>read<sp/>as<sp/>many<sp/>bytes<sp/>as<sp/>possible.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>xNextMessageLength<sp/>=<sp/>xBufferLengthBytes;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Read<sp/>the<sp/>actual<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/>xReceivedLength<sp/>=<sp/><ref refid="stream__buffer_8c_1a8ec163e54dc25c091dbff11c1b8f7a2c" kindref="member">prvReadBytesFromBuffer</ref>(<sp/>pxStreamBuffer,<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pvRxData,<sp/>xNextMessageLength,<sp/>xBytesAvailable<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>Data<sp/>storage<sp/>area<sp/>is<sp/>implemented<sp/>as<sp/>uint8_t<sp/>array<sp/>for<sp/>ease<sp/>of<sp/>sizing,<sp/>indexing<sp/>and<sp/>alignment.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReceivedLength;</highlight></codeline>
<codeline lineno="967"><highlight class="normal">}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970" refid="stream__buffer_8h_1af65cd558025ddc29ca68fba1b3f5dc19" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="stream__buffer_8c_1a95465cd3702e3eae08afb8e69e1c6525" kindref="member">xStreamBufferIsEmpty</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer<sp/>)</highlight></codeline>
<codeline lineno="971"><highlight class="normal">{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xTail;</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>True<sp/>if<sp/>no<sp/>bytes<sp/>are<sp/>available.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/>xTail<sp/>=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" kindref="member">xTail</ref>;</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a75aafb9fdee8f0666837302bd9b12341" kindref="member">xHead</ref><sp/>==<sp/>xTail<sp/>)</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="990"><highlight class="normal">}</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="993" refid="stream__buffer_8h_1ae393d82ee06e89692248a4381f85dc86" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="stream__buffer_8c_1a77c2ae33c45c948e7af4d61fdd6cf1f1" kindref="member">xStreamBufferIsFull</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer<sp/>)</highlight></codeline>
<codeline lineno="994"><highlight class="normal">{</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBytesToStoreMessageLength;</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>generic<sp/>version<sp/>of<sp/>the<sp/>receive<sp/>function<sp/>is<sp/>used<sp/>by<sp/>both<sp/>message</highlight></codeline>
<codeline lineno="1002"><highlight class="comment"><sp/><sp/>buffers,<sp/>which<sp/>store<sp/>discrete<sp/>messages,<sp/>and<sp/>stream<sp/>buffers,<sp/>which<sp/>store<sp/>a</highlight></codeline>
<codeline lineno="1003"><highlight class="comment"><sp/><sp/>continuous<sp/>stream<sp/>of<sp/>bytes.<sp/><sp/>Discrete<sp/>messages<sp/>include<sp/>an<sp/>additional</highlight></codeline>
<codeline lineno="1004"><highlight class="comment"><sp/><sp/>sbBYTES_TO_STORE_MESSAGE_LENGTH<sp/>bytes<sp/>that<sp/>hold<sp/>the<sp/>length<sp/>of<sp/>the<sp/>message.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>&amp;<sp/><ref refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" kindref="member">sbFLAGS_IS_MESSAGE_BUFFER</ref><sp/>)<sp/>!=<sp/>(<sp/>uint8_t<sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>xBytesToStoreMessageLength<sp/>=<sp/><ref refid="stream__buffer_8c_1aaa21967227eb06d02cdd038047b836f6" kindref="member">sbBYTES_TO_STORE_MESSAGE_LENGTH</ref>;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>xBytesToStoreMessageLength<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>True<sp/>if<sp/>the<sp/>available<sp/>space<sp/>equals<sp/>zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="stream__buffer_8c_1a8fb90892c74eb94fb063b2a018a10509" kindref="member">xStreamBufferSpacesAvailable</ref>(<sp/>xStreamBuffer<sp/>)<sp/>&lt;=<sp/>xBytesToStoreMessageLength<sp/>)</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="1025"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028" refid="stream__buffer_8h_1abc37189e4eb8618f5434ae333dd50b23" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="stream__buffer_8c_1a734bf1bcef16810abb6d53781b8f1f07" kindref="member">xStreamBufferSendCompletedFromISR</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*pxHigherPriorityTaskWoken<sp/>)</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToReceive<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a1ed9129068b96a909356bd0369c5ecb0" kindref="member">xTaskNotifyFromISR</ref>(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToReceive,</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>uint32_t<sp/>)<sp/>0,</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" kindref="member">eNoAction</ref>,</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxHigherPriorityTaskWoken<sp/>);</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToReceive<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="1055"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058" refid="stream__buffer_8h_1ac12e93e96e0eafbc0e981d00e7275d32" refkind="member"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="stream__buffer_8c_1adbcf08da91cb0b9c179d012e0c99237d" kindref="member">xStreamBufferReceiveCompletedFromISR</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*pxHigherPriorityTaskWoken<sp/>)</highlight></codeline>
<codeline lineno="1059"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>=<sp/>xStreamBuffer;</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxStreamBuffer<sp/>);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToSend<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a1ed9129068b96a909356bd0369c5ecb0" kindref="member">xTaskNotifyFromISR</ref>(<sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToSend,</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>uint32_t<sp/>)<sp/>0,</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" kindref="member">eNoAction</ref>,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxHigherPriorityTaskWoken<sp/>);</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxStreamBuffer<sp/>)-&gt;xTaskWaitingToSend<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="1085"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088" refid="stream__buffer_8c_1ab05b79124292dd7bed33fca7a92473c0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1ab05b79124292dd7bed33fca7a92473c0" kindref="member">prvWriteBytesToBuffer</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*pucData,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xCount<sp/>)</highlight></codeline>
<codeline lineno="1089"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1090"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xNextHead,<sp/>xFirstLength;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xCount<sp/>&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/>xNextHead<sp/>=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a75aafb9fdee8f0666837302bd9b12341" kindref="member">xHead</ref>;</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>that<sp/>can<sp/>be<sp/>added<sp/>in<sp/>the<sp/>first<sp/>write<sp/>-</highlight></codeline>
<codeline lineno="1097"><highlight class="comment"><sp/><sp/>which<sp/>may<sp/>be<sp/>less<sp/>than<sp/>the<sp/>total<sp/>number<sp/>of<sp/>bytes<sp/>that<sp/>need<sp/>to<sp/>be<sp/>added<sp/>if</highlight></codeline>
<codeline lineno="1098"><highlight class="comment"><sp/><sp/>the<sp/>buffer<sp/>will<sp/>wrap<sp/>back<sp/>to<sp/>the<sp/>beginning.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/>xFirstLength<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a101a57cef3f76ec13110cec59ce49edf" kindref="member">configMIN</ref>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>-<sp/>xNextHead,<sp/>xCount<sp/>);</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>as<sp/>many<sp/>bytes<sp/>as<sp/>can<sp/>be<sp/>written<sp/>in<sp/>the<sp/>first<sp/>write.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>xNextHead<sp/>+<sp/>xFirstLength<sp/>)<sp/>&lt;=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>);</highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/>memcpy(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>)<sp/>(<sp/>&amp;(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" kindref="member">pucBuffer</ref>[<sp/>xNextHead<sp/>]<sp/>)<sp/>),<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pucData,<sp/>xFirstLength<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>memcpy()<sp/>requires<sp/>void<sp/>*.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1104"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>written<sp/>was<sp/>less<sp/>than<sp/>the<sp/>number<sp/>that<sp/>could<sp/>be</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/>written<sp/>in<sp/>the<sp/>first<sp/>write...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xCount<sp/>&gt;<sp/>xFirstLength<sp/>)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>...then<sp/>write<sp/>the<sp/>remaining<sp/>bytes<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>xCount<sp/>-<sp/>xFirstLength<sp/>)<sp/>&lt;=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>memcpy(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" kindref="member">pucBuffer</ref>,<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>&amp;(<sp/>pucData[<sp/>xFirstLength<sp/>]<sp/>),<sp/>xCount<sp/>-<sp/>xFirstLength<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>memcpy()<sp/>requires<sp/>void<sp/>*.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/>xNextHead<sp/>+=<sp/>xCount;</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xNextHead<sp/>&gt;=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>)</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>xNextHead<sp/>-=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref>;</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"></highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a75aafb9fdee8f0666837302bd9b12341" kindref="member">xHead</ref><sp/>=<sp/>xNextHead;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xCount;</highlight></codeline>
<codeline lineno="1131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134" refid="stream__buffer_8c_1a8ec163e54dc25c091dbff11c1b8f7a2c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1a8ec163e54dc25c091dbff11c1b8f7a2c" kindref="member">prvReadBytesFromBuffer</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*pxStreamBuffer,<sp/>uint8_t<sp/>*pucData,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xMaxCount,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBytesAvailable<sp/>)</highlight></codeline>
<codeline lineno="1135"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xCount,<sp/>xFirstLength,<sp/>xNextTail;</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>the<sp/>minimum<sp/>of<sp/>the<sp/>wanted<sp/>bytes<sp/>and<sp/>the<sp/>available<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1139"><highlight class="normal"><sp/><sp/>xCount<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a101a57cef3f76ec13110cec59ce49edf" kindref="member">configMIN</ref>(<sp/>xBytesAvailable,<sp/>xMaxCount<sp/>);</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"></highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xCount<sp/>&gt;<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/><sp/><sp/><sp/>xNextTail<sp/>=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" kindref="member">xTail</ref>;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"></highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>that<sp/>can<sp/>be<sp/>read<sp/>-<sp/>which<sp/>may<sp/>be</highlight></codeline>
<codeline lineno="1146"><highlight class="comment"><sp/><sp/><sp/><sp/>less<sp/>than<sp/>the<sp/>number<sp/>wanted<sp/>if<sp/>the<sp/>data<sp/>wraps<sp/>around<sp/>to<sp/>the<sp/>start<sp/>of</highlight></codeline>
<codeline lineno="1147"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/>xFirstLength<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a101a57cef3f76ec13110cec59ce49edf" kindref="member">configMIN</ref>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>-<sp/>xNextTail,<sp/>xCount<sp/>);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Obtain<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>it<sp/>is<sp/>possible<sp/>to<sp/>obtain<sp/>in<sp/>the<sp/>first</highlight></codeline>
<codeline lineno="1151"><highlight class="comment"><sp/><sp/><sp/><sp/>read.<sp/><sp/>Asserts<sp/>check<sp/>bounds<sp/>of<sp/>read<sp/>and<sp/>write.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xFirstLength<sp/>&lt;=<sp/>xMaxCount<sp/>);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>xNextTail<sp/>+<sp/>xFirstLength<sp/>)<sp/>&lt;=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>);</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>memcpy(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pucData,<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>&amp;(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" kindref="member">pucBuffer</ref>[<sp/>xNextTail<sp/>]<sp/>),<sp/>xFirstLength<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>memcpy()<sp/>requires<sp/>void<sp/>*.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1155"><highlight class="normal"></highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>total<sp/>number<sp/>of<sp/>wanted<sp/>bytes<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>number</highlight></codeline>
<codeline lineno="1157"><highlight class="comment"><sp/><sp/><sp/><sp/>that<sp/>could<sp/>be<sp/>read<sp/>in<sp/>the<sp/>first<sp/>read...<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xCount<sp/>&gt;<sp/>xFirstLength<sp/>)</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*...then<sp/>read<sp/>the<sp/>remaining<sp/>bytes<sp/>from<sp/>the<sp/>start<sp/>of<sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xCount<sp/>&lt;=<sp/>xMaxCount<sp/>);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>memcpy(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>&amp;(<sp/>pucData[<sp/>xFirstLength<sp/>]<sp/>),<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>(<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" kindref="member">pucBuffer</ref><sp/>),<sp/>xCount<sp/>-<sp/>xFirstLength<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>memcpy()<sp/>requires<sp/>void<sp/>*.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>the<sp/>tail<sp/>pointer<sp/>to<sp/>effectively<sp/>remove<sp/>the<sp/>data<sp/>read<sp/>from</highlight></codeline>
<codeline lineno="1170"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>buffer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/>xNextTail<sp/>+=<sp/>xCount;</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xNextTail<sp/>&gt;=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xNextTail<sp/>-=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref>;</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" kindref="member">xTail</ref><sp/>=<sp/>xNextTail;</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"></highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xCount;</highlight></codeline>
<codeline lineno="1186"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189" refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1ac4183c0af266bc5ffbd4f3eb4a4d07c2" kindref="member">prvBytesInBuffer</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer<sp/>)</highlight></codeline>
<codeline lineno="1190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Returns<sp/>the<sp/>distance<sp/>between<sp/>xTail<sp/>and<sp/>xHead.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xCount;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194"><highlight class="normal"><sp/><sp/>xCount<sp/>=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>+<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a75aafb9fdee8f0666837302bd9b12341" kindref="member">xHead</ref>;</highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>xCount<sp/>-=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a937e441ed6c946a099d52b5955d7302c" kindref="member">xTail</ref>;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<sp/>xCount<sp/>&gt;=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>)</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/>xCount<sp/>-=<sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref>;</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1204"><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xCount;</highlight></codeline>
<codeline lineno="1206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1207"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1208"><highlight class="normal"></highlight></codeline>
<codeline lineno="1209" refid="stream__buffer_8c_1a7f655ff13acb1a5614dbc7e7f43ecbb2" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="stream__buffer_8c_1a7f655ff13acb1a5614dbc7e7f43ecbb2" kindref="member">prvInitialiseNewStreamBuffer</ref>(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBuffer_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxStreamBuffer,</highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pucBuffer,</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xBufferSizeBytes,</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xTriggerLevelBytes,</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>ucFlags<sp/>)</highlight></codeline>
<codeline lineno="1214"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Assert<sp/>here<sp/>is<sp/>deliberately<sp/>writing<sp/>to<sp/>the<sp/>entire<sp/>buffer<sp/>to<sp/>ensure<sp/>it<sp/>can</highlight></codeline>
<codeline lineno="1216"><highlight class="comment"><sp/><sp/>be<sp/>written<sp/>to<sp/>without<sp/>generating<sp/>exceptions,<sp/>and<sp/>is<sp/>setting<sp/>the<sp/>buffer<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="1217"><highlight class="comment"><sp/><sp/>known<sp/>value<sp/>to<sp/>assist<sp/>in<sp/>development/debugging.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configASSERT_DEFINED<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1219"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>value<sp/>written<sp/>just<sp/>has<sp/>to<sp/>be<sp/>identifiable<sp/>when<sp/>looking<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="1221"><highlight class="comment"><sp/><sp/><sp/><sp/>memory.<sp/><sp/>Don&apos;t<sp/>use<sp/>0xA5<sp/>as<sp/>that<sp/>is<sp/>the<sp/>stack<sp/>fill<sp/>value<sp/>and<sp/>could</highlight></codeline>
<codeline lineno="1222"><highlight class="comment"><sp/><sp/><sp/><sp/>result<sp/>in<sp/>confusion<sp/>as<sp/>to<sp/>what<sp/>is<sp/>actually<sp/>being<sp/>observed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xWriteValue<sp/>=<sp/>0x55;</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>memset(<sp/>pucBuffer,<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>xWriteValue,<sp/>xBufferSizeBytes<sp/>)<sp/>==<sp/>pucBuffer<sp/>);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e529<sp/>!e438<sp/>xWriteValue<sp/>is<sp/>only<sp/>used<sp/>if<sp/>configASSERT()<sp/>is<sp/>defined.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/>memset(<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>pxStreamBuffer,<sp/>0x00,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="stream__buffer_8c_1ac30372f81bb381115f91d7daa384db2d" kindref="member">StreamBuffer_t</ref><sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>memset()<sp/>requires<sp/>void<sp/>*.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a4e05054a8a3d61a5cec0c18a70bbdb67" kindref="member">pucBuffer</ref><sp/>=<sp/>pucBuffer;</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a6eedf41c877edd42b3b460780d1b6555" kindref="member">xLength</ref><sp/>=<sp/>xBufferSizeBytes;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a4a7ee9b374cc0b358d049811def8d595" kindref="member">xTriggerLevelBytes</ref><sp/>=<sp/>xTriggerLevelBytes;</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/>pxStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>=<sp/>ucFlags;</highlight></codeline>
<codeline lineno="1233"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxStreamBufferGetStreamBufferNumber(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer<sp/>)</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xStreamBuffer-&gt;uxStreamBufferNumber;</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1244"><highlight class="normal"></highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"></highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vStreamBufferSetStreamBufferNumber(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer,<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxStreamBufferNumber<sp/>)</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>xStreamBuffer-&gt;uxStreamBufferNumber<sp/>=<sp/>uxStreamBufferNumber;</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/>uint8_t<sp/>ucStreamBufferGetStreamBufferType(<sp/><ref refid="struct_stream_buffer_def__t" kindref="compound">StreamBufferHandle_t</ref><sp/>xStreamBuffer<sp/>)</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/>xStreamBuffer-&gt;<ref refid="struct_stream_buffer_def__t_1a1afd02d997a1cb3149e3cf203c681d58" kindref="member">ucFlags</ref><sp/>&amp;<sp/><ref refid="stream__buffer_8c_1a4954c04e3f9f6b0d4a98b9441b35d896" kindref="member">sbFLAGS_IS_MESSAGE_BUFFER</ref><sp/>);</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/stream_buffer.c"/>
  </compounddef>
</doxygen>
