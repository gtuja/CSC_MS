<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="event__groups_8h" kind="file" language="C++">
    <compoundname>event_groups.h</compoundname>
    <includes refid="timers_8h" local="yes">timers.h</includes>
    <includedby refid="cmsis__os2_8c" local="yes">NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.c</includedby>
    <includedby refid="event__groups_8c" local="yes">NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c</includedby>
    <incdepgraph>
      <node id="1">
        <label>NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h</label>
        <link refid="event__groups_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>list.h</label>
        <link refid="list_8h"/>
      </node>
      <node id="3">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>timers.h</label>
        <link refid="timers_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2">
        <label>NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/CMSIS_RTOS_V2/cmsis_os2.c</label>
        <link refid="cmsis__os2_8c"/>
      </node>
      <node id="3">
        <label>NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c</label>
        <link refid="event__groups_8c"/>
      </node>
      <node id="1">
        <label>NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h</label>
        <link refid="event__groups_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <sectiondef kind="define">
      <memberdef kind="define" id="event__groups_8h_1a3d7de214a697f33fe7b914e26a93f33a" prot="public" static="no">
        <name>xEventGroupClearBitsFromISR</name>
        <param><defname>xEventGroup</defname></param>
        <param><defname>uxBitsToClear</defname></param>
        <initializer><ref refid="timers_8h_1ae0d9338933037e6feebe6437763fa299" kindref="member">xTimerPendFunctionCallFromISR</ref>( <ref refid="event__groups_8c_1a3bce459038e87064109c8462b1174c29" kindref="member">vEventGroupClearBitsCallback</ref>, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="410" column="11" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" bodystart="410" bodyend="-1"/>
        <referencedby refid="cmsis__os2_8c_1a93bf258ca0007c6641fbe8e4f2b8a1e5" compoundref="cmsis__os2_8c" startline="1181" endline="1205">osEventFlagsClear</referencedby>
      </memberdef>
      <memberdef kind="define" id="event__groups_8h_1a62b68278abac6358369ae8e390988a02" prot="public" static="no">
        <name>xEventGroupSetBitsFromISR</name>
        <param><defname>xEventGroup</defname></param>
        <param><defname>uxBitsToSet</defname></param>
        <param><defname>pxHigherPriorityTaskWoken</defname></param>
        <initializer><ref refid="timers_8h_1ae0d9338933037e6feebe6437763fa299" kindref="member">xTimerPendFunctionCallFromISR</ref>( <ref refid="event__groups_8c_1a54db6cc97bbb926aa4b78d5affc257d9" kindref="member">vEventGroupSetBitsCallback</ref>, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="562" column="11" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" bodystart="562" bodyend="-1"/>
        <referencedby refid="cmsis__os2_8c_1a33b71d14cecf90b4e72639dd19f23a5e" compoundref="cmsis__os2_8c" startline="1150" endline="1179">osEventFlagsSet</referencedby>
      </memberdef>
      <memberdef kind="define" id="event__groups_8h_1a0ae86f092fb07ccb475ae938f9a12584" prot="public" static="no">
        <name>xEventGroupGetBits</name>
        <param><defname>xEventGroup</defname></param>
        <initializer><ref refid="event__groups_8c_1a71dd2680fdfbdde7d6b10db203e266ba" kindref="member">xEventGroupClearBits</ref>( xEventGroup, 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="708" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" bodystart="708" bodyend="-1"/>
        <referencedby refid="cmsis__os2_8c_1a8bda3185f46bfd278cea8a6cf357677d" compoundref="cmsis__os2_8c" startline="1207" endline="1222">osEventFlagsGet</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" prot="public" static="no">
        <type>struct <ref refid="struct_event_group_def__t" kindref="compound">EventGroupDef_t</ref> *</type>
        <definition>typedef struct EventGroupDef_t* EventGroupHandle_t</definition>
        <argsstring></argsstring>
        <name>EventGroupHandle_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="82" column="31" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" prot="public" static="no">
        <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
        <definition>typedef TickType_t EventBits_t</definition>
        <argsstring></argsstring>
        <name>EventBits_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="92" column="20" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" bodystart="92" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="event__groups_8h_1aab9d5b405bc57b7624dcabe9a9a503db" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
        <definition>EventBits_t xEventGroupWaitBits</definition>
        <argsstring>(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>xEventGroupWaitBits</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxBitsToWaitFor</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
          <declname>xClearOnExit</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
          <declname>xWaitForAllBits</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="295" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="311" bodyend="458" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" declline="295" declcolumn="13"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="event__groups_8c_1a1404686af7c8070fa57675707c817abc" compoundref="event__groups_8c" startline="57">eventCLEAR_EVENTS_ON_EXIT_BIT</references>
        <references refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" compoundref="event__groups_8c" startline="60">eventEVENT_BITS_CONTROL_BYTES</references>
        <references refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" compoundref="event__groups_8c" startline="58">eventUNBLOCKED_DUE_TO_BIT_SET</references>
        <references refid="event__groups_8c_1ae98d5f1271845ad42742aef9659e1568" compoundref="event__groups_8c" startline="59">eventWAIT_FOR_ALL_BITS</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" compoundref="_free_r_t_o_s_8h" startline="746">portYIELD_WITHIN_API</references>
        <references refid="event__groups_8c_1a152ce51000f6d8d26afbd14b4794e036" compoundref="event__groups_8c" startline="671" endline="703">prvTestWaitCondition</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" compoundref="task_8h" startline="227">taskSCHEDULER_SUSPENDED</references>
        <references refid="_free_r_t_o_s_8h_1aeb8953a9be153986d0e830acdf60445a" compoundref="_free_r_t_o_s_8h" startline="596">traceEVENT_GROUP_WAIT_BITS_BLOCK</references>
        <references refid="_free_r_t_o_s_8h_1ad7a6b7684053a41690cac487ccf4d927" compoundref="_free_r_t_o_s_8h" startline="600">traceEVENT_GROUP_WAIT_BITS_END</references>
        <references refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" compoundref="event__groups_8c" startline="65">EventGroupDef_t::uxEventBits</references>
        <references refid="task_8h_1a7793b4bbe45c10d4c5104c126b89e87c" compoundref="tasks_8c" startline="4601" endline="4612">uxTaskResetEventItemValue</references>
        <references refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" compoundref="tasks_8c" startline="3080" endline="3101">vTaskPlaceOnUnorderedEventList</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="task_8h_1a0241000e08a261372186d34825a35979">xTaskGetSchedulerState</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" compoundref="event__groups_8c" startline="66">EventGroupDef_t::xTasksWaitingForBits</references>
        <referencedby refid="cmsis__os2_8c_1a52acb34a8322e58020227344fe662b4e" compoundref="cmsis__os2_8c" startline="1224" endline="1272">osEventFlagsWait</referencedby>
      </memberdef>
      <memberdef kind="function" id="event__groups_8h_1a0fb72cfdd4f0d5f86d955fc3af448f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
        <definition>EventBits_t xEventGroupClearBits</definition>
        <argsstring>(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear) PRIVILEGED_FUNCTION</argsstring>
        <name>xEventGroupClearBits</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxBitsToClear</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="352" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="461" bodyend="485" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" declline="352" declcolumn="13"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" compoundref="event__groups_8c" startline="60">eventEVENT_BITS_CONTROL_BYTES</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="_free_r_t_o_s_8h_1ad929200fa50e5a1ae2c5894ffeea2ef6" compoundref="_free_r_t_o_s_8h" startline="604">traceEVENT_GROUP_CLEAR_BITS</references>
        <references refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" compoundref="event__groups_8c" startline="65">EventGroupDef_t::uxEventBits</references>
        <referencedby refid="cmsis__os2_8c_1a93bf258ca0007c6641fbe8e4f2b8a1e5" compoundref="cmsis__os2_8c" startline="1181" endline="1205">osEventFlagsClear</referencedby>
        <referencedby refid="event__groups_8c_1a3bce459038e87064109c8462b1174c29" compoundref="event__groups_8c" startline="665" endline="668">vEventGroupClearBitsCallback</referencedby>
      </memberdef>
      <memberdef kind="function" id="event__groups_8h_1a02d7b3bb55f7e11d9c47116266c5fb2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
        <definition>EventBits_t xEventGroupSetBits</definition>
        <argsstring>(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet) PRIVILEGED_FUNCTION</argsstring>
        <name>xEventGroupSetBits</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxBitsToSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="485" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="519" bodyend="610" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" declline="485" declcolumn="13"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="event__groups_8c_1a1404686af7c8070fa57675707c817abc" compoundref="event__groups_8c" startline="57">eventCLEAR_EVENTS_ON_EXIT_BIT</references>
        <references refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" compoundref="event__groups_8c" startline="60">eventEVENT_BITS_CONTROL_BYTES</references>
        <references refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" compoundref="event__groups_8c" startline="58">eventUNBLOCKED_DUE_TO_BIT_SET</references>
        <references refid="event__groups_8c_1ae98d5f1271845ad42742aef9659e1568" compoundref="event__groups_8c" startline="59">eventWAIT_FOR_ALL_BITS</references>
        <references refid="list_8h_1a96cb0919f02e5c0d8e41ded0e65197a3" compoundref="list_8h" startline="241">listGET_END_MARKER</references>
        <references refid="list_8h_1a987cb2766e509022c23b654907cea199" compoundref="list_8h" startline="225">listGET_HEAD_ENTRY</references>
        <references refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" compoundref="list_8h" startline="208">listGET_LIST_ITEM_VALUE</references>
        <references refid="list_8h_1aabf78d3f24ba56ac1d0bf0179438b960" compoundref="list_8h" startline="233">listGET_NEXT</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1a56eb08eb12a36c99a32729a518d5b3fd" compoundref="_free_r_t_o_s_8h" startline="612">traceEVENT_GROUP_SET_BITS</references>
        <references refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" compoundref="event__groups_8c" startline="65">EventGroupDef_t::uxEventBits</references>
        <references refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" compoundref="tasks_8c" startline="3205" endline="3250">vTaskRemoveFromUnorderedEventList</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" compoundref="event__groups_8c" startline="66">EventGroupDef_t::xTasksWaitingForBits</references>
        <referencedby refid="cmsis__os2_8c_1a33b71d14cecf90b4e72639dd19f23a5e" compoundref="cmsis__os2_8c" startline="1150" endline="1179">osEventFlagsSet</referencedby>
        <referencedby refid="event__groups_8c_1a54db6cc97bbb926aa4b78d5affc257d9" compoundref="event__groups_8c" startline="657" endline="660">vEventGroupSetBitsCallback</referencedby>
        <referencedby refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" compoundref="event__groups_8c" startline="191" endline="308">xEventGroupSync</referencedby>
      </memberdef>
      <memberdef kind="function" id="event__groups_8h_1a869511456b86426f52e2eec898bff341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
        <definition>EventBits_t xEventGroupSync</definition>
        <argsstring>(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait) PRIVILEGED_FUNCTION</argsstring>
        <name>xEventGroupSync</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxBitsToSet</declname>
        </param>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxBitsToWaitFor</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="689" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="191" bodyend="308" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" declline="689" declcolumn="13"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="event__groups_8c_1a1404686af7c8070fa57675707c817abc" compoundref="event__groups_8c" startline="57">eventCLEAR_EVENTS_ON_EXIT_BIT</references>
        <references refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" compoundref="event__groups_8c" startline="60">eventEVENT_BITS_CONTROL_BYTES</references>
        <references refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" compoundref="event__groups_8c" startline="58">eventUNBLOCKED_DUE_TO_BIT_SET</references>
        <references refid="event__groups_8c_1ae98d5f1271845ad42742aef9659e1568" compoundref="event__groups_8c" startline="59">eventWAIT_FOR_ALL_BITS</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" compoundref="_free_r_t_o_s_8h" startline="746">portYIELD_WITHIN_API</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" compoundref="task_8h" startline="227">taskSCHEDULER_SUSPENDED</references>
        <references refid="_free_r_t_o_s_8h_1a898ead658f344a0475a9f2ed3bf8f407" compoundref="_free_r_t_o_s_8h" startline="588">traceEVENT_GROUP_SYNC_BLOCK</references>
        <references refid="_free_r_t_o_s_8h_1af0cb50e5a1402163cd29e638c6140a2e" compoundref="_free_r_t_o_s_8h" startline="592">traceEVENT_GROUP_SYNC_END</references>
        <references refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" compoundref="event__groups_8c" startline="65">EventGroupDef_t::uxEventBits</references>
        <references refid="task_8h_1a7793b4bbe45c10d4c5104c126b89e87c" compoundref="tasks_8c" startline="4601" endline="4612">uxTaskResetEventItemValue</references>
        <references refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" compoundref="tasks_8c" startline="3080" endline="3101">vTaskPlaceOnUnorderedEventList</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" compoundref="event__groups_8c" startline="519" endline="610">xEventGroupSetBits</references>
        <references refid="task_8h_1a0241000e08a261372186d34825a35979">xTaskGetSchedulerState</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" compoundref="event__groups_8c" startline="66">EventGroupDef_t::xTasksWaitingForBits</references>
      </memberdef>
      <memberdef kind="function" id="event__groups_8h_1a95822db4357d0b77c35aed0c7427eca0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
        <definition>EventBits_t xEventGroupGetBitsFromISR</definition>
        <argsstring>(EventGroupHandle_t xEventGroup) PRIVILEGED_FUNCTION</argsstring>
        <name>xEventGroupGetBitsFromISR</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="725" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="503" bodyend="516" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" declline="725" declcolumn="13"/>
        <references refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" compoundref="_free_r_t_o_s_8h" startline="286">portCLEAR_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" compoundref="_free_r_t_o_s_8h" startline="282">portSET_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" compoundref="event__groups_8c" startline="65">EventGroupDef_t::uxEventBits</references>
        <referencedby refid="cmsis__os2_8c_1a93bf258ca0007c6641fbe8e4f2b8a1e5" compoundref="cmsis__os2_8c" startline="1181" endline="1205">osEventFlagsClear</referencedby>
        <referencedby refid="cmsis__os2_8c_1a8bda3185f46bfd278cea8a6cf357677d" compoundref="cmsis__os2_8c" startline="1207" endline="1222">osEventFlagsGet</referencedby>
      </memberdef>
      <memberdef kind="function" id="event__groups_8h_1a50cb52d1c81b063fd8d94f5293dcfea9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vEventGroupDelete</definition>
        <argsstring>(EventGroupHandle_t xEventGroup) PRIVILEGED_FUNCTION</argsstring>
        <name>vEventGroupDelete</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <briefdescription>
<para><ref refid="event__groups_8h" kindref="compound">event_groups.h</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><preformatted>
 void xEventGroupDelete( EventGroupHandle_t xEventGroup );
</preformatted></para>
<para>Delete an event group that was previously created by a call to xEventGroupCreate(). Tasks that are blocked on the event group will be unblocked and obtain 0 as the event group&apos;s value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xEventGroup</parametername>
</parameternamelist>
<parameterdescription>
<para>The event group being deleted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="739" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="613" bodyend="652" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" declline="739" declcolumn="6"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" compoundref="event__groups_8c" startline="58">eventUNBLOCKED_DUE_TO_BIT_SET</references>
        <references refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" compoundref="list_8h" startline="255">listCURRENT_LIST_LENGTH</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1aa297f3eba16856d00d0d3a6cea5e9df6" compoundref="list_8h" startline="156">xMINI_LIST_ITEM::pxNext</references>
        <references refid="_free_r_t_o_s_8h_1abf48364a72dd38af47bf7203c06ee832" compoundref="_free_r_t_o_s_8h" startline="620">traceEVENT_GROUP_DELETE</references>
        <references refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" compoundref="heap__4_8c" startline="266" endline="312">vPortFree</references>
        <references refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" compoundref="tasks_8c" startline="3205" endline="3250">vTaskRemoveFromUnorderedEventList</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" compoundref="list_8h" startline="169">xLIST::xListEnd</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" compoundref="event__groups_8c" startline="66">EventGroupDef_t::xTasksWaitingForBits</references>
        <referencedby refid="cmsis__os2_8c_1a7c4acf2fb0d506ec82905dee53fb5435" compoundref="cmsis__os2_8c" startline="1274" endline="1294">osEventFlagsDelete</referencedby>
      </memberdef>
      <memberdef kind="function" id="event__groups_8h_1abe76a301815525eb5e03f331e5e51ae3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vEventGroupSetBitsCallback</definition>
        <argsstring>(void *pvEventGroup, const uint32_t ulBitsToSet) PRIVILEGED_FUNCTION</argsstring>
        <name>vEventGroupSetBitsCallback</name>
        <param>
          <type>void *</type>
          <declname>pvEventGroup</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ulBitsToSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="742" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="657" bodyend="660" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" declline="742" declcolumn="6"/>
        <references refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" compoundref="event__groups_8c" startline="519" endline="610">xEventGroupSetBits</references>
      </memberdef>
      <memberdef kind="function" id="event__groups_8h_1a9187a137998183178320167de254cce9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vEventGroupClearBitsCallback</definition>
        <argsstring>(void *pvEventGroup, const uint32_t ulBitsToClear) PRIVILEGED_FUNCTION</argsstring>
        <name>vEventGroupClearBitsCallback</name>
        <param>
          <type>void *</type>
          <declname>pvEventGroup</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ulBitsToClear</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" line="743" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="665" bodyend="668" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h" declline="743" declcolumn="6"/>
        <references refid="event__groups_8c_1a71dd2680fdfbdde7d6b10db203e266ba" compoundref="event__groups_8c" startline="461" endline="485">xEventGroupClearBits</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>FreeRTOS<sp/>Kernel<sp/>V10.3.1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020<sp/>Amazon.com,<sp/>Inc.<sp/>or<sp/>its<sp/>affiliates.<sp/><sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>http://www.FreeRTOS.org</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>http://aws.amazon.com/freertos</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>1<sp/>tab<sp/>==<sp/>4<sp/>spaces!</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>EVENT_GROUPS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EVENT_GROUPS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INC_FREERTOS_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#error<sp/>&quot;include<sp/>FreeRTOS.h&quot;<sp/>must<sp/>appear<sp/>in<sp/>source<sp/>files<sp/>before<sp/>&quot;include<sp/>event_groups.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FreeRTOS<sp/>includes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="timers_8h" kindref="compound">timers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_event_group_def__t" kindref="compound">EventGroupDef_t</ref>;</highlight></codeline>
<codeline lineno="82" refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_event_group_def__t" kindref="compound">EventGroupDef_t</ref><sp/>*<sp/><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>The<sp/>type<sp/>that<sp/>holds<sp/>event<sp/>bits<sp/>always<sp/>matches<sp/>TickType_t<sp/>-<sp/>therefore<sp/>the</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*<sp/>number<sp/>of<sp/>bits<sp/>it<sp/>holds<sp/>is<sp/>set<sp/>by<sp/>configUSE_16_BIT_TICKS<sp/>(16<sp/>bits<sp/>if<sp/>set<sp/>to<sp/>1,</highlight></codeline>
<codeline lineno="87"><highlight class="comment"><sp/>*<sp/>32<sp/>bits<sp/>if<sp/>set<sp/>to<sp/>0.</highlight></codeline>
<codeline lineno="88"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>\defgroup<sp/>EventBits_t<sp/>EventBits_t</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>\ingroup<sp/>EventGroup</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroupCreate(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroupCreateStatic(<sp/><ref refid="structx_s_t_a_t_i_c___e_v_e_n_t___g_r_o_u_p" kindref="compound">StaticEventGroup_t</ref><sp/>*pxEventGroupBuffer<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/><ref refid="event__groups_8h_1aab9d5b405bc57b7624dcabe9a9a503db" kindref="member">xEventGroupWaitBits</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToWaitFor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xClearOnExit,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xWaitForAllBits,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/><ref refid="event__groups_8h_1a0fb72cfdd4f0d5f86d955fc3af448f2a" kindref="member">xEventGroupClearBits</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToClear<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="event__groups_8h_1a3d7de214a697f33fe7b914e26a93f33a" kindref="member">xEventGroupClearBitsFromISR</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToClear<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="event__groups_8h_1a3d7de214a697f33fe7b914e26a93f33a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>xEventGroupClearBitsFromISR(<sp/>xEventGroup,<sp/>uxBitsToClear<sp/>)<sp/>xTimerPendFunctionCallFromISR(<sp/>vEventGroupClearBitsCallback,<sp/>(<sp/>void<sp/>*<sp/>)<sp/>xEventGroup,<sp/>(<sp/>uint32_t<sp/>)<sp/>uxBitsToClear,<sp/>NULL<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/><ref refid="event__groups_8h_1a02d7b3bb55f7e11d9c47116266c5fb2e" kindref="member">xEventGroupSetBits</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToSet<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="event__groups_8h_1a62b68278abac6358369ae8e390988a02" kindref="member">xEventGroupSetBitsFromISR</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToSet,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*pxHigherPriorityTaskWoken<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="event__groups_8h_1a62b68278abac6358369ae8e390988a02" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>xEventGroupSetBitsFromISR(<sp/>xEventGroup,<sp/>uxBitsToSet,<sp/>pxHigherPriorityTaskWoken<sp/>)<sp/>xTimerPendFunctionCallFromISR(<sp/>vEventGroupSetBitsCallback,<sp/>(<sp/>void<sp/>*<sp/>)<sp/>xEventGroup,<sp/>(<sp/>uint32_t<sp/>)<sp/>uxBitsToSet,<sp/>pxHigherPriorityTaskWoken<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/><ref refid="event__groups_8h_1a869511456b86426f52e2eec898bff341" kindref="member">xEventGroupSync</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToSet,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToWaitFor,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="708" refid="event__groups_8h_1a0ae86f092fb07ccb475ae938f9a12584" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>xEventGroupGetBits(<sp/>xEventGroup<sp/>)<sp/>xEventGroupClearBits(<sp/>xEventGroup,<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/><ref refid="event__groups_8h_1a95822db4357d0b77c35aed0c7427eca0" kindref="member">xEventGroupGetBitsFromISR</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1a50cb52d1c81b063fd8d94f5293dcfea9" kindref="member">vEventGroupDelete</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>internal<sp/>use<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1abe76a301815525eb5e03f331e5e51ae3" kindref="member">vEventGroupSetBitsCallback</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulBitsToSet<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1a9187a137998183178320167de254cce9" kindref="member">vEventGroupClearBitsCallback</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulBitsToClear<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(configUSE_TRACE_FACILITY<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxEventGroupGetNumber(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>xEventGroup<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vEventGroupSetNumber(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>xEventGroup,<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxEventGroupNumber<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"></highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>EVENT_GROUPS_H<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/include/event_groups.h"/>
  </compounddef>
</doxygen>
