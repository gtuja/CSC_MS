<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="group__x_message_buffer_create_static" kind="group">
    <compoundname>xMessageBufferCreateStatic</compoundname>
    <title>xMessageBufferCreateStatic</title>
    <briefdescription>
<para><ref refid="message__buffer_8h" kindref="compound">message_buffer.h</ref> </para>
    </briefdescription>
    <detaileddescription>
<para><preformatted>
MessageBufferHandle_t <ref refid="message__buffer_8h_1acc84f4a15dbd39ecbad35f7337e78b2c" kindref="member">xMessageBufferCreateStatic( size_t xBufferSizeBytes,
                                                  uint8_t *pucMessageBufferStorageArea,
                                                  StaticMessageBuffer_t *pxStaticMessageBuffer )</ref>;
</preformatted> Creates a new message buffer using statically allocated memory. See <ref refid="message__buffer_8h_1a2959cd0e3d2bd20d46908e5c9872be36" kindref="member">xMessageBufferCreate()</ref> for a version that uses dynamically allocated memory.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xBufferSizeBytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size, in bytes, of the buffer pointed to by the pucMessageBufferStorageArea parameter. When a message is written to the message buffer an additional sizeof( size_t ) bytes are also written to store the message&apos;s length. sizeof( size_t ) is typically 4 bytes on a 32-bit architecture, so on most 32-bit architecture a 10 byte message will take up 14 bytes of message buffer space. The maximum number of bytes that can be stored in the message buffer is actually (xBufferSizeBytes - 1).</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pucMessageBufferStorageArea</parametername>
</parameternamelist>
<parameterdescription>
<para>Must point to a uint8_t array that is at least xBufferSizeBytes + 1 big. This is the array to which messages are copied when they are written to the message buffer.</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pxStaticMessageBuffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Must point to a variable of type StaticMessageBuffer_t, which will be used to hold the message buffer&apos;s data structure.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If the message buffer is created successfully then a handle to the created message buffer is returned. If either pucMessageBufferStorageArea or pxStaticmessageBuffer are NULL then NULL is returned.</para>
</simplesect>
Example use: <preformatted>

// Used to dimension the array used to hold the messages.  The available space
// will actually be one less than this, so 999.
#define STORAGE_SIZE_BYTES 1000

// Defines the memory that will actually hold the messages within the message
// buffer.
static uint8_t ucStorageBuffer[ STORAGE_SIZE_BYTES ];

// The variable used to hold the message buffer structure.
StaticMessageBuffer_t xMessageBufferStruct;

void MyFunction( void )
{
MessageBufferHandle_t xMessageBuffer;

    xMessageBuffer = <ref refid="message__buffer_8h_1acc84f4a15dbd39ecbad35f7337e78b2c" kindref="member">xMessageBufferCreateStatic( sizeof( ucBufferStorage ),
                                                 ucBufferStorage,
                                                 &amp;xMessageBufferStruct )</ref>;

    // As neither the pucMessageBufferStorageArea or pxStaticMessageBuffer
    // parameters were NULL, xMessageBuffer will not be NULL, and can be used to
    // reference the created message buffer in other message buffer API calls.

    // Other code that uses the message buffer can go here.
}

</preformatted>    </para>
    </detaileddescription>
  </compounddef>
</doxygen>
