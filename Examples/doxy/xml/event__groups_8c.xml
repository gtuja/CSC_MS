<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="event__groups_8c" kind="file" language="C++">
    <compoundname>event_groups.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes refid="_free_r_t_o_s_8h" local="yes">FreeRTOS.h</includes>
    <includes refid="task_8h" local="yes">task.h</includes>
    <includes refid="timers_8h" local="yes">timers.h</includes>
    <includes refid="event__groups_8h" local="yes">event_groups.h</includes>
    <incdepgraph>
      <node id="6">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
      </node>
      <node id="1">
        <label>NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c</label>
        <link refid="event__groups_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="9">
        <label>deprecated_definitions.h</label>
        <link refid="deprecated__definitions_8h"/>
      </node>
      <node id="15">
        <label>event_groups.h</label>
        <link refid="event__groups_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>list.h</label>
        <link refid="list_8h"/>
      </node>
      <node id="11">
        <label>mpu_wrappers.h</label>
        <link refid="mpu__wrappers_8h"/>
      </node>
      <node id="8">
        <label>portable.h</label>
        <link refid="portable_8h"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>projdefs.h</label>
        <link refid="projdefs_8h"/>
      </node>
      <node id="12">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>timers.h</label>
        <link refid="timers_8h"/>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>portmacro.h</label>
        <link refid="portmacro_8h"/>
      </node>
      <node id="4">
        <label>stddef.h</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="struct_event_group_def__t" prot="public">EventGroupDef_t</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="event__groups_8c_1ab622d8c674f2a417a666a7ed89109e79" prot="public" static="no">
        <name>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="34" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="event__groups_8c_1a1404686af7c8070fa57675707c817abc" prot="public" static="no">
        <name>eventCLEAR_EVENTS_ON_EXIT_BIT</name>
        <initializer>0x01000000UL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="57" column="11" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="57" bodyend="-1"/>
        <referencedby refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" compoundref="event__groups_8c" startline="519" endline="610">xEventGroupSetBits</referencedby>
        <referencedby refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" compoundref="event__groups_8c" startline="191" endline="308">xEventGroupSync</referencedby>
        <referencedby refid="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" compoundref="event__groups_8c" startline="311" endline="458">xEventGroupWaitBits</referencedby>
      </memberdef>
      <memberdef kind="define" id="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" prot="public" static="no">
        <name>eventUNBLOCKED_DUE_TO_BIT_SET</name>
        <initializer>0x02000000UL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="58" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="58" bodyend="-1"/>
        <referencedby refid="event__groups_8c_1a6939faca89fc4ba52fa8288527042464" compoundref="event__groups_8c" startline="613" endline="652">vEventGroupDelete</referencedby>
        <referencedby refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" compoundref="event__groups_8c" startline="519" endline="610">xEventGroupSetBits</referencedby>
        <referencedby refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" compoundref="event__groups_8c" startline="191" endline="308">xEventGroupSync</referencedby>
        <referencedby refid="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" compoundref="event__groups_8c" startline="311" endline="458">xEventGroupWaitBits</referencedby>
      </memberdef>
      <memberdef kind="define" id="event__groups_8c_1ae98d5f1271845ad42742aef9659e1568" prot="public" static="no">
        <name>eventWAIT_FOR_ALL_BITS</name>
        <initializer>0x04000000UL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="59" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="59" bodyend="-1"/>
        <referencedby refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" compoundref="event__groups_8c" startline="519" endline="610">xEventGroupSetBits</referencedby>
        <referencedby refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" compoundref="event__groups_8c" startline="191" endline="308">xEventGroupSync</referencedby>
        <referencedby refid="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" compoundref="event__groups_8c" startline="311" endline="458">xEventGroupWaitBits</referencedby>
      </memberdef>
      <memberdef kind="define" id="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" prot="public" static="no">
        <name>eventEVENT_BITS_CONTROL_BYTES</name>
        <initializer>0xff000000UL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="60" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="60" bodyend="-1"/>
        <referencedby refid="event__groups_8c_1a71dd2680fdfbdde7d6b10db203e266ba" compoundref="event__groups_8c" startline="461" endline="485">xEventGroupClearBits</referencedby>
        <referencedby refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" compoundref="event__groups_8c" startline="519" endline="610">xEventGroupSetBits</referencedby>
        <referencedby refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" compoundref="event__groups_8c" startline="191" endline="308">xEventGroupSync</referencedby>
        <referencedby refid="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" compoundref="event__groups_8c" startline="311" endline="458">xEventGroupWaitBits</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="event__groups_8c_1ae4fc9408a7fab90c6296379ff3cb0f11" prot="public" static="no">
        <type>struct <ref refid="struct_event_group_def__t" kindref="compound">EventGroupDef_t</ref></type>
        <definition>typedef struct EventGroupDef_t EventGroup_t</definition>
        <argsstring></argsstring>
        <name>EventGroup_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="75" column="14"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="event__groups_8c_1a152ce51000f6d8d26afbd14b4794e036" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>static BaseType_t prvTestWaitCondition</definition>
        <argsstring>(const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits) PRIVILEGED_FUNCTION</argsstring>
        <name>prvTestWaitCondition</name>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxCurrentEventBits</declname>
        </param>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxBitsToWaitFor</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
          <declname>xWaitForAllBits</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="671" column="19" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="671" bodyend="703" declfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" declline="87" declcolumn="19"/>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <referencedby refid="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" compoundref="event__groups_8c" startline="311" endline="458">xEventGroupWaitBits</referencedby>
      </memberdef>
      <memberdef kind="function" id="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
        <definition>EventBits_t xEventGroupSync</definition>
        <argsstring>(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, const EventBits_t uxBitsToWaitFor, TickType_t xTicksToWait)</argsstring>
        <name>xEventGroupSync</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxBitsToSet</declname>
        </param>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxBitsToWaitFor</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="191" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="191" bodyend="308"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="event__groups_8c_1a1404686af7c8070fa57675707c817abc" compoundref="event__groups_8c" startline="57">eventCLEAR_EVENTS_ON_EXIT_BIT</references>
        <references refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" compoundref="event__groups_8c" startline="60">eventEVENT_BITS_CONTROL_BYTES</references>
        <references refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" compoundref="event__groups_8c" startline="58">eventUNBLOCKED_DUE_TO_BIT_SET</references>
        <references refid="event__groups_8c_1ae98d5f1271845ad42742aef9659e1568" compoundref="event__groups_8c" startline="59">eventWAIT_FOR_ALL_BITS</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" compoundref="_free_r_t_o_s_8h" startline="746">portYIELD_WITHIN_API</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" compoundref="task_8h" startline="227">taskSCHEDULER_SUSPENDED</references>
        <references refid="_free_r_t_o_s_8h_1a898ead658f344a0475a9f2ed3bf8f407" compoundref="_free_r_t_o_s_8h" startline="588">traceEVENT_GROUP_SYNC_BLOCK</references>
        <references refid="_free_r_t_o_s_8h_1af0cb50e5a1402163cd29e638c6140a2e" compoundref="_free_r_t_o_s_8h" startline="592">traceEVENT_GROUP_SYNC_END</references>
        <references refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" compoundref="event__groups_8c" startline="65">EventGroupDef_t::uxEventBits</references>
        <references refid="task_8h_1a7793b4bbe45c10d4c5104c126b89e87c" compoundref="tasks_8c" startline="4601" endline="4612">uxTaskResetEventItemValue</references>
        <references refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" compoundref="tasks_8c" startline="3080" endline="3101">vTaskPlaceOnUnorderedEventList</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" compoundref="event__groups_8c" startline="519" endline="610">xEventGroupSetBits</references>
        <references refid="task_8h_1a0241000e08a261372186d34825a35979">xTaskGetSchedulerState</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" compoundref="event__groups_8c" startline="66">EventGroupDef_t::xTasksWaitingForBits</references>
      </memberdef>
      <memberdef kind="function" id="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
        <definition>EventBits_t xEventGroupWaitBits</definition>
        <argsstring>(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait)</argsstring>
        <name>xEventGroupWaitBits</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxBitsToWaitFor</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
          <declname>xClearOnExit</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
          <declname>xWaitForAllBits</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="311" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="311" bodyend="458"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="event__groups_8c_1a1404686af7c8070fa57675707c817abc" compoundref="event__groups_8c" startline="57">eventCLEAR_EVENTS_ON_EXIT_BIT</references>
        <references refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" compoundref="event__groups_8c" startline="60">eventEVENT_BITS_CONTROL_BYTES</references>
        <references refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" compoundref="event__groups_8c" startline="58">eventUNBLOCKED_DUE_TO_BIT_SET</references>
        <references refid="event__groups_8c_1ae98d5f1271845ad42742aef9659e1568" compoundref="event__groups_8c" startline="59">eventWAIT_FOR_ALL_BITS</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" compoundref="_free_r_t_o_s_8h" startline="746">portYIELD_WITHIN_API</references>
        <references refid="event__groups_8c_1a152ce51000f6d8d26afbd14b4794e036" compoundref="event__groups_8c" startline="671" endline="703">prvTestWaitCondition</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" compoundref="task_8h" startline="227">taskSCHEDULER_SUSPENDED</references>
        <references refid="_free_r_t_o_s_8h_1aeb8953a9be153986d0e830acdf60445a" compoundref="_free_r_t_o_s_8h" startline="596">traceEVENT_GROUP_WAIT_BITS_BLOCK</references>
        <references refid="_free_r_t_o_s_8h_1ad7a6b7684053a41690cac487ccf4d927" compoundref="_free_r_t_o_s_8h" startline="600">traceEVENT_GROUP_WAIT_BITS_END</references>
        <references refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" compoundref="event__groups_8c" startline="65">EventGroupDef_t::uxEventBits</references>
        <references refid="task_8h_1a7793b4bbe45c10d4c5104c126b89e87c" compoundref="tasks_8c" startline="4601" endline="4612">uxTaskResetEventItemValue</references>
        <references refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" compoundref="tasks_8c" startline="3080" endline="3101">vTaskPlaceOnUnorderedEventList</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="task_8h_1a0241000e08a261372186d34825a35979">xTaskGetSchedulerState</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" compoundref="event__groups_8c" startline="66">EventGroupDef_t::xTasksWaitingForBits</references>
        <referencedby refid="cmsis__os2_8c_1a52acb34a8322e58020227344fe662b4e" compoundref="cmsis__os2_8c" startline="1224" endline="1272">osEventFlagsWait</referencedby>
      </memberdef>
      <memberdef kind="function" id="event__groups_8c_1a71dd2680fdfbdde7d6b10db203e266ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
        <definition>EventBits_t xEventGroupClearBits</definition>
        <argsstring>(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear)</argsstring>
        <name>xEventGroupClearBits</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxBitsToClear</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="461" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="461" bodyend="485"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" compoundref="event__groups_8c" startline="60">eventEVENT_BITS_CONTROL_BYTES</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="_free_r_t_o_s_8h_1ad929200fa50e5a1ae2c5894ffeea2ef6" compoundref="_free_r_t_o_s_8h" startline="604">traceEVENT_GROUP_CLEAR_BITS</references>
        <references refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" compoundref="event__groups_8c" startline="65">EventGroupDef_t::uxEventBits</references>
        <referencedby refid="cmsis__os2_8c_1a93bf258ca0007c6641fbe8e4f2b8a1e5" compoundref="cmsis__os2_8c" startline="1181" endline="1205">osEventFlagsClear</referencedby>
        <referencedby refid="event__groups_8c_1a3bce459038e87064109c8462b1174c29" compoundref="event__groups_8c" startline="665" endline="668">vEventGroupClearBitsCallback</referencedby>
      </memberdef>
      <memberdef kind="function" id="event__groups_8c_1adcb3d3f7dded9fa372bb1ee405c36b8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
        <definition>EventBits_t xEventGroupGetBitsFromISR</definition>
        <argsstring>(EventGroupHandle_t xEventGroup)</argsstring>
        <name>xEventGroupGetBitsFromISR</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="503" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="503" bodyend="516"/>
        <references refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" compoundref="_free_r_t_o_s_8h" startline="286">portCLEAR_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" compoundref="_free_r_t_o_s_8h" startline="282">portSET_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" compoundref="event__groups_8c" startline="65">EventGroupDef_t::uxEventBits</references>
        <referencedby refid="cmsis__os2_8c_1a93bf258ca0007c6641fbe8e4f2b8a1e5" compoundref="cmsis__os2_8c" startline="1181" endline="1205">osEventFlagsClear</referencedby>
        <referencedby refid="cmsis__os2_8c_1a8bda3185f46bfd278cea8a6cf357677d" compoundref="cmsis__os2_8c" startline="1207" endline="1222">osEventFlagsGet</referencedby>
      </memberdef>
      <memberdef kind="function" id="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
        <definition>EventBits_t xEventGroupSetBits</definition>
        <argsstring>(EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet)</argsstring>
        <name>xEventGroupSetBits</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <param>
          <type>const <ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref></type>
          <declname>uxBitsToSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="519" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="519" bodyend="610"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="event__groups_8c_1a1404686af7c8070fa57675707c817abc" compoundref="event__groups_8c" startline="57">eventCLEAR_EVENTS_ON_EXIT_BIT</references>
        <references refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" compoundref="event__groups_8c" startline="60">eventEVENT_BITS_CONTROL_BYTES</references>
        <references refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" compoundref="event__groups_8c" startline="58">eventUNBLOCKED_DUE_TO_BIT_SET</references>
        <references refid="event__groups_8c_1ae98d5f1271845ad42742aef9659e1568" compoundref="event__groups_8c" startline="59">eventWAIT_FOR_ALL_BITS</references>
        <references refid="list_8h_1a96cb0919f02e5c0d8e41ded0e65197a3" compoundref="list_8h" startline="241">listGET_END_MARKER</references>
        <references refid="list_8h_1a987cb2766e509022c23b654907cea199" compoundref="list_8h" startline="225">listGET_HEAD_ENTRY</references>
        <references refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" compoundref="list_8h" startline="208">listGET_LIST_ITEM_VALUE</references>
        <references refid="list_8h_1aabf78d3f24ba56ac1d0bf0179438b960" compoundref="list_8h" startline="233">listGET_NEXT</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1a56eb08eb12a36c99a32729a518d5b3fd" compoundref="_free_r_t_o_s_8h" startline="612">traceEVENT_GROUP_SET_BITS</references>
        <references refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" compoundref="event__groups_8c" startline="65">EventGroupDef_t::uxEventBits</references>
        <references refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" compoundref="tasks_8c" startline="3205" endline="3250">vTaskRemoveFromUnorderedEventList</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" compoundref="event__groups_8c" startline="66">EventGroupDef_t::xTasksWaitingForBits</references>
        <referencedby refid="cmsis__os2_8c_1a33b71d14cecf90b4e72639dd19f23a5e" compoundref="cmsis__os2_8c" startline="1150" endline="1179">osEventFlagsSet</referencedby>
        <referencedby refid="event__groups_8c_1a54db6cc97bbb926aa4b78d5affc257d9" compoundref="event__groups_8c" startline="657" endline="660">vEventGroupSetBitsCallback</referencedby>
        <referencedby refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" compoundref="event__groups_8c" startline="191" endline="308">xEventGroupSync</referencedby>
      </memberdef>
      <memberdef kind="function" id="event__groups_8c_1a6939faca89fc4ba52fa8288527042464" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vEventGroupDelete</definition>
        <argsstring>(EventGroupHandle_t xEventGroup)</argsstring>
        <name>vEventGroupDelete</name>
        <param>
          <type><ref refid="event__groups_8h_1acab96e0b6a5cab7f7b29822b79cc78ed" kindref="member">EventGroupHandle_t</ref></type>
          <declname>xEventGroup</declname>
        </param>
        <briefdescription>
<para><ref refid="event__groups_8h" kindref="compound">event_groups.h</ref> </para>
        </briefdescription>
        <detaileddescription>
<para><preformatted>
 void xEventGroupDelete( EventGroupHandle_t xEventGroup );
</preformatted></para>
<para>Delete an event group that was previously created by a call to xEventGroupCreate(). Tasks that are blocked on the event group will be unblocked and obtain 0 as the event group&apos;s value.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xEventGroup</parametername>
</parameternamelist>
<parameterdescription>
<para>The event group being deleted. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="613" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="613" bodyend="652"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" compoundref="event__groups_8c" startline="58">eventUNBLOCKED_DUE_TO_BIT_SET</references>
        <references refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" compoundref="list_8h" startline="255">listCURRENT_LIST_LENGTH</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1aa297f3eba16856d00d0d3a6cea5e9df6" compoundref="list_8h" startline="156">xMINI_LIST_ITEM::pxNext</references>
        <references refid="_free_r_t_o_s_8h_1abf48364a72dd38af47bf7203c06ee832" compoundref="_free_r_t_o_s_8h" startline="620">traceEVENT_GROUP_DELETE</references>
        <references refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" compoundref="heap__4_8c" startline="266" endline="312">vPortFree</references>
        <references refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" compoundref="tasks_8c" startline="3205" endline="3250">vTaskRemoveFromUnorderedEventList</references>
        <references refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" compoundref="list_8h" startline="169">xLIST::xListEnd</references>
        <references refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" compoundref="event__groups_8c" startline="66">EventGroupDef_t::xTasksWaitingForBits</references>
        <referencedby refid="cmsis__os2_8c_1a7c4acf2fb0d506ec82905dee53fb5435" compoundref="cmsis__os2_8c" startline="1274" endline="1294">osEventFlagsDelete</referencedby>
      </memberdef>
      <memberdef kind="function" id="event__groups_8c_1a54db6cc97bbb926aa4b78d5affc257d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vEventGroupSetBitsCallback</definition>
        <argsstring>(void *pvEventGroup, const uint32_t ulBitsToSet)</argsstring>
        <name>vEventGroupSetBitsCallback</name>
        <param>
          <type>void *</type>
          <declname>pvEventGroup</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ulBitsToSet</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="657" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="657" bodyend="660"/>
        <references refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" compoundref="event__groups_8c" startline="519" endline="610">xEventGroupSetBits</references>
      </memberdef>
      <memberdef kind="function" id="event__groups_8c_1a3bce459038e87064109c8462b1174c29" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vEventGroupClearBitsCallback</definition>
        <argsstring>(void *pvEventGroup, const uint32_t ulBitsToClear)</argsstring>
        <name>vEventGroupClearBitsCallback</name>
        <param>
          <type>void *</type>
          <declname>pvEventGroup</declname>
        </param>
        <param>
          <type>const uint32_t</type>
          <declname>ulBitsToClear</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" line="665" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c" bodystart="665" bodyend="668"/>
        <references refid="event__groups_8c_1a71dd2680fdfbdde7d6b10db203e266ba" compoundref="event__groups_8c" startline="461" endline="485">xEventGroupClearBits</references>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>FreeRTOS<sp/>Kernel<sp/>V10.3.1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020<sp/>Amazon.com,<sp/>Inc.<sp/>or<sp/>its<sp/>affiliates.<sp/><sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>http://www.FreeRTOS.org</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>http://aws.amazon.com/freertos</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>1<sp/>tab<sp/>==<sp/>4<sp/>spaces!</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Standard<sp/>includes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Defining<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/>prevents<sp/>task.h<sp/>from<sp/>redefining</highlight></codeline>
<codeline lineno="32"><highlight class="comment">all<sp/>the<sp/>API<sp/>functions<sp/>to<sp/>use<sp/>the<sp/>MPU<sp/>wrappers.<sp/><sp/>That<sp/>should<sp/>only<sp/>be<sp/>done<sp/>when</highlight></codeline>
<codeline lineno="33"><highlight class="comment">task.h<sp/>is<sp/>included<sp/>from<sp/>an<sp/>application<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="event__groups_8c_1ab622d8c674f2a417a666a7ed89109e79" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FreeRTOS<sp/>includes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_free_r_t_o_s_8h" kindref="compound">FreeRTOS.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="task_8h" kindref="compound">task.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="timers_8h" kindref="compound">timers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="event__groups_8h" kindref="compound">event_groups.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Lint<sp/>e961,<sp/>e750<sp/>and<sp/>e9021<sp/>are<sp/>suppressed<sp/>as<sp/>a<sp/>MISRA<sp/>exception<sp/>justified</highlight></codeline>
<codeline lineno="43"><highlight class="comment">because<sp/>the<sp/>MPU<sp/>ports<sp/>require<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/>to<sp/>be<sp/>defined</highlight></codeline>
<codeline lineno="44"><highlight class="comment">for<sp/>the<sp/>header<sp/>files<sp/>above,<sp/>but<sp/>not<sp/>in<sp/>this<sp/>file,<sp/>in<sp/>order<sp/>to<sp/>generate<sp/>the</highlight></codeline>
<codeline lineno="45"><highlight class="comment">correct<sp/>privileged<sp/>Vs<sp/>unprivileged<sp/>linkage<sp/>and<sp/>placement.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>!e750<sp/>!e9021<sp/>See<sp/>comment<sp/>above.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>following<sp/>bit<sp/>fields<sp/>convey<sp/>control<sp/>information<sp/>in<sp/>a<sp/>task&apos;s<sp/>event<sp/>list</highlight></codeline>
<codeline lineno="49"><highlight class="comment">item<sp/>value.<sp/><sp/>It<sp/>is<sp/>important<sp/>they<sp/>don&apos;t<sp/>clash<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="50"><highlight class="comment">taskEVENT_LIST_ITEM_VALUE_IN_USE<sp/>definition.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>configUSE_16_BIT_TICKS<sp/>==<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>eventCLEAR_EVENTS_ON_EXIT_BIT<sp/>0x0100U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>eventUNBLOCKED_DUE_TO_BIT_SET<sp/>0x0200U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>eventWAIT_FOR_ALL_BITS<sp/><sp/><sp/><sp/><sp/><sp/>0x0400U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>eventEVENT_BITS_CONTROL_BYTES<sp/>0xff00U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="event__groups_8c_1a1404686af7c8070fa57675707c817abc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>eventCLEAR_EVENTS_ON_EXIT_BIT<sp/>0x01000000UL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>eventUNBLOCKED_DUE_TO_BIT_SET<sp/>0x02000000UL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="event__groups_8c_1ae98d5f1271845ad42742aef9659e1568" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>eventWAIT_FOR_ALL_BITS<sp/><sp/><sp/><sp/><sp/><sp/>0x04000000UL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>eventEVENT_BITS_CONTROL_BYTES<sp/>0xff000000UL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="struct_event_group_def__t" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_event_group_def__t" kindref="compound">EventGroupDef_t</ref></highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65" refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/><ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref>;</highlight></codeline>
<codeline lineno="66" refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/><ref refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" kindref="member">xTasksWaitingForBits</ref>;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>List<sp/>of<sp/>tasks<sp/>waiting<sp/>for<sp/>a<sp/>bit<sp/>to<sp/>be<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxEventGroupNumber;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ucStaticallyAllocated;<sp/></highlight><highlight class="comment">/*&lt;<sp/>Set<sp/>to<sp/>pdTRUE<sp/>if<sp/>the<sp/>event<sp/>group<sp/>is<sp/>statically<sp/>allocated<sp/>to<sp/>ensure<sp/>no<sp/>attempt<sp/>is<sp/>made<sp/>to<sp/>free<sp/>the<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="event__groups_8c_1ae4fc9408a7fab90c6296379ff3cb0f11" refkind="member"><highlight class="normal">}<sp/><ref refid="event__groups_8c_1ae4fc9408a7fab90c6296379ff3cb0f11" kindref="member">EventGroup_t</ref>;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="80"><highlight class="comment"><sp/>*<sp/>Test<sp/>the<sp/>bits<sp/>set<sp/>in<sp/>uxCurrentEventBits<sp/>to<sp/>see<sp/>if<sp/>the<sp/>wait<sp/>condition<sp/>is<sp/>met.</highlight></codeline>
<codeline lineno="81"><highlight class="comment"><sp/>*<sp/>The<sp/>wait<sp/>condition<sp/>is<sp/>defined<sp/>by<sp/>xWaitForAllBits.<sp/><sp/>If<sp/>xWaitForAllBits<sp/>is</highlight></codeline>
<codeline lineno="82"><highlight class="comment"><sp/>*<sp/>pdTRUE<sp/>then<sp/>the<sp/>wait<sp/>condition<sp/>is<sp/>met<sp/>if<sp/>all<sp/>the<sp/>bits<sp/>set<sp/>in<sp/>uxBitsToWaitFor</highlight></codeline>
<codeline lineno="83"><highlight class="comment"><sp/>*<sp/>are<sp/>also<sp/>set<sp/>in<sp/>uxCurrentEventBits.<sp/><sp/>If<sp/>xWaitForAllBits<sp/>is<sp/>pdFALSE<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="84"><highlight class="comment"><sp/>*<sp/>wait<sp/>condition<sp/>is<sp/>met<sp/>if<sp/>any<sp/>of<sp/>the<sp/>bits<sp/>set<sp/>in<sp/>uxBitsToWait<sp/>for<sp/>are<sp/>also<sp/>set</highlight></codeline>
<codeline lineno="85"><highlight class="comment"><sp/>*<sp/>in<sp/>uxCurrentEventBits.</highlight></codeline>
<codeline lineno="86"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="event__groups_8c_1a152ce51000f6d8d26afbd14b4794e036" kindref="member">prvTestWaitCondition</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxCurrentEventBits,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToWaitFor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xWaitForAllBits<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroupCreateStatic(<sp/><ref refid="structx_s_t_a_t_i_c___e_v_e_n_t___g_r_o_u_p" kindref="compound">StaticEventGroup_t</ref><sp/>*pxEventGroupBuffer<sp/>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>*pxEventBits;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>StaticEventGroup_t<sp/>object<sp/>must<sp/>be<sp/>provided.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxEventGroupBuffer<sp/>);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>configASSERT_DEFINED<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>that<sp/>the<sp/>size<sp/>of<sp/>the<sp/>structure<sp/>used<sp/>to<sp/>declare<sp/>a</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>of<sp/>type<sp/>StaticEventGroup_t<sp/>equals<sp/>the<sp/>size<sp/>of<sp/>the<sp/>real</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>event<sp/>group<sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="_free_r_t_o_s_8h_1af87e218149130753afb4a7044e5569e6" kindref="member">StaticEventGroup_t</ref><sp/>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xSize<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e529<sp/>xSize<sp/>is<sp/>referenced<sp/>if<sp/>configASSERT()<sp/>is<sp/>defined.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configASSERT_DEFINED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>user<sp/>has<sp/>provided<sp/>a<sp/>statically<sp/>allocated<sp/>event<sp/>group<sp/>-<sp/>use<sp/>it.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>pxEventBits<sp/>=<sp/>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>*<sp/>)<sp/>pxEventGroupBuffer;<sp/></highlight><highlight class="comment">/*lint<sp/>!e740<sp/>!e9087<sp/>EventGroup_t<sp/>and<sp/>StaticEventGroup_t<sp/>are<sp/>deliberately<sp/>aliased<sp/>for<sp/>data<sp/>hiding<sp/>purposes<sp/>and<sp/>guaranteed<sp/>to<sp/>have<sp/>the<sp/>same<sp/>size<sp/>and<sp/>alignment<sp/>requirement<sp/>-<sp/>checked<sp/>by<sp/>configASSERT().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxEventBits<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" kindref="member">vListInitialise</ref>(<sp/>&amp;(<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" kindref="member">xTasksWaitingForBits</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Both<sp/>static<sp/>and<sp/>dynamic<sp/>allocation<sp/>can<sp/>be<sp/>used,<sp/>so<sp/>note<sp/>that</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>event<sp/>group<sp/>was<sp/>created<sp/>statically<sp/>in<sp/>case<sp/>the<sp/>event<sp/>group</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>later<sp/>deleted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxEventBits-&gt;ucStaticallyAllocated<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a0100fcbcc03e3c2f0cd7bc7071f9ab70" kindref="member">traceEVENT_GROUP_CREATE</ref>(<sp/>pxEventBits<sp/>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>xEventGroupCreateStatic<sp/>should<sp/>only<sp/>ever<sp/>be<sp/>called<sp/>with</highlight></codeline>
<codeline lineno="132"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>pxEventGroupBuffer<sp/>pointing<sp/>to<sp/>a<sp/>pre-allocated<sp/>(compile<sp/>time</highlight></codeline>
<codeline lineno="133"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>allocated)<sp/>StaticEventGroup_t<sp/>variable.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac6f6ea04ddbf43f62f1b0285622d4474" kindref="member">traceEVENT_GROUP_CREATE_FAILED</ref>();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pxEventBits;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroupCreate(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>*pxEventBits;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>the<sp/>event<sp/>group.<sp/><sp/>Justification<sp/>for<sp/>MISRA<sp/>deviation<sp/>as</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/><sp/><sp/><sp/>follows:<sp/><sp/>pvPortMalloc()<sp/>always<sp/>ensures<sp/>returned<sp/>memory<sp/>blocks<sp/>are</highlight></codeline>
<codeline lineno="151"><highlight class="comment"><sp/><sp/><sp/><sp/>aligned<sp/>per<sp/>the<sp/>requirements<sp/>of<sp/>the<sp/>MCU<sp/>stack.<sp/><sp/>In<sp/>this<sp/>case</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/><sp/>pvPortMalloc()<sp/>must<sp/>return<sp/>a<sp/>pointer<sp/>that<sp/>is<sp/>guaranteed<sp/>to<sp/>meet<sp/>the</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/><sp/>alignment<sp/>requirements<sp/>of<sp/>the<sp/>EventGroup_t<sp/>structure<sp/>-<sp/>which<sp/>(if<sp/>you</highlight></codeline>
<codeline lineno="154"><highlight class="comment"><sp/><sp/><sp/><sp/>follow<sp/>it<sp/>through)<sp/>is<sp/>the<sp/>alignment<sp/>requirements<sp/>of<sp/>the<sp/>TickType_t<sp/>type</highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/><sp/>(EventBits_t<sp/>being<sp/>of<sp/>TickType_t<sp/>itself).<sp/><sp/>Therefore,<sp/>whenever<sp/>the</highlight></codeline>
<codeline lineno="156"><highlight class="comment"><sp/><sp/><sp/><sp/>stack<sp/>alignment<sp/>requirements<sp/>are<sp/>greater<sp/>than<sp/>or<sp/>equal<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/><sp/>TickType_t<sp/>alignment<sp/>requirements<sp/>the<sp/>cast<sp/>is<sp/>safe.<sp/><sp/>In<sp/>other<sp/>cases,</highlight></codeline>
<codeline lineno="158"><highlight class="comment"><sp/><sp/><sp/><sp/>where<sp/>the<sp/>natural<sp/>word<sp/>size<sp/>of<sp/>the<sp/>architecture<sp/>is<sp/>less<sp/>than</highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/><sp/>sizeof(<sp/>TickType_t<sp/>),<sp/>the<sp/>TickType_t<sp/>variables<sp/>will<sp/>be<sp/>accessed<sp/>in<sp/>two</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/><sp/>or<sp/>more<sp/>reads<sp/>operations,<sp/>and<sp/>the<sp/>alignment<sp/>requirements<sp/>is<sp/>only<sp/>that</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/><sp/>of<sp/>each<sp/>individual<sp/>read.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>pxEventBits<sp/>=<sp/>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>*<sp/>)<sp/><ref refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" kindref="member">pvPortMalloc</ref>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>!e9079<sp/>see<sp/>comment<sp/>above.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxEventBits<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" kindref="member">vListInitialise</ref>(<sp/>&amp;(<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" kindref="member">xTasksWaitingForBits</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Both<sp/>static<sp/>and<sp/>dynamic<sp/>allocation<sp/>can<sp/>be<sp/>used,<sp/>so<sp/>note<sp/>this</highlight></codeline>
<codeline lineno="172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event<sp/>group<sp/>was<sp/>allocated<sp/>statically<sp/>in<sp/>case<sp/>the<sp/>event<sp/>group<sp/>is</highlight></codeline>
<codeline lineno="173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>later<sp/>deleted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxEventBits-&gt;ucStaticallyAllocated<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a0100fcbcc03e3c2f0cd7bc7071f9ab70" kindref="member">traceEVENT_GROUP_CREATE</ref>(<sp/>pxEventBits<sp/>);</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac6f6ea04ddbf43f62f1b0285622d4474" kindref="member">traceEVENT_GROUP_CREATE_FAILED</ref>();<sp/></highlight><highlight class="comment">/*lint<sp/>!e9063<sp/>Else<sp/>branch<sp/>only<sp/>exists<sp/>to<sp/>allow<sp/>tracing<sp/>and<sp/>does<sp/>not<sp/>generate<sp/>code<sp/>if<sp/>trace<sp/>macros<sp/>are<sp/>not<sp/>defined.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pxEventBits;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" refkind="member"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/><ref refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" kindref="member">xEventGroupSync</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToSet,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToWaitFor,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxOriginalBitValue,<sp/>uxReturn;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>*pxEventBits<sp/>=<sp/>xEventGroup;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xAlreadyYielded;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xTimeoutOccurred<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>uxBitsToWaitFor<sp/>&amp;<sp/><ref refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" kindref="member">eventEVENT_BITS_CONTROL_BYTES</ref><sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>uxBitsToWaitFor<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>(<sp/>INCLUDE_xTaskGetSchedulerState<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/><ref refid="task_8h_1a0241000e08a261372186d34825a35979" kindref="member">xTaskGetSchedulerState</ref>()<sp/>==<sp/><ref refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" kindref="member">taskSCHEDULER_SUSPENDED</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>xTicksToWait<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>uxOriginalBitValue<sp/>=<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" kindref="member">xEventGroupSetBits</ref>(<sp/>xEventGroup,<sp/>uxBitsToSet<sp/>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>(<sp/>uxOriginalBitValue<sp/>|<sp/>uxBitsToSet<sp/>)<sp/>&amp;<sp/>uxBitsToWaitFor<sp/>)<sp/>==<sp/>uxBitsToWaitFor<sp/>)</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>All<sp/>the<sp/>rendezvous<sp/>bits<sp/>are<sp/>now<sp/>set<sp/>-<sp/>no<sp/>need<sp/>to<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>(<sp/>uxOriginalBitValue<sp/>|<sp/>uxBitsToSet<sp/>);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Rendezvous<sp/>always<sp/>clear<sp/>the<sp/>bits.<sp/><sp/>They<sp/>will<sp/>have<sp/>been<sp/>cleared</highlight></codeline>
<codeline lineno="218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>already<sp/>unless<sp/>this<sp/>is<sp/>the<sp/>only<sp/>task<sp/>in<sp/>the<sp/>rendezvous.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>&amp;=<sp/>~uxBitsToWaitFor;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTicksToWait<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a898ead658f344a0475a9f2ed3bf8f407" kindref="member">traceEVENT_GROUP_SYNC_BLOCK</ref>(<sp/>xEventGroup,<sp/>uxBitsToSet,<sp/>uxBitsToWaitFor<sp/>);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>bits<sp/>that<sp/>the<sp/>calling<sp/>task<sp/>is<sp/>waiting<sp/>for<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task&apos;s<sp/>event<sp/>list<sp/>item<sp/>so<sp/>the<sp/>kernel<sp/>knows<sp/>when<sp/>a<sp/>match<sp/>is</highlight></codeline>
<codeline lineno="231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found.<sp/><sp/>Then<sp/>enter<sp/>the<sp/>blocked<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" kindref="member">vTaskPlaceOnUnorderedEventList</ref>(<sp/>&amp;(<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" kindref="member">xTasksWaitingForBits</ref><sp/>),<sp/>(<sp/>uxBitsToWaitFor<sp/>|<sp/><ref refid="event__groups_8c_1a1404686af7c8070fa57675707c817abc" kindref="member">eventCLEAR_EVENTS_ON_EXIT_BIT</ref><sp/>|<sp/><ref refid="event__groups_8c_1ae98d5f1271845ad42742aef9659e1568" kindref="member">eventWAIT_FOR_ALL_BITS</ref><sp/>),<sp/>xTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>assignment<sp/>is<sp/>obsolete<sp/>as<sp/>uxReturn<sp/>will<sp/>get<sp/>set<sp/>after</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>task<sp/>unblocks,<sp/>but<sp/>some<sp/>compilers<sp/>mistakenly<sp/>generate<sp/>a</highlight></codeline>
<codeline lineno="236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>warning<sp/>about<sp/>uxReturn<sp/>being<sp/>returned<sp/>without<sp/>being<sp/>set<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assignment<sp/>is<sp/>omitted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>rendezvous<sp/>bits<sp/>were<sp/>not<sp/>set,<sp/>but<sp/>no<sp/>block<sp/>time<sp/>was</highlight></codeline>
<codeline lineno="243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specified<sp/>-<sp/>just<sp/>return<sp/>the<sp/>current<sp/>event<sp/>bit<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTimeoutOccurred<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>xAlreadyYielded<sp/>=<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xAlreadyYielded<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>blocked<sp/>to<sp/>wait<sp/>for<sp/>its<sp/>required<sp/>bits<sp/>to<sp/>be<sp/>set<sp/>-<sp/>at<sp/>this</highlight></codeline>
<codeline lineno="263"><highlight class="comment"><sp/><sp/><sp/><sp/>point<sp/>either<sp/>the<sp/>required<sp/>bits<sp/>were<sp/>set<sp/>or<sp/>the<sp/>block<sp/>time<sp/>expired.<sp/><sp/>If</highlight></codeline>
<codeline lineno="264"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>required<sp/>bits<sp/>were<sp/>set<sp/>they<sp/>will<sp/>have<sp/>been<sp/>stored<sp/>in<sp/>the<sp/>task&apos;s</highlight></codeline>
<codeline lineno="265"><highlight class="comment"><sp/><sp/><sp/><sp/>event<sp/>list<sp/>item,<sp/>and<sp/>they<sp/>should<sp/>now<sp/>be<sp/>retrieved<sp/>then<sp/>cleared.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/><ref refid="task_8h_1a7793b4bbe45c10d4c5104c126b89e87c" kindref="member">uxTaskResetEventItemValue</ref>();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>uxReturn<sp/>&amp;<sp/><ref refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" kindref="member">eventUNBLOCKED_DUE_TO_BIT_SET</ref><sp/>)<sp/>==<sp/>(<sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>timed<sp/>out,<sp/>just<sp/>return<sp/>the<sp/>current<sp/>event<sp/>bit<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Although<sp/>the<sp/>task<sp/>got<sp/>here<sp/>because<sp/>it<sp/>timed<sp/>out<sp/>before<sp/>the</highlight></codeline>
<codeline lineno="276"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>it<sp/>was<sp/>waiting<sp/>for<sp/>were<sp/>set,<sp/>it<sp/>is<sp/>possible<sp/>that<sp/>since<sp/>it</highlight></codeline>
<codeline lineno="277"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unblocked<sp/>another<sp/>task<sp/>has<sp/>set<sp/>the<sp/>bits.<sp/><sp/>If<sp/>this<sp/>is<sp/>the<sp/>case</highlight></codeline>
<codeline lineno="278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>it<sp/>needs<sp/>to<sp/>clear<sp/>the<sp/>bits<sp/>before<sp/>exiting.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>uxReturn<sp/>&amp;<sp/>uxBitsToWaitFor<sp/>)<sp/>==<sp/>uxBitsToWaitFor<sp/>)</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>&amp;=<sp/>~uxBitsToWaitFor;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTimeoutOccurred<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>unblocked<sp/>because<sp/>the<sp/>bits<sp/>were<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Control<sp/>bits<sp/>might<sp/>be<sp/>set<sp/>as<sp/>the<sp/>task<sp/>had<sp/>blocked<sp/>should<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/>returned.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>uxReturn<sp/>&amp;=<sp/>~eventEVENT_BITS_CONTROL_BYTES;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af0cb50e5a1402163cd29e638c6140a2e" kindref="member">traceEVENT_GROUP_SYNC_END</ref>(<sp/>xEventGroup,<sp/>uxBitsToSet,<sp/>uxBitsToWaitFor,<sp/>xTimeoutOccurred<sp/>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prevent<sp/>compiler<sp/>warnings<sp/>when<sp/>trace<sp/>macros<sp/>are<sp/>not<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/>xTimeoutOccurred;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" refkind="member"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/><ref refid="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" kindref="member">xEventGroupWaitBits</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToWaitFor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xClearOnExit,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xWaitForAllBits,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="312"><highlight class="normal">{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>*pxEventBits<sp/>=<sp/>xEventGroup;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxReturn,<sp/>uxControlBits<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xWaitConditionMet,<sp/>xAlreadyYielded;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xTimeoutOccurred<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>user<sp/>is<sp/>not<sp/>attempting<sp/>to<sp/>wait<sp/>on<sp/>the<sp/>bits<sp/>used<sp/>by<sp/>the<sp/>kernel</highlight></codeline>
<codeline lineno="319"><highlight class="comment"><sp/><sp/>itself,<sp/>and<sp/>that<sp/>at<sp/>least<sp/>one<sp/>bit<sp/>is<sp/>being<sp/>requested.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xEventGroup<sp/>);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>uxBitsToWaitFor<sp/>&amp;<sp/><ref refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" kindref="member">eventEVENT_BITS_CONTROL_BYTES</ref><sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>uxBitsToWaitFor<sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>(<sp/>INCLUDE_xTaskGetSchedulerState<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>!(<sp/>(<sp/><ref refid="task_8h_1a0241000e08a261372186d34825a35979" kindref="member">xTaskGetSchedulerState</ref>()<sp/>==<sp/><ref refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" kindref="member">taskSCHEDULER_SUSPENDED</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>xTicksToWait<sp/>!=<sp/>0<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxCurrentEventBits<sp/>=<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>wait<sp/>condition<sp/>is<sp/>already<sp/>met<sp/>or<sp/>not.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>xWaitConditionMet<sp/>=<sp/><ref refid="event__groups_8c_1a152ce51000f6d8d26afbd14b4794e036" kindref="member">prvTestWaitCondition</ref>(<sp/>uxCurrentEventBits,<sp/>uxBitsToWaitFor,<sp/>xWaitForAllBits<sp/>);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xWaitConditionMet<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>wait<sp/>condition<sp/>has<sp/>already<sp/>been<sp/>met<sp/>so<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="339"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>uxCurrentEventBits;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTicksToWait<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>wait<sp/>bits<sp/>if<sp/>requested<sp/>to<sp/>do<sp/>so.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xClearOnExit<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>&amp;=<sp/>~uxBitsToWaitFor;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>wait<sp/>condition<sp/>has<sp/>not<sp/>been<sp/>met,<sp/>but<sp/>no<sp/>block<sp/>time<sp/>was</highlight></codeline>
<codeline lineno="356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>specified,<sp/>so<sp/>just<sp/>return<sp/>the<sp/>current<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>uxCurrentEventBits;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTimeoutOccurred<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>is<sp/>going<sp/>to<sp/>block<sp/>to<sp/>wait<sp/>for<sp/>its<sp/>required<sp/>bits<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="363"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>set.<sp/><sp/>uxControlBits<sp/>are<sp/>used<sp/>to<sp/>remember<sp/>the<sp/>specified<sp/>behaviour<sp/>of</highlight></codeline>
<codeline lineno="364"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>call<sp/>to<sp/>xEventGroupWaitBits()<sp/>-<sp/>for<sp/>use<sp/>when<sp/>the<sp/>event<sp/>bits</highlight></codeline>
<codeline lineno="365"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>unblock<sp/>the<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xClearOnExit<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxControlBits<sp/>|=<sp/><ref refid="event__groups_8c_1a1404686af7c8070fa57675707c817abc" kindref="member">eventCLEAR_EVENTS_ON_EXIT_BIT</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xWaitForAllBits<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxControlBits<sp/>|=<sp/><ref refid="event__groups_8c_1ae98d5f1271845ad42742aef9659e1568" kindref="member">eventWAIT_FOR_ALL_BITS</ref>;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>bits<sp/>that<sp/>the<sp/>calling<sp/>task<sp/>is<sp/>waiting<sp/>for<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>task&apos;s<sp/>event<sp/>list<sp/>item<sp/>so<sp/>the<sp/>kernel<sp/>knows<sp/>when<sp/>a<sp/>match<sp/>is</highlight></codeline>
<codeline lineno="386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>found.<sp/><sp/>Then<sp/>enter<sp/>the<sp/>blocked<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" kindref="member">vTaskPlaceOnUnorderedEventList</ref>(<sp/>&amp;(<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" kindref="member">xTasksWaitingForBits</ref><sp/>),<sp/>(<sp/>uxBitsToWaitFor<sp/>|<sp/>uxControlBits<sp/>),<sp/>xTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>obsolete<sp/>as<sp/>it<sp/>will<sp/>get<sp/>set<sp/>after<sp/>the<sp/>task<sp/>unblocks,<sp/>but</highlight></codeline>
<codeline lineno="390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>some<sp/>compilers<sp/>mistakenly<sp/>generate<sp/>a<sp/>warning<sp/>about<sp/>the<sp/>variable</highlight></codeline>
<codeline lineno="391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>being<sp/>returned<sp/>without<sp/>being<sp/>set<sp/>if<sp/>it<sp/>is<sp/>not<sp/>done.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1aeb8953a9be153986d0e830acdf60445a" kindref="member">traceEVENT_GROUP_WAIT_BITS_BLOCK</ref>(<sp/>xEventGroup,<sp/>uxBitsToWaitFor<sp/>);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/>xAlreadyYielded<sp/>=<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xAlreadyYielded<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>blocked<sp/>to<sp/>wait<sp/>for<sp/>its<sp/>required<sp/>bits<sp/>to<sp/>be<sp/>set<sp/>-<sp/>at<sp/>this</highlight></codeline>
<codeline lineno="411"><highlight class="comment"><sp/><sp/><sp/><sp/>point<sp/>either<sp/>the<sp/>required<sp/>bits<sp/>were<sp/>set<sp/>or<sp/>the<sp/>block<sp/>time<sp/>expired.<sp/><sp/>If</highlight></codeline>
<codeline lineno="412"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>required<sp/>bits<sp/>were<sp/>set<sp/>they<sp/>will<sp/>have<sp/>been<sp/>stored<sp/>in<sp/>the<sp/>task&apos;s</highlight></codeline>
<codeline lineno="413"><highlight class="comment"><sp/><sp/><sp/><sp/>event<sp/>list<sp/>item,<sp/>and<sp/>they<sp/>should<sp/>now<sp/>be<sp/>retrieved<sp/>then<sp/>cleared.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/><ref refid="task_8h_1a7793b4bbe45c10d4c5104c126b89e87c" kindref="member">uxTaskResetEventItemValue</ref>();</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>uxReturn<sp/>&amp;<sp/><ref refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" kindref="member">eventUNBLOCKED_DUE_TO_BIT_SET</ref><sp/>)<sp/>==<sp/>(<sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>timed<sp/>out,<sp/>just<sp/>return<sp/>the<sp/>current<sp/>event<sp/>bit<sp/>value.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>possible<sp/>that<sp/>the<sp/>event<sp/>bits<sp/>were<sp/>updated<sp/>between<sp/>this</highlight></codeline>
<codeline lineno="424"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>leaving<sp/>the<sp/>Blocked<sp/>state<sp/>and<sp/>running<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="event__groups_8c_1a152ce51000f6d8d26afbd14b4794e036" kindref="member">prvTestWaitCondition</ref>(<sp/>uxReturn,<sp/>uxBitsToWaitFor,<sp/>xWaitForAllBits<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xClearOnExit<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>&amp;=<sp/>~uxBitsToWaitFor;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xTimeoutOccurred<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>unblocked<sp/>because<sp/>the<sp/>bits<sp/>were<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>blocked<sp/>so<sp/>control<sp/>bits<sp/>may<sp/>have<sp/>been<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>uxReturn<sp/>&amp;=<sp/>~eventEVENT_BITS_CONTROL_BYTES;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ad7a6b7684053a41690cac487ccf4d927" kindref="member">traceEVENT_GROUP_WAIT_BITS_END</ref>(<sp/>xEventGroup,<sp/>uxBitsToWaitFor,<sp/>xTimeoutOccurred<sp/>);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prevent<sp/>compiler<sp/>warnings<sp/>when<sp/>trace<sp/>macros<sp/>are<sp/>not<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/>xTimeoutOccurred;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="458"><highlight class="normal">}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="event__groups_8c_1a71dd2680fdfbdde7d6b10db203e266ba" refkind="member"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/><ref refid="event__groups_8c_1a71dd2680fdfbdde7d6b10db203e266ba" kindref="member">xEventGroupClearBits</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToClear<sp/>)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>*pxEventBits<sp/>=<sp/>xEventGroup;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxReturn;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>user<sp/>is<sp/>not<sp/>attempting<sp/>to<sp/>clear<sp/>the<sp/>bits<sp/>used<sp/>by<sp/>the<sp/>kernel</highlight></codeline>
<codeline lineno="467"><highlight class="comment"><sp/><sp/>itself.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xEventGroup<sp/>);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>uxBitsToClear<sp/>&amp;<sp/><ref refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" kindref="member">eventEVENT_BITS_CONTROL_BYTES</ref><sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ad929200fa50e5a1ae2c5894ffeea2ef6" kindref="member">traceEVENT_GROUP_CLEAR_BITS</ref>(<sp/>xEventGroup,<sp/>uxBitsToClear<sp/>);</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>value<sp/>returned<sp/>is<sp/>the<sp/>event<sp/>group<sp/>value<sp/>prior<sp/>to<sp/>the<sp/>bits<sp/>being</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/><sp/><sp/><sp/>cleared.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref>;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>the<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>&amp;=<sp/>~uxBitsToClear;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="485"><highlight class="normal">}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>INCLUDE_xTimerPendFunctionCall<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="event__groups_8h_1a3d7de214a697f33fe7b914e26a93f33a" kindref="member">xEventGroupClearBitsFromISR</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToClear<sp/>)</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a9facfdc883aa503d2891c27c5c136d84" kindref="member">traceEVENT_GROUP_CLEAR_BITS_FROM_ISR</ref>(<sp/>xEventGroup,<sp/>uxBitsToClear<sp/>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="timers_8h_1ae0d9338933037e6feebe6437763fa299" kindref="member">xTimerPendFunctionCallFromISR</ref>(<sp/><ref refid="event__groups_8c_1a3bce459038e87064109c8462b1174c29" kindref="member">vEventGroupClearBitsCallback</ref>,<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>xEventGroup,<sp/>(<sp/>uint32_t<sp/>)<sp/>uxBitsToClear,<sp/>NULL<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>Can&apos;t<sp/>avoid<sp/>cast<sp/>to<sp/>void*<sp/>as<sp/>a<sp/>generic<sp/>callback<sp/>function<sp/>not<sp/>specific<sp/>to<sp/>this<sp/>use<sp/>case.<sp/>Callback<sp/>casts<sp/>back<sp/>to<sp/>original<sp/>type<sp/>so<sp/>safe.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503" refid="event__groups_8c_1adcb3d3f7dded9fa372bb1ee405c36b8d" refkind="member"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/><ref refid="event__groups_8c_1adcb3d3f7dded9fa372bb1ee405c36b8d" kindref="member">xEventGroupGetBitsFromISR</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup<sp/>)</highlight></codeline>
<codeline lineno="504"><highlight class="normal">{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxEventBits<sp/>=<sp/>xEventGroup;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxReturn;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref>;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>EventGroupHandle_t<sp/>is<sp/>a<sp/>typedef<sp/>used<sp/>in<sp/>other<sp/>functions<sp/>to<sp/>so<sp/>can&apos;t<sp/>be<sp/>pointer<sp/>to<sp/>const.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519" refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" refkind="member"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/><ref refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" kindref="member">xEventGroupSetBits</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToSet<sp/>)</highlight></codeline>
<codeline lineno="520"><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*pxListItem,<sp/>*pxNext;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*pxListEnd;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>pxList;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToClear<sp/>=<sp/>0,<sp/>uxBitsWaitedFor,<sp/>uxControlBits;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>*pxEventBits<sp/>=<sp/>xEventGroup;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xMatchFound<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>user<sp/>is<sp/>not<sp/>attempting<sp/>to<sp/>set<sp/>the<sp/>bits<sp/>used<sp/>by<sp/>the<sp/>kernel</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/><sp/>itself.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xEventGroup<sp/>);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>uxBitsToSet<sp/>&amp;<sp/><ref refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" kindref="member">eventEVENT_BITS_CONTROL_BYTES</ref><sp/>)<sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/>pxList<sp/>=<sp/>&amp;(<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" kindref="member">xTasksWaitingForBits</ref><sp/>);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/>pxListEnd<sp/>=<sp/><ref refid="list_8h_1a96cb0919f02e5c0d8e41ded0e65197a3" kindref="member">listGET_END_MARKER</ref>(<sp/>pxList<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e826<sp/>!e740<sp/>!e9087<sp/>The<sp/>mini<sp/>list<sp/>structure<sp/>is<sp/>used<sp/>as<sp/>the<sp/>list<sp/>end<sp/>to<sp/>save<sp/>RAM.<sp/><sp/>This<sp/>is<sp/>checked<sp/>and<sp/>valid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a56eb08eb12a36c99a32729a518d5b3fd" kindref="member">traceEVENT_GROUP_SET_BITS</ref>(<sp/>xEventGroup,<sp/>uxBitsToSet<sp/>);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>pxListItem<sp/>=<sp/><ref refid="list_8h_1a987cb2766e509022c23b654907cea199" kindref="member">listGET_HEAD_ENTRY</ref>(<sp/>pxList<sp/>);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>|=<sp/>uxBitsToSet;</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>if<sp/>the<sp/>new<sp/>bit<sp/>value<sp/>should<sp/>unblock<sp/>any<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>pxListItem<sp/>!=<sp/>pxListEnd<sp/>)</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNext<sp/>=<sp/><ref refid="list_8h_1aabf78d3f24ba56ac1d0bf0179438b960" kindref="member">listGET_NEXT</ref>(<sp/>pxListItem<sp/>);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxBitsWaitedFor<sp/>=<sp/><ref refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" kindref="member">listGET_LIST_ITEM_VALUE</ref>(<sp/>pxListItem<sp/>);</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xMatchFound<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Split<sp/>the<sp/>bits<sp/>waited<sp/>for<sp/>from<sp/>the<sp/>control<sp/>bits.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxControlBits<sp/>=<sp/>uxBitsWaitedFor<sp/>&amp;<sp/><ref refid="event__groups_8c_1a46c8292a6ba88b017cca402f5baf670b" kindref="member">eventEVENT_BITS_CONTROL_BYTES</ref>;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxBitsWaitedFor<sp/>&amp;=<sp/>~eventEVENT_BITS_CONTROL_BYTES;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>uxControlBits<sp/>&amp;<sp/><ref refid="event__groups_8c_1ae98d5f1271845ad42742aef9659e1568" kindref="member">eventWAIT_FOR_ALL_BITS</ref><sp/>)<sp/>==<sp/>(<sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Just<sp/>looking<sp/>for<sp/>single<sp/>bit<sp/>being<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>uxBitsWaitedFor<sp/>&amp;<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>)<sp/>!=<sp/>(<sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMatchFound<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>uxBitsWaitedFor<sp/>&amp;<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>)<sp/>==<sp/>uxBitsWaitedFor<sp/>)</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>All<sp/>bits<sp/>are<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xMatchFound<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Need<sp/>all<sp/>bits<sp/>to<sp/>be<sp/>set,<sp/>but<sp/>not<sp/>all<sp/>the<sp/>bits<sp/>were<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xMatchFound<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>bits<sp/>match.<sp/><sp/>Should<sp/>the<sp/>bits<sp/>be<sp/>cleared<sp/>on<sp/>exit?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>uxControlBits<sp/>&amp;<sp/><ref refid="event__groups_8c_1a1404686af7c8070fa57675707c817abc" kindref="member">eventCLEAR_EVENTS_ON_EXIT_BIT</ref><sp/>)<sp/>!=<sp/>(<sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxBitsToClear<sp/>|=<sp/>uxBitsWaitedFor;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>actual<sp/>event<sp/>flag<sp/>value<sp/>in<sp/>the<sp/>task&apos;s<sp/>event<sp/>list</highlight></codeline>
<codeline lineno="590"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>before<sp/>removing<sp/>the<sp/>task<sp/>from<sp/>the<sp/>event<sp/>list.<sp/><sp/>The</highlight></codeline>
<codeline lineno="591"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eventUNBLOCKED_DUE_TO_BIT_SET<sp/>bit<sp/>is<sp/>set<sp/>so<sp/>the<sp/>task<sp/>knows</highlight></codeline>
<codeline lineno="592"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>is<sp/>was<sp/>unblocked<sp/>due<sp/>to<sp/>its<sp/>required<sp/>bits<sp/>matching,<sp/>rather</highlight></codeline>
<codeline lineno="593"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>than<sp/>because<sp/>it<sp/>timed<sp/>out.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" kindref="member">vTaskRemoveFromUnorderedEventList</ref>(<sp/>pxListItem,<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>|<sp/><ref refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" kindref="member">eventUNBLOCKED_DUE_TO_BIT_SET</ref><sp/>);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>onto<sp/>the<sp/>next<sp/>list<sp/>item.<sp/><sp/>Note<sp/>pxListItem-&gt;pxNext<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>used<sp/>here<sp/>as<sp/>the<sp/>list<sp/>item<sp/>may<sp/>have<sp/>been<sp/>removed<sp/>from<sp/>the<sp/>event<sp/>list</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>inserted<sp/>into<sp/>the<sp/>ready/pending<sp/>reading<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxListItem<sp/>=<sp/>pxNext;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="602"><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>any<sp/>bits<sp/>that<sp/>matched<sp/>when<sp/>the<sp/>eventCLEAR_EVENTS_ON_EXIT_BIT</highlight></codeline>
<codeline lineno="604"><highlight class="comment"><sp/><sp/><sp/><sp/>bit<sp/>was<sp/>set<sp/>in<sp/>the<sp/>control<sp/>word.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref><sp/>&amp;=<sp/>~uxBitsToClear;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1ab1bcd95a3330b71c55198b2352926643" kindref="member">uxEventBits</ref>;</highlight></codeline>
<codeline lineno="610"><highlight class="normal">}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613" refid="event__groups_8c_1a6939faca89fc4ba52fa8288527042464" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="event__groups_8c_1a6939faca89fc4ba52fa8288527042464" kindref="member">vEventGroupDelete</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup<sp/>)</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>*pxEventBits<sp/>=<sp/>xEventGroup;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*pxTasksWaitingForBits<sp/>=<sp/>&amp;(<sp/>pxEventBits-&gt;<ref refid="struct_event_group_def__t_1a3dd347560456bfe452415efb52760dc3" kindref="member">xTasksWaitingForBits</ref><sp/>);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1abf48364a72dd38af47bf7203c06ee832" kindref="member">traceEVENT_GROUP_DELETE</ref>(<sp/>xEventGroup<sp/>);</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" kindref="member">listCURRENT_LIST_LENGTH</ref>(<sp/>pxTasksWaitingForBits<sp/>)<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unblock<sp/>the<sp/>task,<sp/>returning<sp/>0<sp/>as<sp/>the<sp/>event<sp/>list<sp/>is<sp/>being<sp/>deleted</highlight></codeline>
<codeline lineno="625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>cannot<sp/>therefore<sp/>have<sp/>any<sp/>bits<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTasksWaitingForBits-&gt;<ref refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" kindref="member">xListEnd</ref>.<ref refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1aa297f3eba16856d00d0d3a6cea5e9df6" kindref="member">pxNext</ref><sp/>!=<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/>)<sp/>&amp;(<sp/>pxTasksWaitingForBits-&gt;<ref refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" kindref="member">xListEnd</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" kindref="member">vTaskRemoveFromUnorderedEventList</ref>(<sp/>pxTasksWaitingForBits-&gt;<ref refid="structx_l_i_s_t_1a49ad62fa153126e27e273811167b336a" kindref="member">xListEnd</ref>.<ref refid="structx_m_i_n_i___l_i_s_t___i_t_e_m_1aa297f3eba16856d00d0d3a6cea5e9df6" kindref="member">pxNext</ref>,<sp/><ref refid="event__groups_8c_1ab451d5ad95813d5ec7ff1784d69e9ec3" kindref="member">eventUNBLOCKED_DUE_TO_BIT_SET</ref><sp/>);</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>0<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>event<sp/>group<sp/>can<sp/>only<sp/>have<sp/>been<sp/>allocated<sp/>dynamically<sp/>-<sp/>free</highlight></codeline>
<codeline lineno="633"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxEventBits<sp/>);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif(<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>event<sp/>group<sp/>could<sp/>have<sp/>been<sp/>allocated<sp/>statically<sp/>or</highlight></codeline>
<codeline lineno="639"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>dynamically,<sp/>so<sp/>check<sp/>before<sp/>attempting<sp/>to<sp/>free<sp/>the<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxEventBits-&gt;ucStaticallyAllocated<sp/>==<sp/>(<sp/>uint8_t<sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxEventBits<sp/>);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>internal<sp/>use<sp/>only<sp/>-<sp/>execute<sp/>a<sp/>&apos;set<sp/>bits&apos;<sp/>command<sp/>that<sp/>was<sp/>pended<sp/>from</highlight></codeline>
<codeline lineno="656"><highlight class="comment">an<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657" refid="event__groups_8c_1a54db6cc97bbb926aa4b78d5affc257d9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="event__groups_8c_1a54db6cc97bbb926aa4b78d5affc257d9" kindref="member">vEventGroupSetBitsCallback</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulBitsToSet<sp/>)</highlight></codeline>
<codeline lineno="658"><highlight class="normal">{</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" kindref="member">xEventGroupSetBits</ref>(<sp/>pvEventGroup,<sp/>(<sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>)<sp/>ulBitsToSet<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>Can&apos;t<sp/>avoid<sp/>cast<sp/>to<sp/>void*<sp/>as<sp/>a<sp/>generic<sp/>timer<sp/>callback<sp/>prototype.<sp/>Callback<sp/>casts<sp/>back<sp/>to<sp/>original<sp/>type<sp/>so<sp/>safe.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal">}</highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>For<sp/>internal<sp/>use<sp/>only<sp/>-<sp/>execute<sp/>a<sp/>&apos;clear<sp/>bits&apos;<sp/>command<sp/>that<sp/>was<sp/>pended<sp/>from</highlight></codeline>
<codeline lineno="664"><highlight class="comment">an<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665" refid="event__groups_8c_1a3bce459038e87064109c8462b1174c29" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="event__groups_8c_1a3bce459038e87064109c8462b1174c29" kindref="member">vEventGroupClearBitsCallback</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulBitsToClear<sp/>)</highlight></codeline>
<codeline lineno="666"><highlight class="normal">{</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="event__groups_8c_1a71dd2680fdfbdde7d6b10db203e266ba" kindref="member">xEventGroupClearBits</ref>(<sp/>pvEventGroup,<sp/>(<sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>)<sp/>ulBitsToClear<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>Can&apos;t<sp/>avoid<sp/>cast<sp/>to<sp/>void*<sp/>as<sp/>a<sp/>generic<sp/>timer<sp/>callback<sp/>prototype.<sp/>Callback<sp/>casts<sp/>back<sp/>to<sp/>original<sp/>type<sp/>so<sp/>safe.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal">}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671" refid="event__groups_8c_1a152ce51000f6d8d26afbd14b4794e036" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="event__groups_8c_1a152ce51000f6d8d26afbd14b4794e036" kindref="member">prvTestWaitCondition</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxCurrentEventBits,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToWaitFor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xWaitForAllBits<sp/>)</highlight></codeline>
<codeline lineno="672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xWaitConditionMet<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xWaitForAllBits<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Task<sp/>only<sp/>has<sp/>to<sp/>wait<sp/>for<sp/>one<sp/>bit<sp/>within<sp/>uxBitsToWaitFor<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="678"><highlight class="comment"><sp/><sp/><sp/><sp/>set.<sp/><sp/>Is<sp/>one<sp/>already<sp/>set?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>uxCurrentEventBits<sp/>&amp;<sp/>uxBitsToWaitFor<sp/>)<sp/>!=<sp/>(<sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xWaitConditionMet<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Task<sp/>has<sp/>to<sp/>wait<sp/>for<sp/>all<sp/>the<sp/>bits<sp/>in<sp/>uxBitsToWaitFor<sp/>to<sp/>be<sp/>set.</highlight></codeline>
<codeline lineno="691"><highlight class="comment"><sp/><sp/><sp/><sp/>Are<sp/>they<sp/>set<sp/>already?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>uxCurrentEventBits<sp/>&amp;<sp/>uxBitsToWaitFor<sp/>)<sp/>==<sp/>uxBitsToWaitFor<sp/>)</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xWaitConditionMet<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xWaitConditionMet;</highlight></codeline>
<codeline lineno="703"><highlight class="normal">}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>INCLUDE_xTimerPendFunctionCall<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="event__groups_8h_1a62b68278abac6358369ae8e390988a02" kindref="member">xEventGroupSetBitsFromISR</ref>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroupHandle_t</ref><sp/>xEventGroup,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="event__groups_8h_1ab2f21b93db0b2a0ab64d7a81ff32ac2e" kindref="member">EventBits_t</ref><sp/>uxBitsToSet,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*pxHigherPriorityTaskWoken<sp/>)</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ae11a37557005c2660326e9874d5d3155" kindref="member">traceEVENT_GROUP_SET_BITS_FROM_ISR</ref>(<sp/>xEventGroup,<sp/>uxBitsToSet<sp/>);</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="timers_8h_1ae0d9338933037e6feebe6437763fa299" kindref="member">xTimerPendFunctionCallFromISR</ref>(<sp/><ref refid="event__groups_8c_1a54db6cc97bbb926aa4b78d5affc257d9" kindref="member">vEventGroupSetBitsCallback</ref>,<sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>xEventGroup,<sp/>(<sp/>uint32_t<sp/>)<sp/>uxBitsToSet,<sp/>pxHigherPriorityTaskWoken<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>Can&apos;t<sp/>avoid<sp/>cast<sp/>to<sp/>void*<sp/>as<sp/>a<sp/>generic<sp/>callback<sp/>function<sp/>not<sp/>specific<sp/>to<sp/>this<sp/>use<sp/>case.<sp/>Callback<sp/>casts<sp/>back<sp/>to<sp/>original<sp/>type<sp/>so<sp/>safe.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(configUSE_TRACE_FACILITY<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"></highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxEventGroupGetNumber(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>xEventGroup<sp/>)</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*pxEventBits<sp/>=<sp/>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>*<sp/>)<sp/>xEventGroup;<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>!e9079<sp/>EventGroupHandle_t<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>EventGroup_t,<sp/>but<sp/>EventGroupHandle_t<sp/>is<sp/>kept<sp/>opaque<sp/>outside<sp/>of<sp/>this<sp/>file<sp/>for<sp/>data<sp/>hiding<sp/>purposes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xEventGroup<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>pxEventBits-&gt;uxEventGroupNumber;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"></highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vEventGroupSetNumber(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>xEventGroup,<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxEventGroupNumber<sp/>)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>(<sp/><ref refid="struct_event_group_def__t" kindref="compound">EventGroup_t</ref><sp/>*<sp/>)<sp/>xEventGroup<sp/>)-&gt;uxEventGroupNumber<sp/>=<sp/>uxEventGroupNumber;<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>!e9079<sp/>EventGroupHandle_t<sp/>is<sp/>a<sp/>pointer<sp/>to<sp/>an<sp/>EventGroup_t,<sp/>but<sp/>EventGroupHandle_t<sp/>is<sp/>kept<sp/>opaque<sp/>outside<sp/>of<sp/>this<sp/>file<sp/>for<sp/>data<sp/>hiding<sp/>purposes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/event_groups.c"/>
  </compounddef>
</doxygen>
