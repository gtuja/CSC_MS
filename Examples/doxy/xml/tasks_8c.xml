<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.10.0" xml:lang="en-US">
  <compounddef id="tasks_8c" kind="file" language="C++">
    <compoundname>tasks.c</compoundname>
    <includes local="no">stdlib.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="_free_r_t_o_s_8h" local="yes">FreeRTOS.h</includes>
    <includes refid="task_8h" local="yes">task.h</includes>
    <includes refid="timers_8h" local="yes">timers.h</includes>
    <includes refid="stack__macros_8h" local="yes">stack_macros.h</includes>
    <incdepgraph>
      <node id="7">
        <label>FreeRTOSConfig.h</label>
        <link refid="_free_r_t_o_s_config_8h"/>
      </node>
      <node id="4">
        <label>FreeRTOS.h</label>
        <link refid="_free_r_t_o_s_8h"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>deprecated_definitions.h</label>
        <link refid="deprecated__definitions_8h"/>
      </node>
      <node id="14">
        <label>list.h</label>
        <link refid="list_8h"/>
      </node>
      <node id="12">
        <label>mpu_wrappers.h</label>
        <link refid="mpu__wrappers_8h"/>
      </node>
      <node id="9">
        <label>portable.h</label>
        <link refid="portable_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>projdefs.h</label>
        <link refid="projdefs_8h"/>
      </node>
      <node id="16">
        <label>stack_macros.h</label>
        <link refid="stack__macros_8h"/>
      </node>
      <node id="13">
        <label>task.h</label>
        <link refid="task_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>timers.h</label>
        <link refid="timers_8h"/>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>portmacro.h</label>
        <link refid="portmacro_8h"/>
      </node>
      <node id="1">
        <label>NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c</label>
        <link refid="tasks_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>stddef.h</label>
      </node>
      <node id="6">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>stdlib.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structtsk_task_control_block" prot="public">tskTaskControlBlock</innerclass>
    <sectiondef kind="define">
      <memberdef kind="define" id="tasks_8c_1ab622d8c674f2a417a666a7ed89109e79" prot="public" static="no">
        <name>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="35" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1acd0c920e40647de517ac633965b52273" prot="public" static="no">
        <name>taskYIELD_IF_USING_PREEMPTION</name>
        <param></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="62" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="62" bodyend="-1"/>
        <referencedby refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" compoundref="tasks_8c" startline="1076" endline="1156">prvAddNewTaskToReadyList</referencedby>
        <referencedby refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</referencedby>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a4f2f023143b2cd2367a441e104f8cf2c" prot="public" static="no">
        <name>taskNOT_WAITING_NOTIFICATION</name>
        <initializer>( ( uint8_t ) 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="68" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1acee66205293e253c13626e74798a0cf0" prot="public" static="no">
        <name>taskWAITING_NOTIFICATION</name>
        <initializer>( ( uint8_t ) 1 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="69" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e" prot="public" static="no">
        <name>taskNOTIFICATION_RECEIVED</name>
        <initializer>( ( uint8_t ) 2 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="70" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1ad3b1c99066f14855be098ccca1685fac" prot="public" static="no">
        <name>tskSTACK_FILL_BYTE</name>
        <initializer>( 0xa5U )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="76" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1af06a1633d2fb92f67712e62f3d1c3777" prot="public" static="no">
        <name>tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB</name>
        <initializer>( ( uint8_t ) 0 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="79" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1ad65be2320d426aca4e0e72d29ccd04de" prot="public" static="no">
        <name>tskSTATICALLY_ALLOCATED_STACK_ONLY</name>
        <initializer>( ( uint8_t ) 1 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="80" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a9851e50775136d536fed623e1ac598aa" prot="public" static="no">
        <name>tskSTATICALLY_ALLOCATED_STACK_AND_TCB</name>
        <initializer>( ( uint8_t ) 2 )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="81" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a95d95c8702f95db8a8a446e1d083245a" prot="public" static="no">
        <name>tskSET_NEW_STACKS_TO_KNOWN_VALUE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="89" column="11" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="89" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a13f2f32dab5dee7a9b2c848c88ef9bcc" prot="public" static="no">
        <name>tskRUNNING_CHAR</name>
        <initializer>( &apos;X&apos; )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="95" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a4cd87df39bdffff557d06f4ff15a30b0" prot="public" static="no">
        <name>tskBLOCKED_CHAR</name>
        <initializer>( &apos;B&apos; )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="96" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a2fd6c7a58ad28dd1f2c1e322b1ab3fcb" prot="public" static="no">
        <name>tskREADY_CHAR</name>
        <initializer>( &apos;R&apos; )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="97" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a9aba572191d065741f5a3e94c416d455" prot="public" static="no">
        <name>tskDELETED_CHAR</name>
        <initializer>( &apos;D&apos; )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="98" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a3613b4b66406c8f6cc73e5c3e9f208db" prot="public" static="no">
        <name>tskSUSPENDED_CHAR</name>
        <initializer>( &apos;S&apos; )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="99" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1aa637612832bcdd420acc9e6cc4361071" prot="public" static="no">
        <name>configIDLE_TASK_NAME</name>
        <initializer>&quot;IDLE&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="112" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="112" bodyend="-1"/>
        <referencedby refid="task_8h_1aaf9dca1065c60abdeb309d56ab7293cb" compoundref="tasks_8c" startline="1974" endline="2095">vTaskStartScheduler</referencedby>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a80c883536b1faef436fcd47b16a10f98" prot="public" static="no">
        <name>taskRECORD_READY_PRIORITY</name>
        <param><defname>uxPriority</defname></param>
        <initializer>	{																									\
		if( ( uxPriority ) &gt; <ref refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" kindref="member">uxTopReadyPriority</ref> )														\
		{																								\
			<ref refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" kindref="member">uxTopReadyPriority</ref> = ( uxPriority );														\
		}																								\
	} /* taskRECORD_READY_PRIORITY */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="123" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="123" bodyend="129"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1adace394d56a7fe7a8f8ee83edba3537c" prot="public" static="no">
        <name>taskSELECT_HIGHEST_PRIORITY_TASK</name>
        <param></param>
        <initializer>	{																									\
	<ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref> uxTopPriority = <ref refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" kindref="member">uxTopReadyPriority</ref>;														\
																										\
		/* Find the highest priority queue that contains ready tasks. */								\
		while( <ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>( &amp;( <ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[ uxTopPriority ] ) ) )							\
		{																								\
			<ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>( uxTopPriority );																\
			--uxTopPriority;																			\
		}																								\
																										\
		/* <ref refid="list_8h_1a275d9855e9b71652e2b8f6e2ed62aadd" kindref="member">listGET_OWNER_OF_NEXT_ENTRY</ref> indexes through the list, so the tasks of						\
		the	same priority get an equal share of the processor time. */									\
		<ref refid="list_8h_1a275d9855e9b71652e2b8f6e2ed62aadd" kindref="member">listGET_OWNER_OF_NEXT_ENTRY</ref>( <ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>, &amp;( <ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[ uxTopPriority ] ) );			\
		<ref refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" kindref="member">uxTopReadyPriority</ref> = uxTopPriority;																\
	} /* taskSELECT_HIGHEST_PRIORITY_TASK */</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="133" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="133" bodyend="147"/>
        <referencedby refid="task_8h_1a7a82c12c2407390ecbb70c123aa11e58" compoundref="tasks_8c" startline="2988" endline="3060">vTaskSwitchContext</referencedby>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a9517fc40d713aff9dd8182223948f9c8" prot="public" static="no">
        <name>taskRESET_READY_PRIORITY</name>
        <param><defname>uxPriority</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="155" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a27f854590fc6fcb8b4c7955b5f13b98e" prot="public" static="no">
        <name>portRESET_READY_PRIORITY</name>
        <param><defname>uxPriority</defname></param>
        <param><defname>uxTopReadyPriority</defname></param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="156" column="10" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="155" bodyend="-1"/>
        <referencedby refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</referencedby>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1aa604b7713b82e63154a290e21ecf700c" prot="public" static="no">
        <name>taskSWITCH_DELAYED_LISTS</name>
        <param></param>
        <initializer>{																									\
	<ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref> *pxTemp;																					\
																									\
	/* The delayed tasks list should be empty when the lists are switched. */						\
	<ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>( ( <ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>( <ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref> ) ) );										\
																									\
	pxTemp = <ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref>;																		\
	<ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref> = <ref refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" kindref="member">pxOverflowDelayedTaskList</ref>;													\
	<ref refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" kindref="member">pxOverflowDelayedTaskList</ref> = pxTemp;																\
	<ref refid="tasks_8c_1aba03b8cb535f03f1921f11868c98b0ef" kindref="member">xNumOfOverflows</ref>++;																				\
	<ref refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" kindref="member">prvResetNextTaskUnblockTime</ref>();																	\
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="198" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="197" bodyend="209"/>
        <referencedby refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</referencedby>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" prot="public" static="no">
        <name>prvAddTaskToReadyList</name>
        <param><defname>pxTCB</defname></param>
        <initializer>	<ref refid="_free_r_t_o_s_8h_1a8c5050de556ff7e7cdbc7de55f46709d" kindref="member">traceMOVED_TASK_TO_READY_STATE</ref>( pxTCB );														\
	<ref refid="tasks_8c_1a80c883536b1faef436fcd47b16a10f98" kindref="member">taskRECORD_READY_PRIORITY</ref>( ( pxTCB )-&gt;uxPriority );												\
	<ref refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" kindref="member">vListInsertEnd</ref>( &amp;( <ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[ ( pxTCB )-&gt;uxPriority ] ), &amp;( ( pxTCB )-&gt;xStateListItem ) ); \
	<ref refid="_free_r_t_o_s_8h_1a8d70c64cfe141df1bbe25b624405ec37" kindref="member">tracePOST_MOVED_TASK_TO_READY_STATE</ref>( pxTCB )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="218" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="217" bodyend="221"/>
        <referencedby refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" compoundref="tasks_8c" startline="1076" endline="1156">prvAddNewTaskToReadyList</referencedby>
        <referencedby refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" compoundref="tasks_8c" startline="3205" endline="3250">vTaskRemoveFromUnorderedEventList</referencedby>
        <referencedby refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</referencedby>
        <referencedby refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</referencedby>
        <referencedby refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</referencedby>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" prot="public" static="no">
        <name>prvGetTCBFromHandle</name>
        <param><defname>pxHandle</defname></param>
        <initializer>( ( ( pxHandle ) == NULL ) ? <ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref> : ( pxHandle ) )</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="231" column="9" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="230" bodyend="-1"/>
        <referencedby refid="task_8h_1aedab278c23c41dcbfdf312d383bdb342" compoundref="tasks_8c" startline="2357" endline="2366">pcTaskGetName</referencedby>
      </memberdef>
      <memberdef kind="define" id="tasks_8c_1a3e36f3eda563e810a24ab36ee7c978d4" prot="public" static="no">
        <name>taskEVENT_LIST_ITEM_VALUE_IN_USE</name>
        <initializer>0x80000000UL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="244" column="11" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="243" bodyend="-1"/>
        <referencedby refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" compoundref="tasks_8c" startline="3080" endline="3101">vTaskPlaceOnUnorderedEventList</referencedby>
        <referencedby refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" compoundref="tasks_8c" startline="3205" endline="3250">vTaskRemoveFromUnorderedEventList</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="tasks_8c_1a67b1ddede4e49c946dd720d83c5838a5" prot="public" static="no">
        <type>struct <ref refid="structtsk_task_control_block" kindref="compound">tskTaskControlBlock</ref></type>
        <definition>typedef struct tskTaskControlBlock tskTCB</definition>
        <argsstring></argsstring>
        <name>tskTCB</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="328" column="8"/>
      </memberdef>
      <memberdef kind="typedef" id="tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453" prot="public" static="no">
        <type><ref refid="tasks_8c_1a67b1ddede4e49c946dd720d83c5838a5" kindref="member">tskTCB</ref></type>
        <definition>typedef tskTCB TCB_t</definition>
        <argsstring></argsstring>
        <name>TCB_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="332" column="16" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="332" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="var">
      <memberdef kind="variable" id="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" prot="public" static="no" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> <ref refid="tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453" kindref="member">TCB_t</ref> *volatile</type>
        <definition>PRIVILEGED_DATA TCB_t* volatile pxCurrentTCB</definition>
        <argsstring></argsstring>
        <name>pxCurrentTCB</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="336" column="33" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="336" bodyend="-1"/>
        <referencedby refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</referencedby>
        <referencedby refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" compoundref="tasks_8c" startline="1076" endline="1156">prvAddNewTaskToReadyList</referencedby>
        <referencedby refid="task_8h_1a7793b4bbe45c10d4c5104c126b89e87c" compoundref="tasks_8c" startline="4601" endline="4612">uxTaskResetEventItemValue</referencedby>
        <referencedby refid="task_8h_1a56ae23bc0dece4522d666959902221ca" compoundref="tasks_8c" startline="3063" endline="3077">vTaskPlaceOnEventList</referencedby>
        <referencedby refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" compoundref="tasks_8c" startline="3080" endline="3101">vTaskPlaceOnUnorderedEventList</referencedby>
        <referencedby refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" compoundref="tasks_8c" startline="3205" endline="3250">vTaskRemoveFromUnorderedEventList</referencedby>
        <referencedby refid="task_8h_1aaf9dca1065c60abdeb309d56ab7293cb" compoundref="tasks_8c" startline="1974" endline="2095">vTaskStartScheduler</referencedby>
        <referencedby refid="task_8h_1a7a82c12c2407390ecbb70c123aa11e58" compoundref="tasks_8c" startline="2988" endline="3060">vTaskSwitchContext</referencedby>
        <referencedby refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" compoundref="tasks_8c" startline="3273" endline="3333">xTaskCheckForTimeOut</referencedby>
        <referencedby refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</referencedby>
        <referencedby refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</referencedby>
        <referencedby refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> <ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref></type>
        <definition>PRIVILEGED_DATA List_t pxReadyTasksLists[configMAX_PRIORITIES]</definition>
        <argsstring>[configMAX_PRIORITIES]</argsstring>
        <name>pxReadyTasksLists</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="342" column="31" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="342" bodyend="-1"/>
        <referencedby refid="tasks_8c_1a36c7cc58985d41c2cb1b263563dbbaa1" compoundref="tasks_8c" startline="3391" endline="3505">portTASK_FUNCTION</referencedby>
        <referencedby refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" compoundref="tasks_8c" startline="3606" endline="3635">prvInitialiseTaskLists</referencedby>
        <referencedby refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1aa632b40f050382cce625ffb3c2ea8c7a" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> <ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref></type>
        <definition>PRIVILEGED_DATA List_t xDelayedTaskList1</definition>
        <argsstring></argsstring>
        <name>xDelayedTaskList1</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="343" column="31" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="343" bodyend="-1"/>
        <referencedby refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" compoundref="tasks_8c" startline="3606" endline="3635">prvInitialiseTaskLists</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1a52144ecca109402fbab49fa548175f82" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> <ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref></type>
        <definition>PRIVILEGED_DATA List_t xDelayedTaskList2</definition>
        <argsstring></argsstring>
        <name>xDelayedTaskList2</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="344" column="31" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="344" bodyend="-1"/>
        <referencedby refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" compoundref="tasks_8c" startline="3606" endline="3635">prvInitialiseTaskLists</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1adce0027ea7792541f2851462ac3581a6" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> <ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref> *volatile</type>
        <definition>PRIVILEGED_DATA List_t* volatile pxDelayedTaskList</definition>
        <argsstring></argsstring>
        <name>pxDelayedTaskList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="345" column="41" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="345" bodyend="-1"/>
        <referencedby refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</referencedby>
        <referencedby refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" compoundref="tasks_8c" startline="3606" endline="3635">prvInitialiseTaskLists</referencedby>
        <referencedby refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" compoundref="tasks_8c" startline="3942" endline="3963">prvResetNextTaskUnblockTime</referencedby>
        <referencedby refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> <ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref> *volatile</type>
        <definition>PRIVILEGED_DATA List_t* volatile pxOverflowDelayedTaskList</definition>
        <argsstring></argsstring>
        <name>pxOverflowDelayedTaskList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="346" column="41" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="346" bodyend="-1"/>
        <referencedby refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</referencedby>
        <referencedby refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" compoundref="tasks_8c" startline="3606" endline="3635">prvInitialiseTaskLists</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> <ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref></type>
        <definition>PRIVILEGED_DATA List_t xPendingReadyList</definition>
        <argsstring></argsstring>
        <name>xPendingReadyList</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="347" column="31" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="347" bodyend="-1"/>
        <referencedby refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" compoundref="tasks_8c" startline="3606" endline="3635">prvInitialiseTaskLists</referencedby>
        <referencedby refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</referencedby>
        <referencedby refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> volatile <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref></type>
        <definition>PRIVILEGED_DATA volatile UBaseType_t uxCurrentNumberOfTasks</definition>
        <argsstring></argsstring>
        <name>uxCurrentNumberOfTasks</name>
        <initializer>= ( <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref> ) 0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="369" column="45" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="369" bodyend="-1"/>
        <referencedby refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" compoundref="tasks_8c" startline="1076" endline="1156">prvAddNewTaskToReadyList</referencedby>
        <referencedby refid="tasks_8c_1a903096c962a2bc907f4b902a7d42302a" compoundref="tasks_8c" startline="3638" endline="3664">prvCheckTasksWaitingTermination</referencedby>
        <referencedby refid="task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a" compoundref="tasks_8c" startline="2349" endline="2354">uxTaskGetNumberOfTasks</referencedby>
        <referencedby refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> volatile <ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
        <definition>PRIVILEGED_DATA volatile TickType_t xTickCount</definition>
        <argsstring></argsstring>
        <name>xTickCount</name>
        <initializer>= ( <ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref> ) <ref refid="_free_r_t_o_s_8h_1ae52c1acd13b26e8758dc66b60b0e3417" kindref="member">configINITIAL_TICK_COUNT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="370" column="44" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="370" bodyend="-1"/>
        <referencedby refid="tasks_8c_1a36c7cc58985d41c2cb1b263563dbbaa1" compoundref="tasks_8c" startline="3391" endline="3505">portTASK_FUNCTION</referencedby>
        <referencedby refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</referencedby>
        <referencedby refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" compoundref="tasks_8c" startline="3265" endline="3270">vTaskInternalSetTimeOutState</referencedby>
        <referencedby refid="task_8h_1a67155ad4ea2482b5f4597a69f2152be0" compoundref="tasks_8c" startline="3253" endline="3262">vTaskSetTimeOutState</referencedby>
        <referencedby refid="task_8h_1aaf9dca1065c60abdeb309d56ab7293cb" compoundref="tasks_8c" startline="1974" endline="2095">vTaskStartScheduler</referencedby>
        <referencedby refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" compoundref="tasks_8c" startline="3273" endline="3333">xTaskCheckForTimeOut</referencedby>
        <referencedby refid="task_8h_1a753ecfe23e7386066ecccad5d16422f7" compoundref="tasks_8c" startline="2303" endline="2315">xTaskGetTickCount</referencedby>
        <referencedby refid="task_8h_1a092be3fd5752625303c307620be523ff" compoundref="tasks_8c" startline="2318" endline="2346">xTaskGetTickCountFromISR</referencedby>
        <referencedby refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> volatile <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref></type>
        <definition>PRIVILEGED_DATA volatile UBaseType_t uxTopReadyPriority</definition>
        <argsstring></argsstring>
        <name>uxTopReadyPriority</name>
        <initializer>= <ref refid="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" kindref="member">tskIDLE_PRIORITY</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="371" column="45" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="371" bodyend="-1"/>
        <referencedby refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> volatile <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>PRIVILEGED_DATA volatile BaseType_t xSchedulerRunning</definition>
        <argsstring></argsstring>
        <name>xSchedulerRunning</name>
        <initializer>= <ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="372" column="44" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="372" bodyend="-1"/>
        <referencedby refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" compoundref="tasks_8c" startline="1076" endline="1156">prvAddNewTaskToReadyList</referencedby>
        <referencedby refid="task_8h_1a1651e13c7ccd6273f53a62425ec79a15" compoundref="tasks_8c" startline="2098" endline="2106">vTaskEndScheduler</referencedby>
        <referencedby refid="task_8h_1aaf9dca1065c60abdeb309d56ab7293cb" compoundref="tasks_8c" startline="1974" endline="2095">vTaskStartScheduler</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1aa7a2317195d855e6961dd8bcaab9496a" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> volatile <ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
        <definition>PRIVILEGED_DATA volatile TickType_t xPendedTicks</definition>
        <argsstring></argsstring>
        <name>xPendedTicks</name>
        <initializer>= ( <ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref> ) 0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="373" column="44" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="373" bodyend="-1"/>
        <referencedby refid="task_8h_1a399bcc59c77ed9f1cb2bf3eac55bdf02" compoundref="tasks_8c" startline="2608" endline="2623">xTaskCatchUpTicks</referencedby>
        <referencedby refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</referencedby>
        <referencedby refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1a228b369b272bd560709d52837b3ac48c" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> volatile <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>PRIVILEGED_DATA volatile BaseType_t xYieldPending</definition>
        <argsstring></argsstring>
        <name>xYieldPending</name>
        <initializer>= <ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="374" column="44" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="374" bodyend="-1"/>
        <referencedby refid="task_8h_1a998c69e37431a3a32c637b31ff60089a" compoundref="tasks_8c" startline="3336" endline="3339">vTaskMissedYield</referencedby>
        <referencedby refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" compoundref="tasks_8c" startline="3205" endline="3250">vTaskRemoveFromUnorderedEventList</referencedby>
        <referencedby refid="task_8h_1a7a82c12c2407390ecbb70c123aa11e58" compoundref="tasks_8c" startline="2988" endline="3060">vTaskSwitchContext</referencedby>
        <referencedby refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</referencedby>
        <referencedby refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</referencedby>
        <referencedby refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1aba03b8cb535f03f1921f11868c98b0ef" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> volatile <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>PRIVILEGED_DATA volatile BaseType_t xNumOfOverflows</definition>
        <argsstring></argsstring>
        <name>xNumOfOverflows</name>
        <initializer>= ( <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref> ) 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="375" column="44" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="375" bodyend="-1"/>
        <referencedby refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" compoundref="tasks_8c" startline="3265" endline="3270">vTaskInternalSetTimeOutState</referencedby>
        <referencedby refid="task_8h_1a67155ad4ea2482b5f4597a69f2152be0" compoundref="tasks_8c" startline="3253" endline="3262">vTaskSetTimeOutState</referencedby>
        <referencedby refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" compoundref="tasks_8c" startline="3273" endline="3333">xTaskCheckForTimeOut</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1a43097b97496231e1af2dff1fac62bcc6" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref></type>
        <definition>PRIVILEGED_DATA UBaseType_t uxTaskNumber</definition>
        <argsstring></argsstring>
        <name>uxTaskNumber</name>
        <initializer>= ( <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref> ) 0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="376" column="36" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="376" bodyend="-1"/>
        <referencedby refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" compoundref="tasks_8c" startline="1076" endline="1156">prvAddNewTaskToReadyList</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1ac9869547a39abae93ce9ad092d580445" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> volatile <ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
        <definition>PRIVILEGED_DATA volatile TickType_t xNextTaskUnblockTime</definition>
        <argsstring></argsstring>
        <name>xNextTaskUnblockTime</name>
        <initializer>= ( <ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref> ) 0U</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="377" column="44" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="377" bodyend="-1"/>
        <referencedby refid="tasks_8c_1a36c7cc58985d41c2cb1b263563dbbaa1" compoundref="tasks_8c" startline="3391" endline="3505">portTASK_FUNCTION</referencedby>
        <referencedby refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</referencedby>
        <referencedby refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" compoundref="tasks_8c" startline="3942" endline="3963">prvResetNextTaskUnblockTime</referencedby>
        <referencedby refid="task_8h_1aaf9dca1065c60abdeb309d56ab7293cb" compoundref="tasks_8c" startline="1974" endline="2095">vTaskStartScheduler</referencedby>
        <referencedby refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1ac90c8a23419d8fa71919e020c433f1a6" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> <ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
        <definition>PRIVILEGED_DATA TaskHandle_t xIdleTaskHandle</definition>
        <argsstring></argsstring>
        <name>xIdleTaskHandle</name>
        <initializer>= NULL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="378" column="37" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="378" bodyend="-1"/>
        <referencedby refid="task_8h_1aaf9dca1065c60abdeb309d56ab7293cb" compoundref="tasks_8c" startline="1974" endline="2095">vTaskStartScheduler</referencedby>
      </memberdef>
      <memberdef kind="variable" id="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" prot="public" static="yes" mutable="no">
        <type><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref> volatile <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref></type>
        <definition>PRIVILEGED_DATA volatile UBaseType_t uxSchedulerSuspended</definition>
        <argsstring></argsstring>
        <name>uxSchedulerSuspended</name>
        <initializer>= ( <ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref> ) <ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="388" column="45" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="388" bodyend="-1"/>
        <referencedby refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" compoundref="tasks_8c" startline="3080" endline="3101">vTaskPlaceOnUnorderedEventList</referencedby>
        <referencedby refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" compoundref="tasks_8c" startline="3205" endline="3250">vTaskRemoveFromUnorderedEventList</referencedby>
        <referencedby refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</referencedby>
        <referencedby refid="task_8h_1a7a82c12c2407390ecbb70c123aa11e58" compoundref="tasks_8c" startline="2988" endline="3060">vTaskSwitchContext</referencedby>
        <referencedby refid="task_8h_1a399bcc59c77ed9f1cb2bf3eac55bdf02" compoundref="tasks_8c" startline="2608" endline="2623">xTaskCatchUpTicks</referencedby>
        <referencedby refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</referencedby>
        <referencedby refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</referencedby>
        <referencedby refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</referencedby>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="tasks_8c_1a1ceb56c5c7ff2581a5ea837db4f721c1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvInitialiseTaskLists</definition>
        <argsstring>(static void prvCheckTasksWaitingTermination void)</argsstring>
        <name>prvInitialiseTaskLists</name>
        <param>
          <type>static void <ref refid="tasks_8c_1a903096c962a2bc907f4b902a7d42302a" kindref="member">prvCheckTasksWaitingTermination</ref> void</type>
          <defname>void</defname>
        </param>
        <briefdescription>
<para>Utility task that simply returns pdTRUE if the task referenced by xTask is currently in the Suspended state, or pdFALSE if the task referenced by xTask is in any other state. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="439" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="439" bodyend="1073"/>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvAddNewTaskToReadyList</definition>
        <argsstring>(TCB_t *pxNewTCB)</argsstring>
        <name>prvAddNewTaskToReadyList</name>
        <param>
          <type><ref refid="tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453" kindref="member">TCB_t</ref> *</type>
          <declname>pxNewTCB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="1076" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="1076" bodyend="1156"/>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="_free_r_t_o_s_8h_1aca0e7403a160318f5c216fc40c95e294" compoundref="_free_r_t_o_s_8h" startline="298">portSETUP_TCB</references>
        <references refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" compoundref="tasks_8c" startline="217" endline="221">prvAddTaskToReadyList</references>
        <references refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" compoundref="tasks_8c" startline="3606" endline="3635">prvInitialiseTaskLists</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="tasks_8c_1acd0c920e40647de517ac633965b52273" compoundref="tasks_8c" startline="62">taskYIELD_IF_USING_PREEMPTION</references>
        <references refid="_free_r_t_o_s_8h_1a453dc678632734505187c453da598172" compoundref="_free_r_t_o_s_8h" startline="512">traceTASK_CREATE</references>
        <references refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" compoundref="tasks_8c" startline="369">uxCurrentNumberOfTasks</references>
        <references refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" compoundref="tasks_8c" startline="261">tskTaskControlBlock::uxPriority</references>
        <references refid="tasks_8c_1a43097b97496231e1af2dff1fac62bcc6" compoundref="tasks_8c" startline="376">uxTaskNumber</references>
        <references refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" compoundref="tasks_8c" startline="372">xSchedulerRunning</references>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a598661cdd2a6af95a077245d11e3d142" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskStartScheduler</definition>
        <argsstring>(void)</argsstring>
        <name>vTaskStartScheduler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="1974" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="1974" bodyend="2095"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="tasks_8c_1aa637612832bcdd420acc9e6cc4361071" compoundref="tasks_8c" startline="112">configIDLE_TASK_NAME</references>
        <references refid="_free_r_t_o_s_8h_1ae52c1acd13b26e8758dc66b60b0e3417" compoundref="_free_r_t_o_s_8h" startline="884">configINITIAL_TICK_COUNT</references>
        <references refid="_free_r_t_o_s_config_8h_1a6c534a6cf8a00528fe0be42083484f9a" compoundref="_free_r_t_o_s_config_8h" startline="70">configMINIMAL_STACK_SIZE</references>
        <references refid="projdefs_8h_1a0b024e12cbca6f5018f5f1a43818b03d" compoundref="projdefs_8h" startline="53">errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" compoundref="projdefs_8h" startline="48">pdFAIL</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" compoundref="projdefs_8h" startline="47">pdPASS</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="_free_r_t_o_s_8h_1a727939bcdb98501e0eba0ec8a1841e1b" compoundref="_free_r_t_o_s_8h" startline="734">portCONFIGURE_TIMER_FOR_RUN_TIME_STATS</references>
        <references refid="portmacro_8h_1a6e3d10ee1a0734a647ca192523c2cfc1" compoundref="portmacro_8h" startline="97">portDISABLE_INTERRUPTS</references>
        <references refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" compoundref="portmacro_8h" startline="64">portMAX_DELAY</references>
        <references refid="_free_r_t_o_s_8h_1a27b7e11718b2ec5b5217e60f3b9e8aec" compoundref="_free_r_t_o_s_8h" startline="742">portPRIVILEGE_BIT</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="_free_r_t_o_s_8h_1a2f813fe80d3519a396a9f2bb7cc7e820" compoundref="_free_r_t_o_s_8h" startline="331">traceTASK_SWITCHED_IN</references>
        <references refid="tasks_8c_1ac90c8a23419d8fa71919e020c433f1a6" compoundref="tasks_8c" startline="378">xIdleTaskHandle</references>
        <references refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" compoundref="tasks_8c" startline="377">xNextTaskUnblockTime</references>
        <references refid="portable_8h_1ade5a8c6666e7413a0355cc252029c5c6" compoundref="port_8c" startline="214" endline="241">xPortStartScheduler</references>
        <references refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" compoundref="tasks_8c" startline="372">xSchedulerRunning</references>
        <references refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" compoundref="tasks_8c" startline="370">xTickCount</references>
        <references refid="timers_8h_1af777ab3e9ac04abd5dd21be739fa1321">xTimerCreateTimerTask</references>
        <referencedby refid="cmsis__os2_8c_1a9ae2cc00f0d89d7b6a307bba942b5221" compoundref="cmsis__os2_8c" startline="265" endline="286">osKernelStart</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1aeadc53d3d0d0ea3a6c7702a9eacbf452" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskEndScheduler</definition>
        <argsstring>(void)</argsstring>
        <name>vTaskEndScheduler</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="2098" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="2098" bodyend="2106"/>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="portmacro_8h_1a6e3d10ee1a0734a647ca192523c2cfc1" compoundref="portmacro_8h" startline="97">portDISABLE_INTERRUPTS</references>
        <references refid="portable_8h_1af76f3c0b44c5b5c06fc046a4ee1a6423" compoundref="port_8c" startline="244" endline="249">vPortEndScheduler</references>
        <references refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" compoundref="tasks_8c" startline="372">xSchedulerRunning</references>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a084d232640bd1d04bcac0b8784417015" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskSuspendAll</definition>
        <argsstring>(void)</argsstring>
        <name>vTaskSuspendAll</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="2109" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="2109" bodyend="2127"/>
        <references refid="_free_r_t_o_s_8h_1a4b03d1af7eaa8e1c7788e17fc74482eb" compoundref="_free_r_t_o_s_8h" startline="257">portMEMORY_BARRIER</references>
        <references refid="_free_r_t_o_s_8h_1a24b7085ff32bad7b44b6ea618f640914" compoundref="_free_r_t_o_s_8h" startline="261">portSOFTWARE_BARRIER</references>
        <references refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" compoundref="tasks_8c" startline="388">uxSchedulerSuspended</references>
        <referencedby refid="cmsis__os2_8c_1a948609ee930d9b38336b9e1c2a4dfe12" compoundref="cmsis__os2_8c" startline="288" endline="313">osKernelLock</referencedby>
        <referencedby refid="cmsis__os2_8c_1ae7d0a71b9586cbbb49fcbdf6a04f0289" compoundref="cmsis__os2_8c" startline="347" endline="381">osKernelRestoreLock</referencedby>
        <referencedby refid="cmsis__os2_8c_1a5606604d56e21ece1a654664be877439" compoundref="cmsis__os2_8c" startline="699" endline="725">osThreadEnumerate</referencedby>
        <referencedby refid="tasks_8c_1a36c7cc58985d41c2cb1b263563dbbaa1" compoundref="tasks_8c" startline="3391" endline="3505">portTASK_FUNCTION</referencedby>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
        <referencedby refid="event__groups_8c_1a6939faca89fc4ba52fa8288527042464" compoundref="event__groups_8c" startline="613" endline="652">vEventGroupDelete</referencedby>
        <referencedby refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" compoundref="heap__4_8c" startline="266" endline="312">vPortFree</referencedby>
        <referencedby refid="portable_8h_1abbecc6cff952357f60cce5014ecbe470" compoundref="heap__4_8c" startline="442" endline="491">vPortGetHeapStats</referencedby>
        <referencedby refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" compoundref="event__groups_8c" startline="519" endline="610">xEventGroupSetBits</referencedby>
        <referencedby refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" compoundref="event__groups_8c" startline="191" endline="308">xEventGroupSync</referencedby>
        <referencedby refid="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" compoundref="event__groups_8c" startline="311" endline="458">xEventGroupWaitBits</referencedby>
        <referencedby refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" compoundref="queue_8c" startline="740" endline="947">xQueueGenericSend</referencedby>
        <referencedby refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" compoundref="queue_8c" startline="1636" endline="1782">xQueuePeek</referencedby>
        <referencedby refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" compoundref="queue_8c" startline="1277" endline="1415">xQueueReceive</referencedby>
        <referencedby refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" compoundref="queue_8c" startline="1418" endline="1633">xQueueSemaphoreTake</referencedby>
        <referencedby refid="task_8h_1a399bcc59c77ed9f1cb2bf3eac55bdf02" compoundref="tasks_8c" startline="2608" endline="2623">xTaskCatchUpTicks</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xTaskResumeAll</definition>
        <argsstring>(void)</argsstring>
        <name>xTaskResumeAll</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="2193" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="2193" bodyend="2300"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="list_8h_1a715561302af8cb5b74416b23ce4e999d" compoundref="list_8h" startline="307">listGET_OWNER_OF_HEAD_ENTRY</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" compoundref="tasks_8c" startline="217" endline="221">prvAddTaskToReadyList</references>
        <references refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" compoundref="tasks_8c" startline="3942" endline="3963">prvResetNextTaskUnblockTime</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="tasks_8c_1acd0c920e40647de517ac633965b52273" compoundref="tasks_8c" startline="62">taskYIELD_IF_USING_PREEMPTION</references>
        <references refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" compoundref="tasks_8c" startline="369">uxCurrentNumberOfTasks</references>
        <references refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" compoundref="list_8c" startline="170" endline="196">uxListRemove</references>
        <references refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" compoundref="tasks_8c" startline="261">tskTaskControlBlock::uxPriority</references>
        <references refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" compoundref="tasks_8c" startline="388">uxSchedulerSuspended</references>
        <references refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" compoundref="tasks_8c" startline="260">tskTaskControlBlock::xEventListItem</references>
        <references refid="tasks_8c_1aa7a2317195d855e6961dd8bcaab9496a" compoundref="tasks_8c" startline="373">xPendedTicks</references>
        <references refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" compoundref="tasks_8c" startline="347">xPendingReadyList</references>
        <references refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" compoundref="tasks_8c" startline="259">tskTaskControlBlock::xStateListItem</references>
        <references refid="tasks_8c_1a54f31e9aef0eb7b87e48c7d68ecc84c1" compoundref="tasks_8c" startline="2706" endline="2875">xTaskIncrementTick</references>
        <references refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" compoundref="tasks_8c" startline="374">xYieldPending</references>
        <referencedby refid="cmsis__os2_8c_1ae7d0a71b9586cbbb49fcbdf6a04f0289" compoundref="cmsis__os2_8c" startline="347" endline="381">osKernelRestoreLock</referencedby>
        <referencedby refid="cmsis__os2_8c_1af401728b4657456198c33fe75f8d6720" compoundref="cmsis__os2_8c" startline="315" endline="345">osKernelUnlock</referencedby>
        <referencedby refid="cmsis__os2_8c_1a5606604d56e21ece1a654664be877439" compoundref="cmsis__os2_8c" startline="699" endline="725">osThreadEnumerate</referencedby>
        <referencedby refid="tasks_8c_1a36c7cc58985d41c2cb1b263563dbbaa1" compoundref="tasks_8c" startline="3391" endline="3505">portTASK_FUNCTION</referencedby>
        <referencedby refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" compoundref="heap__4_8c" startline="115" endline="263">pvPortMalloc</referencedby>
        <referencedby refid="event__groups_8c_1a6939faca89fc4ba52fa8288527042464" compoundref="event__groups_8c" startline="613" endline="652">vEventGroupDelete</referencedby>
        <referencedby refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" compoundref="heap__4_8c" startline="266" endline="312">vPortFree</referencedby>
        <referencedby refid="portable_8h_1abbecc6cff952357f60cce5014ecbe470" compoundref="heap__4_8c" startline="442" endline="491">vPortGetHeapStats</referencedby>
        <referencedby refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" compoundref="event__groups_8c" startline="519" endline="610">xEventGroupSetBits</referencedby>
        <referencedby refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" compoundref="event__groups_8c" startline="191" endline="308">xEventGroupSync</referencedby>
        <referencedby refid="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" compoundref="event__groups_8c" startline="311" endline="458">xEventGroupWaitBits</referencedby>
        <referencedby refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" compoundref="queue_8c" startline="740" endline="947">xQueueGenericSend</referencedby>
        <referencedby refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" compoundref="queue_8c" startline="1636" endline="1782">xQueuePeek</referencedby>
        <referencedby refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" compoundref="queue_8c" startline="1277" endline="1415">xQueueReceive</referencedby>
        <referencedby refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" compoundref="queue_8c" startline="1418" endline="1633">xQueueSemaphoreTake</referencedby>
        <referencedby refid="task_8h_1a399bcc59c77ed9f1cb2bf3eac55bdf02" compoundref="tasks_8c" startline="2608" endline="2623">xTaskCatchUpTicks</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a5fa24e36d5e1eeb57f5b73b72ea048e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
        <definition>TickType_t xTaskGetTickCount</definition>
        <argsstring>(void)</argsstring>
        <name>xTaskGetTickCount</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="2303" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="2303" bodyend="2315"/>
        <references refid="_free_r_t_o_s_8h_1a5ada85b405891061cad280c1e35213ee" compoundref="_free_r_t_o_s_8h" startline="891">portTICK_TYPE_ENTER_CRITICAL</references>
        <references refid="_free_r_t_o_s_8h_1a3a24fff82b123ddc7cf8195a466733dd" compoundref="_free_r_t_o_s_8h" startline="892">portTICK_TYPE_EXIT_CRITICAL</references>
        <references refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" compoundref="tasks_8c" startline="370">xTickCount</references>
        <referencedby refid="cmsis__os2_8c_1a3c807924c2d6d43bc2ffb49da3f7f3a1" compoundref="cmsis__os2_8c" startline="898" endline="924">osDelayUntil</referencedby>
        <referencedby refid="cmsis__os2_8c_1ae0fcaff6cecfb4013bb556c87afcd7d2" compoundref="cmsis__os2_8c" startline="415" endline="436">osKernelGetSysTimerCount</referencedby>
        <referencedby refid="cmsis__os2_8c_1a84bcdbf2fb76b10c8df4e439f0c7e11b" compoundref="cmsis__os2_8c" startline="383" endline="393">osKernelGetTickCount</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1ad58fd766b8f438b5703276f585738762" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
        <definition>TickType_t xTaskGetTickCountFromISR</definition>
        <argsstring>(void)</argsstring>
        <name>xTaskGetTickCountFromISR</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="2318" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="2318" bodyend="2346"/>
        <references refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" compoundref="_free_r_t_o_s_8h" startline="806">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</references>
        <references refid="_free_r_t_o_s_8h_1a506f401396abd44a8dbe31edac713f8b" compoundref="_free_r_t_o_s_8h" startline="894">portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="_free_r_t_o_s_8h_1a7b53d0f5d4ae09f599f92fb5cd546e6b" compoundref="_free_r_t_o_s_8h" startline="893">portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR</references>
        <references refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" compoundref="tasks_8c" startline="370">xTickCount</references>
        <referencedby refid="cmsis__os2_8c_1a84bcdbf2fb76b10c8df4e439f0c7e11b" compoundref="cmsis__os2_8c" startline="383" endline="393">osKernelGetTickCount</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a4b660446c721df74158dddb9fc189c1e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref></type>
        <definition>UBaseType_t uxTaskGetNumberOfTasks</definition>
        <argsstring>(void)</argsstring>
        <name>uxTaskGetNumberOfTasks</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="2349" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="2349" bodyend="2354"/>
        <references refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" compoundref="tasks_8c" startline="369">uxCurrentNumberOfTasks</references>
        <referencedby refid="cmsis__os2_8c_1a5606604d56e21ece1a654664be877439" compoundref="cmsis__os2_8c" startline="699" endline="725">osThreadEnumerate</referencedby>
        <referencedby refid="cmsis__os2_8c_1a495b3f812224e7301f23a691793765db" compoundref="cmsis__os2_8c" startline="686" endline="696">osThreadGetCount</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1acb1be57d03f6f1a3161b69e98df6ccb9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char *</type>
        <definition>char * pcTaskGetName</definition>
        <argsstring>(TaskHandle_t xTaskToQuery)</argsstring>
        <name>pcTaskGetName</name>
        <param>
          <type><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref></type>
          <declname>xTaskToQuery</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="2357" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="2357" bodyend="2366"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="structtsk_task_control_block_1a67d61291794f38afb5be5132078bc24f" compoundref="tasks_8c" startline="263">tskTaskControlBlock::pcTaskName</references>
        <references refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" compoundref="tasks_8c" startline="230">prvGetTCBFromHandle</references>
        <referencedby refid="cmsis__os2_8c_1ac3230f3a55a297514b013ebf38f27e0a" compoundref="cmsis__os2_8c" startline="512" endline="523">osThreadGetName</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1aea7126047f4a766a28f579a0027f00c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xTaskCatchUpTicks</definition>
        <argsstring>(TickType_t xTicksToCatchUp)</argsstring>
        <name>xTaskCatchUpTicks</name>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToCatchUp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="2608" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="2608" bodyend="2623"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" compoundref="tasks_8c" startline="388">uxSchedulerSuspended</references>
        <references refid="tasks_8c_1a084d232640bd1d04bcac0b8784417015" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="tasks_8c_1aa7a2317195d855e6961dd8bcaab9496a" compoundref="tasks_8c" startline="373">xPendedTicks</references>
        <references refid="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a54f31e9aef0eb7b87e48c7d68ecc84c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xTaskIncrementTick</definition>
        <argsstring>(void)</argsstring>
        <name>xTaskIncrementTick</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="2706" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="2706" bodyend="2875"/>
        <references refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" compoundref="list_8h" startline="255">listCURRENT_LIST_LENGTH</references>
        <references refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" compoundref="list_8h" startline="208">listGET_LIST_ITEM_VALUE</references>
        <references refid="list_8h_1a715561302af8cb5b74416b23ce4e999d" compoundref="list_8h" startline="307">listGET_OWNER_OF_HEAD_ENTRY</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="list_8h_1a7c4dff11380cd843ed0b6a8dc065916b" compoundref="list_8h" startline="326">listLIST_ITEM_CONTAINER</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" compoundref="portmacro_8h" startline="64">portMAX_DELAY</references>
        <references refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" compoundref="tasks_8c" startline="217" endline="221">prvAddTaskToReadyList</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" compoundref="tasks_8c" startline="345">pxDelayedTaskList</references>
        <references refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" compoundref="tasks_8c" startline="342">pxReadyTasksLists</references>
        <references refid="tasks_8c_1aa604b7713b82e63154a290e21ecf700c" compoundref="tasks_8c" startline="197" endline="209">taskSWITCH_DELAYED_LISTS</references>
        <references refid="_free_r_t_o_s_8h_1aeea8ada76999a73fd5ffcacd267d336d" compoundref="_free_r_t_o_s_8h" startline="548">traceTASK_INCREMENT_TICK</references>
        <references refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" compoundref="list_8c" startline="170" endline="196">uxListRemove</references>
        <references refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" compoundref="tasks_8c" startline="261">tskTaskControlBlock::uxPriority</references>
        <references refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" compoundref="tasks_8c" startline="388">uxSchedulerSuspended</references>
        <references refid="cmsis__os2_8c_1a9ca051aa77e17583aa5a85d5de5c199a">vApplicationTickHook</references>
        <references refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" compoundref="tasks_8c" startline="260">tskTaskControlBlock::xEventListItem</references>
        <references refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" compoundref="tasks_8c" startline="377">xNextTaskUnblockTime</references>
        <references refid="tasks_8c_1aa7a2317195d855e6961dd8bcaab9496a" compoundref="tasks_8c" startline="373">xPendedTicks</references>
        <references refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" compoundref="tasks_8c" startline="259">tskTaskControlBlock::xStateListItem</references>
        <references refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" compoundref="tasks_8c" startline="370">xTickCount</references>
        <references refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" compoundref="tasks_8c" startline="374">xYieldPending</references>
        <referencedby refid="port_8c_1a78100b2d36913d0b45565be8975e5de8" compoundref="port_8c" startline="354" endline="368">xPortSysTickHandler</referencedby>
        <referencedby refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a9c86137bc3c1cbffc39fff22627cb885" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskSwitchContext</definition>
        <argsstring>(void)</argsstring>
        <name>vTaskSwitchContext</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="2988" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="2988" bodyend="3060"/>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="stack__macros_8h_1a48d287f599f5c139ae0764f024368806" compoundref="stack__macros_8h" startline="123">taskCHECK_FOR_STACK_OVERFLOW</references>
        <references refid="tasks_8c_1adace394d56a7fe7a8f8ee83edba3537c" compoundref="tasks_8c" startline="133" endline="147">taskSELECT_HIGHEST_PRIORITY_TASK</references>
        <references refid="_free_r_t_o_s_8h_1a2f813fe80d3519a396a9f2bb7cc7e820" compoundref="_free_r_t_o_s_8h" startline="331">traceTASK_SWITCHED_IN</references>
        <references refid="_free_r_t_o_s_8h_1a4b94b0d35e9a4ad783af7be32cabbdaa" compoundref="_free_r_t_o_s_8h" startline="353">traceTASK_SWITCHED_OUT</references>
        <references refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" compoundref="tasks_8c" startline="388">uxSchedulerSuspended</references>
        <references refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" compoundref="tasks_8c" startline="374">xYieldPending</references>
        <referencedby refid="portable_8h_1ade5a8c6666e7413a0355cc252029c5c6" compoundref="port_8c" startline="214" endline="241">xPortStartScheduler</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1adc9eb47ceecf7dd7ee325bebff9eafc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskPlaceOnEventList</definition>
        <argsstring>(List_t *const pxEventList, const TickType_t xTicksToWait)</argsstring>
        <name>vTaskPlaceOnEventList</name>
        <param>
          <type><ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref> *const</type>
          <declname>pxEventList</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3063" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3063" bodyend="3077"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="list_8h_1aa129290da5cbda47dffb7bf877b2f02a" compoundref="list_8c" startline="103" endline="167">vListInsert</references>
        <references refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" compoundref="tasks_8c" startline="260">tskTaskControlBlock::xEventListItem</references>
        <referencedby refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" compoundref="queue_8c" startline="740" endline="947">xQueueGenericSend</referencedby>
        <referencedby refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" compoundref="queue_8c" startline="1636" endline="1782">xQueuePeek</referencedby>
        <referencedby refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" compoundref="queue_8c" startline="1277" endline="1415">xQueueReceive</referencedby>
        <referencedby refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" compoundref="queue_8c" startline="1418" endline="1633">xQueueSemaphoreTake</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a0896d9cd10d789ef8dbb95c4959c3ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskPlaceOnUnorderedEventList</definition>
        <argsstring>(List_t *pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait)</argsstring>
        <name>vTaskPlaceOnUnorderedEventList</name>
        <param>
          <type><ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref> *</type>
          <declname>pxEventList</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xItemValue</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3080" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3080" bodyend="3101"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" compoundref="list_8h" startline="198">listSET_LIST_ITEM_VALUE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" compoundref="tasks_8c" startline="5176" endline="5285">prvAddCurrentTaskToDelayedList</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="tasks_8c_1a3e36f3eda563e810a24ab36ee7c978d4" compoundref="tasks_8c" startline="243">taskEVENT_LIST_ITEM_VALUE_IN_USE</references>
        <references refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" compoundref="tasks_8c" startline="388">uxSchedulerSuspended</references>
        <references refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" compoundref="list_8c" startline="74" endline="100">vListInsertEnd</references>
        <references refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" compoundref="tasks_8c" startline="260">tskTaskControlBlock::xEventListItem</references>
        <referencedby refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" compoundref="event__groups_8c" startline="191" endline="308">xEventGroupSync</referencedby>
        <referencedby refid="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" compoundref="event__groups_8c" startline="311" endline="458">xEventGroupWaitBits</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a6d21c9054b62d8bc1bfb2724e11578d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xTaskRemoveFromEventList</definition>
        <argsstring>(const List_t *const pxEventList)</argsstring>
        <name>xTaskRemoveFromEventList</name>
        <param>
          <type>const <ref refid="list_8h_1ad14d7e3de1350e459c7c23c6f59c902a" kindref="member">List_t</ref> *const</type>
          <declname>pxEventList</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3137" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3137" bodyend="3202"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="list_8h_1a715561302af8cb5b74416b23ce4e999d" compoundref="list_8h" startline="307">listGET_OWNER_OF_HEAD_ENTRY</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" compoundref="tasks_8c" startline="217" endline="221">prvAddTaskToReadyList</references>
        <references refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" compoundref="tasks_8c" startline="3942" endline="3963">prvResetNextTaskUnblockTime</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" compoundref="list_8c" startline="170" endline="196">uxListRemove</references>
        <references refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" compoundref="tasks_8c" startline="261">tskTaskControlBlock::uxPriority</references>
        <references refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" compoundref="tasks_8c" startline="388">uxSchedulerSuspended</references>
        <references refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" compoundref="list_8c" startline="74" endline="100">vListInsertEnd</references>
        <references refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" compoundref="tasks_8c" startline="260">tskTaskControlBlock::xEventListItem</references>
        <references refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" compoundref="tasks_8c" startline="347">xPendingReadyList</references>
        <references refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" compoundref="tasks_8c" startline="259">tskTaskControlBlock::xStateListItem</references>
        <references refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" compoundref="tasks_8c" startline="374">xYieldPending</references>
        <referencedby refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" compoundref="queue_8c" startline="2171" endline="2288">prvUnlockQueue</referencedby>
        <referencedby refid="queue_8h_1a3c13a9fe455ec2d35b5f8386a1040599" compoundref="queue_8c" startline="255" endline="305">xQueueGenericReset</referencedby>
        <referencedby refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" compoundref="queue_8c" startline="740" endline="947">xQueueGenericSend</referencedby>
        <referencedby refid="queue_8h_1a263711eb0124112e828a18fd4b8ab29d" compoundref="queue_8c" startline="950" endline="1109">xQueueGenericSendFromISR</referencedby>
        <referencedby refid="queue_8h_1ad14ae1174c2772cffc9e0c2c45dc55a6" compoundref="queue_8c" startline="1112" endline="1274">xQueueGiveFromISR</referencedby>
        <referencedby refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" compoundref="queue_8c" startline="1636" endline="1782">xQueuePeek</referencedby>
        <referencedby refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" compoundref="queue_8c" startline="1277" endline="1415">xQueueReceive</referencedby>
        <referencedby refid="queue_8h_1acdf528f5c91131ae2f31c669cfd65758" compoundref="queue_8c" startline="1785" endline="1873">xQueueReceiveFromISR</referencedby>
        <referencedby refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" compoundref="queue_8c" startline="1418" endline="1633">xQueueSemaphoreTake</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a82d239ddcdd2d68abe14789b1257b11f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskRemoveFromUnorderedEventList</definition>
        <argsstring>(ListItem_t *pxEventListItem, const TickType_t xItemValue)</argsstring>
        <name>vTaskRemoveFromUnorderedEventList</name>
        <param>
          <type><ref refid="list_8h_1a1a62d469392f9bfe2443e7efab9c8398" kindref="member">ListItem_t</ref> *</type>
          <declname>pxEventListItem</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xItemValue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3205" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3205" bodyend="3250"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="list_8h_1aa9469bd061a44b4f75d30c6175f66d5c" compoundref="list_8h" startline="189">listGET_LIST_ITEM_OWNER</references>
        <references refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" compoundref="list_8h" startline="198">listSET_LIST_ITEM_VALUE</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" compoundref="tasks_8c" startline="217" endline="221">prvAddTaskToReadyList</references>
        <references refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" compoundref="tasks_8c" startline="3942" endline="3963">prvResetNextTaskUnblockTime</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="tasks_8c_1a3e36f3eda563e810a24ab36ee7c978d4" compoundref="tasks_8c" startline="243">taskEVENT_LIST_ITEM_VALUE_IN_USE</references>
        <references refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" compoundref="list_8c" startline="170" endline="196">uxListRemove</references>
        <references refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" compoundref="tasks_8c" startline="261">tskTaskControlBlock::uxPriority</references>
        <references refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" compoundref="tasks_8c" startline="388">uxSchedulerSuspended</references>
        <references refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" compoundref="tasks_8c" startline="259">tskTaskControlBlock::xStateListItem</references>
        <references refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" compoundref="tasks_8c" startline="374">xYieldPending</references>
        <referencedby refid="event__groups_8c_1a6939faca89fc4ba52fa8288527042464" compoundref="event__groups_8c" startline="613" endline="652">vEventGroupDelete</referencedby>
        <referencedby refid="event__groups_8c_1a9ac7cd970f50e2e50a494b656e0eb239" compoundref="event__groups_8c" startline="519" endline="610">xEventGroupSetBits</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a5dfb2b9e41fb002318d9c55452a91c83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskSetTimeOutState</definition>
        <argsstring>(TimeOut_t *const pxTimeOut)</argsstring>
        <name>vTaskSetTimeOutState</name>
        <param>
          <type><ref refid="task_8h_1a558b407b5433bee1696535e3c4816bdf" kindref="member">TimeOut_t</ref> *const</type>
          <declname>pxTimeOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3253" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3253" bodyend="3262"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="tasks_8c_1aba03b8cb535f03f1921f11868c98b0ef" compoundref="tasks_8c" startline="375">xNumOfOverflows</references>
        <references refid="structx_t_i_m_e___o_u_t_1a9289c6f97096a9b3e3fc705d0bc5a160" compoundref="task_8h" startline="104">xTIME_OUT::xOverflowCount</references>
        <references refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" compoundref="tasks_8c" startline="370">xTickCount</references>
        <references refid="structx_t_i_m_e___o_u_t_1a3464939ca050f7bcc6ffe0d8d3766337" compoundref="task_8h" startline="105">xTIME_OUT::xTimeOnEntering</references>
        <referencedby refid="stream__buffer_8h_1a35cdf3b6bf677086b9128782f762499d" compoundref="stream__buffer_8c" startline="506" endline="607">xStreamBufferSend</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a91fbc7c4b65e32fae51b7d43ebdcb131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskInternalSetTimeOutState</definition>
        <argsstring>(TimeOut_t *const pxTimeOut)</argsstring>
        <name>vTaskInternalSetTimeOutState</name>
        <param>
          <type><ref refid="task_8h_1a558b407b5433bee1696535e3c4816bdf" kindref="member">TimeOut_t</ref> *const</type>
          <declname>pxTimeOut</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3265" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3265" bodyend="3270"/>
        <references refid="tasks_8c_1aba03b8cb535f03f1921f11868c98b0ef" compoundref="tasks_8c" startline="375">xNumOfOverflows</references>
        <references refid="structx_t_i_m_e___o_u_t_1a9289c6f97096a9b3e3fc705d0bc5a160" compoundref="task_8h" startline="104">xTIME_OUT::xOverflowCount</references>
        <references refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" compoundref="tasks_8c" startline="370">xTickCount</references>
        <references refid="structx_t_i_m_e___o_u_t_1a3464939ca050f7bcc6ffe0d8d3766337" compoundref="task_8h" startline="105">xTIME_OUT::xTimeOnEntering</references>
        <referencedby refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" compoundref="queue_8c" startline="740" endline="947">xQueueGenericSend</referencedby>
        <referencedby refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" compoundref="queue_8c" startline="1636" endline="1782">xQueuePeek</referencedby>
        <referencedby refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" compoundref="queue_8c" startline="1277" endline="1415">xQueueReceive</referencedby>
        <referencedby refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" compoundref="queue_8c" startline="1418" endline="1633">xQueueSemaphoreTake</referencedby>
        <referencedby refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" compoundref="tasks_8c" startline="3273" endline="3333">xTaskCheckForTimeOut</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1acfc8de487c86355713d0e8546506d9e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
        <definition>BaseType_t xTaskCheckForTimeOut</definition>
        <argsstring>(TimeOut_t *const pxTimeOut, TickType_t *const pxTicksToWait)</argsstring>
        <name>xTaskCheckForTimeOut</name>
        <param>
          <type><ref refid="task_8h_1a558b407b5433bee1696535e3c4816bdf" kindref="member">TimeOut_t</ref> *const</type>
          <declname>pxTimeOut</declname>
        </param>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref> *const</type>
          <declname>pxTicksToWait</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3273" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3273" bodyend="3333"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" compoundref="portmacro_8h" startline="64">portMAX_DELAY</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="tasks_8c_1a91fbc7c4b65e32fae51b7d43ebdcb131" compoundref="tasks_8c" startline="3265" endline="3270">vTaskInternalSetTimeOutState</references>
        <references refid="tasks_8c_1aba03b8cb535f03f1921f11868c98b0ef" compoundref="tasks_8c" startline="375">xNumOfOverflows</references>
        <references refid="structx_t_i_m_e___o_u_t_1a9289c6f97096a9b3e3fc705d0bc5a160" compoundref="task_8h" startline="104">xTIME_OUT::xOverflowCount</references>
        <references refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" compoundref="tasks_8c" startline="370">xTickCount</references>
        <references refid="structx_t_i_m_e___o_u_t_1a3464939ca050f7bcc6ffe0d8d3766337" compoundref="task_8h" startline="105">xTIME_OUT::xTimeOnEntering</references>
        <referencedby refid="queue_8h_1a7ce86d1026e0c3055a523935bf53c0b3" compoundref="queue_8c" startline="740" endline="947">xQueueGenericSend</referencedby>
        <referencedby refid="queue_8h_1a3f9e430276fe5244417fd82644ec8a75" compoundref="queue_8c" startline="1636" endline="1782">xQueuePeek</referencedby>
        <referencedby refid="queue_8h_1ae8364d988c6f9b63c771cc2b3dfe5df9" compoundref="queue_8c" startline="1277" endline="1415">xQueueReceive</referencedby>
        <referencedby refid="queue_8h_1a124567e9fc3a37b99f7e184ae98de9f8" compoundref="queue_8c" startline="1418" endline="1633">xQueueSemaphoreTake</referencedby>
        <referencedby refid="stream__buffer_8h_1a35cdf3b6bf677086b9128782f762499d" compoundref="stream__buffer_8c" startline="506" endline="607">xStreamBufferSend</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a33c369f5f08ab96659f94093fdb985af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void vTaskMissedYield</definition>
        <argsstring>(void)</argsstring>
        <name>vTaskMissedYield</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3336" column="6" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3336" bodyend="3339"/>
        <references refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" compoundref="projdefs_8h" startline="45">pdTRUE</references>
        <references refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" compoundref="tasks_8c" startline="374">xYieldPending</references>
        <referencedby refid="queue_8c_1a7297c84a7c770ed57567bad1d3e2faf6" compoundref="queue_8c" startline="2171" endline="2288">prvUnlockQueue</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a36c7cc58985d41c2cb1b263563dbbaa1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>static</type>
        <definition>static portTASK_FUNCTION</definition>
        <argsstring>(prvIdleTask, pvParameters)</argsstring>
        <name>portTASK_FUNCTION</name>
        <param>
          <type>prvIdleTask</type>
        </param>
        <param>
          <type>pvParameters</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>THIS IS THE RTOS IDLE TASK - WHICH IS CREATED AUTOMATICALLY WHEN THE SCHEDULER IS STARTED.</para>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3391" column="8" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3391" bodyend="3505"/>
        <references refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" compoundref="_free_r_t_o_s_config_8h" startline="131">configASSERT</references>
        <references refid="_free_r_t_o_s_8h_1aff3d7f6e5b38283f5214880d8086bb57" compoundref="_free_r_t_o_s_8h" startline="754">configEXPECTED_IDLE_TIME_BEFORE_SLEEP</references>
        <references refid="_free_r_t_o_s_8h_1a506860f45e7b8f14ee85c09db15eed7a" compoundref="_free_r_t_o_s_8h" startline="766">configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING</references>
        <references refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" compoundref="list_8h" startline="255">listCURRENT_LIST_LENGTH</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="_free_r_t_o_s_8h_1a2e0da07097a35cd3cd7788917fab3f53" compoundref="_free_r_t_o_s_8h" startline="786">portALLOCATE_SECURE_CONTEXT</references>
        <references refid="_free_r_t_o_s_8h_1a1dcf4bd9c1ad4fe16a71391dd95cf585" compoundref="_free_r_t_o_s_8h" startline="750">portSUPPRESS_TICKS_AND_SLEEP</references>
        <references refid="tasks_8c_1a903096c962a2bc907f4b902a7d42302a" compoundref="tasks_8c" startline="3638" endline="3664">prvCheckTasksWaitingTermination</references>
        <references refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" compoundref="tasks_8c" startline="342">pxReadyTasksLists</references>
        <references refid="task_8h_1a767e474430db1e60056e9678763f9202" compoundref="task_8h" startline="173">taskYIELD</references>
        <references refid="_free_r_t_o_s_8h_1acc1364ea0a06d6395232d57708e4987c" compoundref="_free_r_t_o_s_8h" startline="342">traceLOW_POWER_IDLE_BEGIN</references>
        <references refid="_free_r_t_o_s_8h_1aa5471ee0f56cb504d9aaba9cb3b7750e" compoundref="_free_r_t_o_s_8h" startline="347">traceLOW_POWER_IDLE_END</references>
        <references refid="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" compoundref="task_8h" startline="163">tskIDLE_PRIORITY</references>
        <references refid="cmsis__os2_8c_1a97fd430f36f8b065226e2bff9bad1de5">vApplicationIdleHook</references>
        <references refid="tasks_8c_1a084d232640bd1d04bcac0b8784417015" compoundref="tasks_8c" startline="2109" endline="2127">vTaskSuspendAll</references>
        <references refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" compoundref="tasks_8c" startline="377">xNextTaskUnblockTime</references>
        <references refid="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</references>
        <references refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" compoundref="tasks_8c" startline="370">xTickCount</references>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvInitialiseTaskLists</definition>
        <argsstring>(void)</argsstring>
        <name>prvInitialiseTaskLists</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3606" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3606" bodyend="3635"/>
        <references refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" compoundref="_free_r_t_o_s_config_8h" startline="69">configMAX_PRIORITIES</references>
        <references refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" compoundref="tasks_8c" startline="345">pxDelayedTaskList</references>
        <references refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" compoundref="tasks_8c" startline="346">pxOverflowDelayedTaskList</references>
        <references refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" compoundref="tasks_8c" startline="342">pxReadyTasksLists</references>
        <references refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" compoundref="list_8c" startline="37" endline="59">vListInitialise</references>
        <references refid="tasks_8c_1aa632b40f050382cce625ffb3c2ea8c7a" compoundref="tasks_8c" startline="343">xDelayedTaskList1</references>
        <references refid="tasks_8c_1a52144ecca109402fbab49fa548175f82" compoundref="tasks_8c" startline="344">xDelayedTaskList2</references>
        <references refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" compoundref="tasks_8c" startline="347">xPendingReadyList</references>
        <referencedby refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" compoundref="tasks_8c" startline="1076" endline="1156">prvAddNewTaskToReadyList</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a903096c962a2bc907f4b902a7d42302a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvCheckTasksWaitingTermination</definition>
        <argsstring>(void)</argsstring>
        <name>prvCheckTasksWaitingTermination</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>THIS FUNCTION IS CALLED FROM THE RTOS IDLE TASK</para>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3638" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3638" bodyend="3664"/>
        <references refid="list_8h_1a715561302af8cb5b74416b23ce4e999d" compoundref="list_8h" startline="307">listGET_OWNER_OF_HEAD_ENTRY</references>
        <references refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" compoundref="task_8h" startline="187">taskENTER_CRITICAL</references>
        <references refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" compoundref="task_8h" startline="202">taskEXIT_CRITICAL</references>
        <references refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" compoundref="tasks_8c" startline="369">uxCurrentNumberOfTasks</references>
        <references refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" compoundref="list_8c" startline="170" endline="196">uxListRemove</references>
        <references refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" compoundref="tasks_8c" startline="259">tskTaskControlBlock::xStateListItem</references>
        <referencedby refid="tasks_8c_1a36c7cc58985d41c2cb1b263563dbbaa1" compoundref="tasks_8c" startline="3391" endline="3505">portTASK_FUNCTION</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvResetNextTaskUnblockTime</definition>
        <argsstring>(void)</argsstring>
        <name>prvResetNextTaskUnblockTime</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="3942" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="3942" bodyend="3963"/>
        <references refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" compoundref="list_8h" startline="208">listGET_LIST_ITEM_VALUE</references>
        <references refid="list_8h_1a715561302af8cb5b74416b23ce4e999d" compoundref="list_8h" startline="307">listGET_OWNER_OF_HEAD_ENTRY</references>
        <references refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" compoundref="list_8h" startline="250">listLIST_IS_EMPTY</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" compoundref="portmacro_8h" startline="64">portMAX_DELAY</references>
        <references refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" compoundref="tasks_8c" startline="345">pxDelayedTaskList</references>
        <references refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" compoundref="tasks_8c" startline="377">xNextTaskUnblockTime</references>
        <referencedby refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" compoundref="tasks_8c" startline="3205" endline="3250">vTaskRemoveFromUnorderedEventList</referencedby>
        <referencedby refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" compoundref="tasks_8c" startline="3137" endline="3202">xTaskRemoveFromEventList</referencedby>
        <referencedby refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" compoundref="tasks_8c" startline="2193" endline="2300">xTaskResumeAll</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1a7ffe39eff8b9037b2de04f15a10ba717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
        <definition>TickType_t uxTaskResetEventItemValue</definition>
        <argsstring>(void)</argsstring>
        <name>uxTaskResetEventItemValue</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="4601" column="12" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="4601" bodyend="4612"/>
        <references refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" compoundref="_free_r_t_o_s_config_8h" startline="69">configMAX_PRIORITIES</references>
        <references refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" compoundref="list_8h" startline="208">listGET_LIST_ITEM_VALUE</references>
        <references refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" compoundref="list_8h" startline="198">listSET_LIST_ITEM_VALUE</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" compoundref="tasks_8c" startline="261">tskTaskControlBlock::uxPriority</references>
        <references refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" compoundref="tasks_8c" startline="260">tskTaskControlBlock::xEventListItem</references>
        <referencedby refid="event__groups_8c_1ac38db316f0928c7ddaacb677a75dbc03" compoundref="event__groups_8c" startline="191" endline="308">xEventGroupSync</referencedby>
        <referencedby refid="event__groups_8c_1a379c5cca4552d3d8acd4c51e8220a6c3" compoundref="event__groups_8c" startline="311" endline="458">xEventGroupWaitBits</referencedby>
      </memberdef>
      <memberdef kind="function" id="tasks_8c_1ab4574e77d9aea876272e563c68f639da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void prvAddCurrentTaskToDelayedList</definition>
        <argsstring>(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)</argsstring>
        <name>prvAddCurrentTaskToDelayedList</name>
        <param>
          <type><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref></type>
          <declname>xTicksToWait</declname>
        </param>
        <param>
          <type>const <ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref></type>
          <declname>xCanBlockIndefinitely</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" line="5176" column="13" bodyfile="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c" bodystart="5176" bodyend="5285"/>
        <references refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" compoundref="list_8h" startline="198">listSET_LIST_ITEM_VALUE</references>
        <references refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" compoundref="_free_r_t_o_s_8h" startline="814">mtCOVERAGE_TEST_MARKER</references>
        <references refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" compoundref="projdefs_8h" startline="44">pdFALSE</references>
        <references refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" compoundref="portmacro_8h" startline="64">portMAX_DELAY</references>
        <references refid="tasks_8c_1a27f854590fc6fcb8b4c7955b5f13b98e" compoundref="tasks_8c" startline="155">portRESET_READY_PRIORITY</references>
        <references refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" compoundref="tasks_8c" startline="336">pxCurrentTCB</references>
        <references refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" compoundref="tasks_8c" startline="345">pxDelayedTaskList</references>
        <references refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" compoundref="tasks_8c" startline="346">pxOverflowDelayedTaskList</references>
        <references refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" compoundref="list_8c" startline="170" endline="196">uxListRemove</references>
        <references refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" compoundref="tasks_8c" startline="261">tskTaskControlBlock::uxPriority</references>
        <references refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" compoundref="tasks_8c" startline="371">uxTopReadyPriority</references>
        <references refid="list_8h_1aa129290da5cbda47dffb7bf877b2f02a" compoundref="list_8c" startline="103" endline="167">vListInsert</references>
        <references refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" compoundref="list_8c" startline="74" endline="100">vListInsertEnd</references>
        <references refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" compoundref="tasks_8c" startline="377">xNextTaskUnblockTime</references>
        <references refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" compoundref="tasks_8c" startline="259">tskTaskControlBlock::xStateListItem</references>
        <references refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" compoundref="tasks_8c" startline="370">xTickCount</references>
        <referencedby refid="task_8h_1a56ae23bc0dece4522d666959902221ca" compoundref="tasks_8c" startline="3063" endline="3077">vTaskPlaceOnEventList</referencedby>
        <referencedby refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" compoundref="tasks_8c" startline="3080" endline="3101">vTaskPlaceOnUnorderedEventList</referencedby>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>FreeRTOS<sp/>Kernel<sp/>V10.3.1</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020<sp/>Amazon.com,<sp/>Inc.<sp/>or<sp/>its<sp/>affiliates.<sp/><sp/>All<sp/>Rights<sp/>Reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Permission<sp/>is<sp/>hereby<sp/>granted,<sp/>free<sp/>of<sp/>charge,<sp/>to<sp/>any<sp/>person<sp/>obtaining<sp/>a<sp/>copy<sp/>of</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>this<sp/>software<sp/>and<sp/>associated<sp/>documentation<sp/>files<sp/>(the<sp/>&quot;Software&quot;),<sp/>to<sp/>deal<sp/>in</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>the<sp/>Software<sp/>without<sp/>restriction,<sp/>including<sp/>without<sp/>limitation<sp/>the<sp/>rights<sp/>to</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>use,<sp/>copy,<sp/>modify,<sp/>merge,<sp/>publish,<sp/>distribute,<sp/>sublicense,<sp/>and/or<sp/>sell<sp/>copies<sp/>of</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Software,<sp/>and<sp/>to<sp/>permit<sp/>persons<sp/>to<sp/>whom<sp/>the<sp/>Software<sp/>is<sp/>furnished<sp/>to<sp/>do<sp/>so,</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>subject<sp/>to<sp/>the<sp/>following<sp/>conditions:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>The<sp/>above<sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>shall<sp/>be<sp/>included<sp/>in<sp/>all</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>copies<sp/>or<sp/>substantial<sp/>portions<sp/>of<sp/>the<sp/>Software.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;,<sp/>WITHOUT<sp/>WARRANTY<sp/>OF<sp/>ANY<sp/>KIND,<sp/>EXPRESS<sp/>OR</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>IMPLIED,<sp/>INCLUDING<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO<sp/>THE<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY,<sp/>FITNESS</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>AND<sp/>NONINFRINGEMENT.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHORS<sp/>OR</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>COPYRIGHT<sp/>HOLDERS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY<sp/>CLAIM,<sp/>DAMAGES<sp/>OR<sp/>OTHER<sp/>LIABILITY,<sp/>WHETHER</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>IN<sp/>AN<sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>TORT<sp/>OR<sp/>OTHERWISE,<sp/>ARISING<sp/>FROM,<sp/>OUT<sp/>OF<sp/>OR<sp/>IN</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>SOFTWARE<sp/>OR<sp/>THE<sp/>USE<sp/>OR<sp/>OTHER<sp/>DEALINGS<sp/>IN<sp/>THE<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>http://www.FreeRTOS.org</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>http://aws.amazon.com/freertos</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>1<sp/>tab<sp/>==<sp/>4<sp/>spaces!</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Standard<sp/>includes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Defining<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/>prevents<sp/>task.h<sp/>from<sp/>redefining</highlight></codeline>
<codeline lineno="33"><highlight class="comment">all<sp/>the<sp/>API<sp/>functions<sp/>to<sp/>use<sp/>the<sp/>MPU<sp/>wrappers.<sp/><sp/>That<sp/>should<sp/>only<sp/>be<sp/>done<sp/>when</highlight></codeline>
<codeline lineno="34"><highlight class="comment">task.h<sp/>is<sp/>included<sp/>from<sp/>an<sp/>application<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="tasks_8c_1ab622d8c674f2a417a666a7ed89109e79" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>FreeRTOS<sp/>includes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_free_r_t_o_s_8h" kindref="compound">FreeRTOS.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="task_8h" kindref="compound">task.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="timers_8h" kindref="compound">timers.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="stack__macros_8h" kindref="compound">stack_macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Lint<sp/>e9021,<sp/>e961<sp/>and<sp/>e750<sp/>are<sp/>suppressed<sp/>as<sp/>a<sp/>MISRA<sp/>exception<sp/>justified</highlight></codeline>
<codeline lineno="44"><highlight class="comment">because<sp/>the<sp/>MPU<sp/>ports<sp/>require<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/>to<sp/>be<sp/>defined</highlight></codeline>
<codeline lineno="45"><highlight class="comment">for<sp/>the<sp/>header<sp/>files<sp/>above,<sp/>but<sp/>not<sp/>in<sp/>this<sp/>file,<sp/>in<sp/>order<sp/>to<sp/>generate<sp/>the</highlight></codeline>
<codeline lineno="46"><highlight class="comment">correct<sp/>privileged<sp/>Vs<sp/>unprivileged<sp/>linkage<sp/>and<sp/>placement.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>MPU_WRAPPERS_INCLUDED_FROM_API_FILE<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>!e750<sp/>!e9021.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Set<sp/>configUSE_STATS_FORMATTING_FUNCTIONS<sp/>to<sp/>2<sp/>to<sp/>include<sp/>the<sp/>stats<sp/>formatting</highlight></codeline>
<codeline lineno="50"><highlight class="comment">functions<sp/>but<sp/>without<sp/>including<sp/>stdio.h<sp/>here.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_STATS_FORMATTING_FUNCTIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>At<sp/>the<sp/>bottom<sp/>of<sp/>this<sp/>file<sp/>are<sp/>two<sp/>optional<sp/>functions<sp/>that<sp/>can<sp/>be<sp/>used</highlight></codeline>
<codeline lineno="53"><highlight class="comment"><sp/><sp/>to<sp/>generate<sp/>human<sp/>readable<sp/>text<sp/>from<sp/>the<sp/>raw<sp/>data<sp/>generated<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="54"><highlight class="comment"><sp/><sp/>uxTaskGetSystemState()<sp/>function.<sp/><sp/>Note<sp/>the<sp/>formatting<sp/>functions<sp/>are<sp/>provided</highlight></codeline>
<codeline lineno="55"><highlight class="comment"><sp/><sp/>for<sp/>convenience<sp/>only,<sp/>and<sp/>are<sp/>NOT<sp/>considered<sp/>part<sp/>of<sp/>the<sp/>kernel.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_STATS_FORMATTING_FUNCTIONS<sp/>==<sp/>1<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_PREEMPTION<sp/>==<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>cooperative<sp/>scheduler<sp/>is<sp/>being<sp/>used<sp/>then<sp/>a<sp/>yield<sp/>should<sp/>not<sp/>be</highlight></codeline>
<codeline lineno="61"><highlight class="comment"><sp/><sp/>performed<sp/>just<sp/>because<sp/>a<sp/>higher<sp/>priority<sp/>task<sp/>has<sp/>been<sp/>woken.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="tasks_8c_1acd0c920e40647de517ac633965b52273" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>taskYIELD_IF_USING_PREEMPTION()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>taskYIELD_IF_USING_PREEMPTION()<sp/>portYIELD_WITHIN_API()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Values<sp/>that<sp/>can<sp/>be<sp/>assigned<sp/>to<sp/>the<sp/>ucNotifyState<sp/>member<sp/>of<sp/>the<sp/>TCB.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="tasks_8c_1a4f2f023143b2cd2367a441e104f8cf2c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>taskNOT_WAITING_NOTIFICATION<sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69" refid="tasks_8c_1acee66205293e253c13626e74798a0cf0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>taskWAITING_NOTIFICATION<sp/><sp/><sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>taskNOTIFICATION_RECEIVED<sp/><sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>2<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="73"><highlight class="comment"><sp/>*<sp/>The<sp/>value<sp/>used<sp/>to<sp/>fill<sp/>the<sp/>stack<sp/>of<sp/>a<sp/>task<sp/>when<sp/>the<sp/>task<sp/>is<sp/>created.<sp/><sp/>This</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>is<sp/>used<sp/>purely<sp/>for<sp/>checking<sp/>the<sp/>high<sp/>water<sp/>mark<sp/>for<sp/>tasks.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="tasks_8c_1ad3b1c99066f14855be098ccca1685fac" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskSTACK_FILL_BYTE<sp/><sp/>(<sp/>0xa5U<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Bits<sp/>used<sp/>to<sp/>recored<sp/>how<sp/>a<sp/>task&apos;s<sp/>stack<sp/>and<sp/>TCB<sp/>were<sp/>allocated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="tasks_8c_1af06a1633d2fb92f67712e62f3d1c3777" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB<sp/><sp/><sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="tasks_8c_1ad65be2320d426aca4e0e72d29ccd04de" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskSTATICALLY_ALLOCATED_STACK_ONLY<sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="tasks_8c_1a9851e50775136d536fed623e1ac598aa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskSTATICALLY_ALLOCATED_STACK_AND_TCB<sp/><sp/><sp/>(<sp/>(<sp/>uint8_t<sp/>)<sp/>2<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>If<sp/>any<sp/>of<sp/>the<sp/>following<sp/>are<sp/>set<sp/>then<sp/>task<sp/>stacks<sp/>are<sp/>filled<sp/>with<sp/>a<sp/>known</highlight></codeline>
<codeline lineno="84"><highlight class="comment">value<sp/>so<sp/>the<sp/>high<sp/>water<sp/>mark<sp/>can<sp/>be<sp/>determined.<sp/><sp/>If<sp/>none<sp/>of<sp/>the<sp/>following<sp/>are</highlight></codeline>
<codeline lineno="85"><highlight class="comment">set<sp/>then<sp/>don&apos;t<sp/>fill<sp/>the<sp/>stack<sp/>so<sp/>there<sp/>is<sp/>no<sp/>unnecessary<sp/>dependency<sp/>on<sp/>memset.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>(<sp/>configCHECK_FOR_STACK_OVERFLOW<sp/>&gt;<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>INCLUDE_uxTaskGetStackHighWaterMark<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>INCLUDE_uxTaskGetStackHighWaterMark2<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>tskSET_NEW_STACKS_TO_KNOWN_VALUE<sp/><sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="tasks_8c_1a95d95c8702f95db8a8a446e1d083245a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>tskSET_NEW_STACKS_TO_KNOWN_VALUE<sp/><sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>Macros<sp/>used<sp/>by<sp/>vListTask<sp/>to<sp/>indicate<sp/>which<sp/>state<sp/>a<sp/>task<sp/>is<sp/>in.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="tasks_8c_1a13f2f32dab5dee7a9b2c848c88ef9bcc" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskRUNNING_CHAR<sp/><sp/><sp/>(<sp/>&apos;X&apos;<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="tasks_8c_1a4cd87df39bdffff557d06f4ff15a30b0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskBLOCKED_CHAR<sp/><sp/><sp/>(<sp/>&apos;B&apos;<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="tasks_8c_1a2fd6c7a58ad28dd1f2c1e322b1ab3fcb" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskREADY_CHAR<sp/><sp/><sp/>(<sp/>&apos;R&apos;<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="tasks_8c_1a9aba572191d065741f5a3e94c416d455" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskDELETED_CHAR<sp/><sp/><sp/>(<sp/>&apos;D&apos;<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="tasks_8c_1a3613b4b66406c8f6cc73e5c3e9f208db" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>tskSUSPENDED_CHAR<sp/>(<sp/>&apos;S&apos;<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="102"><highlight class="comment"><sp/>*<sp/>Some<sp/>kernel<sp/>aware<sp/>debuggers<sp/>require<sp/>the<sp/>data<sp/>the<sp/>debugger<sp/>needs<sp/>access<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="103"><highlight class="comment"><sp/>*<sp/>global,<sp/>rather<sp/>than<sp/>file<sp/>scope.</highlight></codeline>
<codeline lineno="104"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>portREMOVE_STATIC_QUALIFIER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>static</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>name<sp/>allocated<sp/>to<sp/>the<sp/>Idle<sp/>task.<sp/><sp/>This<sp/>can<sp/>be<sp/>overridden<sp/>by<sp/>defining</highlight></codeline>
<codeline lineno="110"><highlight class="comment">configIDLE_TASK_NAME<sp/>in<sp/>FreeRTOSConfig.h.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>configIDLE_TASK_NAME</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="tasks_8c_1aa637612832bcdd420acc9e6cc4361071" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>configIDLE_TASK_NAME<sp/>&quot;IDLE&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_PORT_OPTIMISED_TASK_SELECTION<sp/>==<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>configUSE_PORT_OPTIMISED_TASK_SELECTION<sp/>is<sp/>0<sp/>then<sp/>task<sp/>selection<sp/>is</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/><sp/>performed<sp/>in<sp/>a<sp/>generic<sp/>way<sp/>that<sp/>is<sp/>not<sp/>optimised<sp/>to<sp/>any<sp/>particular</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/><sp/>microcontroller<sp/>architecture.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>uxTopReadyPriority<sp/>holds<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>highest<sp/>priority<sp/>ready</highlight></codeline>
<codeline lineno="122"><highlight class="comment"><sp/><sp/>state<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="tasks_8c_1a80c883536b1faef436fcd47b16a10f98" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>taskRECORD_READY_PRIORITY(<sp/>uxPriority<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="124"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="125"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(<sp/>(<sp/>uxPriority<sp/>)<sp/>&gt;<sp/>uxTopReadyPriority<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>uxTopReadyPriority<sp/>=<sp/>(<sp/>uxPriority<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="128"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="129"><highlight class="preprocessor"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>taskRECORD_READY_PRIORITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="tasks_8c_1adace394d56a7fe7a8f8ee83edba3537c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>taskSELECT_HIGHEST_PRIORITY_TASK()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/>UBaseType_t<sp/>uxTopPriority<sp/>=<sp/>uxTopReadyPriority;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="136"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>highest<sp/>priority<sp/>queue<sp/>that<sp/>contains<sp/>ready<sp/>tasks.<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>while(<sp/>listLIST_IS_EMPTY(<sp/>&amp;(<sp/>pxReadyTasksLists[<sp/>uxTopPriority<sp/>]<sp/>)<sp/>)<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="140"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>configASSERT(<sp/>uxTopPriority<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="141"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>--uxTopPriority;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>listGET_OWNER_OF_NEXT_ENTRY<sp/>indexes<sp/>through<sp/>the<sp/>list,<sp/>so<sp/>the<sp/>tasks<sp/>of<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="145"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>same<sp/>priority<sp/>get<sp/>an<sp/>equal<sp/>share<sp/>of<sp/>the<sp/>processor<sp/>time.<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="146"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>listGET_OWNER_OF_NEXT_ENTRY(<sp/>pxCurrentTCB,<sp/>&amp;(<sp/>pxReadyTasksLists[<sp/>uxTopPriority<sp/>]<sp/>)<sp/>);<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="147"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>uxTopReadyPriority<sp/>=<sp/>uxTopPriority;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="148"><highlight class="preprocessor"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>taskSELECT_HIGHEST_PRIORITY_TASK<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>away<sp/>taskRESET_READY_PRIORITY()<sp/>and<sp/>portRESET_READY_PRIORITY()<sp/>as</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/>they<sp/>are<sp/>only<sp/>required<sp/>when<sp/>a<sp/>port<sp/>optimised<sp/>method<sp/>of<sp/>task<sp/>selection<sp/>is</highlight></codeline>
<codeline lineno="154" refid="tasks_8c_1a9517fc40d713aff9dd8182223948f9c8" refkind="member"><highlight class="comment"><sp/><sp/>being<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="tasks_8c_1a27f854590fc6fcb8b4c7955b5f13b98e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>taskRESET_READY_PRIORITY(<sp/>uxPriority<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>portRESET_READY_PRIORITY(<sp/>uxPriority,<sp/>uxTopReadyPriority<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor">#else<sp/></highlight><highlight class="comment">/*<sp/>configUSE_PORT_OPTIMISED_TASK_SELECTION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>configUSE_PORT_OPTIMISED_TASK_SELECTION<sp/>is<sp/>1<sp/>then<sp/>task<sp/>selection<sp/>is</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/>performed<sp/>in<sp/>a<sp/>way<sp/>that<sp/>is<sp/>tailored<sp/>to<sp/>the<sp/>particular<sp/>microcontroller</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/>architecture<sp/>being<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>port<sp/>optimised<sp/>version<sp/>is<sp/>provided.<sp/><sp/>Call<sp/>the<sp/>port<sp/>defined<sp/>macros.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>taskRECORD_READY_PRIORITY(<sp/>uxPriority<sp/>)<sp/>portRECORD_READY_PRIORITY(<sp/>uxPriority,<sp/>uxTopReadyPriority<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>taskSELECT_HIGHEST_PRIORITY_TASK()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="171"><highlight class="preprocessor"><sp/><sp/>UBaseType_t<sp/>uxTopPriority;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="173"><highlight class="preprocessor"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Find<sp/>the<sp/>highest<sp/>priority<sp/>list<sp/>that<sp/>contains<sp/>ready<sp/>tasks.<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="174"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>portGET_HIGHEST_PRIORITY(<sp/>uxTopPriority,<sp/>uxTopReadyPriority<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="175"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>configASSERT(<sp/>listCURRENT_LIST_LENGTH(<sp/>&amp;(<sp/>pxReadyTasksLists[<sp/>uxTopPriority<sp/>]<sp/>)<sp/>)<sp/>&gt;<sp/>0<sp/>);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>listGET_OWNER_OF_NEXT_ENTRY(<sp/>pxCurrentTCB,<sp/>&amp;(<sp/>pxReadyTasksLists[<sp/>uxTopPriority<sp/>]<sp/>)<sp/>);<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*<sp/>taskSELECT_HIGHEST_PRIORITY_TASK()<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>port<sp/>optimised<sp/>version<sp/>is<sp/>provided,<sp/>call<sp/>it<sp/>only<sp/>if<sp/>the<sp/>TCB<sp/>being<sp/>reset</highlight></codeline>
<codeline lineno="182"><highlight class="comment"><sp/><sp/>is<sp/>being<sp/>referenced<sp/>from<sp/>a<sp/>ready<sp/>list.<sp/><sp/>If<sp/>it<sp/>is<sp/>referenced<sp/>from<sp/>a<sp/>delayed</highlight></codeline>
<codeline lineno="183"><highlight class="comment"><sp/><sp/>or<sp/>suspended<sp/>list<sp/>then<sp/>it<sp/>won&apos;t<sp/>be<sp/>in<sp/>a<sp/>ready<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>taskRESET_READY_PRIORITY(<sp/>uxPriority<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>if(<sp/>listCURRENT_LIST_LENGTH(<sp/>&amp;(<sp/>pxReadyTasksLists[<sp/>(<sp/>uxPriority<sp/>)<sp/>]<sp/>)<sp/>)<sp/>==<sp/>(<sp/>UBaseType_t<sp/>)<sp/>0<sp/>)<sp/><sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="188"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>portRESET_READY_PRIORITY(<sp/>(<sp/>uxPriority<sp/>),<sp/>(<sp/>uxTopReadyPriority<sp/>)<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="189"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="190"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_PORT_OPTIMISED_TASK_SELECTION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>pxDelayedTaskList<sp/>and<sp/>pxOverflowDelayedTaskList<sp/>are<sp/>switched<sp/>when<sp/>the<sp/>tick</highlight></codeline>
<codeline lineno="197" refid="tasks_8c_1aa604b7713b82e63154a290e21ecf700c" refkind="member"><highlight class="comment">count<sp/>overflows.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>taskSWITCH_DELAYED_LISTS()<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="199"><highlight class="preprocessor">{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/>List_t<sp/>*pxTemp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>delayed<sp/>tasks<sp/>list<sp/>should<sp/>be<sp/>empty<sp/>when<sp/>the<sp/>lists<sp/>are<sp/>switched.<sp/>*/</highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/>configASSERT(<sp/>(<sp/>listLIST_IS_EMPTY(<sp/>pxDelayedTaskList<sp/>)<sp/>)<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="205"><highlight class="preprocessor"><sp/><sp/>pxTemp<sp/>=<sp/>pxDelayedTaskList;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="206"><highlight class="preprocessor"><sp/><sp/>pxDelayedTaskList<sp/>=<sp/>pxOverflowDelayedTaskList;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="207"><highlight class="preprocessor"><sp/><sp/>pxOverflowDelayedTaskList<sp/>=<sp/>pxTemp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/>xNumOfOverflows++;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/>prvResetNextTaskUnblockTime();<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="210"><highlight class="preprocessor">}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*<sp/>Place<sp/>the<sp/>task<sp/>represented<sp/>by<sp/>pxTCB<sp/>into<sp/>the<sp/>appropriate<sp/>ready<sp/>list<sp/>for</highlight></codeline>
<codeline lineno="216"><highlight class="comment"><sp/>*<sp/>the<sp/>task.<sp/><sp/>It<sp/>is<sp/>inserted<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>list.</highlight></codeline>
<codeline lineno="217" refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" refkind="member"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>prvAddTaskToReadyList(<sp/>pxTCB<sp/>)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="219"><highlight class="preprocessor"><sp/><sp/>traceMOVED_TASK_TO_READY_STATE(<sp/>pxTCB<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/>taskRECORD_READY_PRIORITY(<sp/>(<sp/>pxTCB<sp/>)-&gt;uxPriority<sp/>);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="221"><highlight class="preprocessor"><sp/><sp/>vListInsertEnd(<sp/>&amp;(<sp/>pxReadyTasksLists[<sp/>(<sp/>pxTCB<sp/>)-&gt;uxPriority<sp/>]<sp/>),<sp/>&amp;(<sp/>(<sp/>pxTCB<sp/>)-&gt;xStateListItem<sp/>)<sp/>);<sp/>\</highlight></codeline>
<codeline lineno="222"><highlight class="preprocessor"><sp/><sp/>tracePOST_MOVED_TASK_TO_READY_STATE(<sp/>pxTCB<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="226"><highlight class="comment"><sp/>*<sp/>Several<sp/>functions<sp/>take<sp/>an<sp/>TaskHandle_t<sp/>parameter<sp/>that<sp/>can<sp/>optionally<sp/>be<sp/>NULL,</highlight></codeline>
<codeline lineno="227"><highlight class="comment"><sp/>*<sp/>where<sp/>NULL<sp/>is<sp/>used<sp/>to<sp/>indicate<sp/>that<sp/>the<sp/>handle<sp/>of<sp/>the<sp/>currently<sp/>executing</highlight></codeline>
<codeline lineno="228"><highlight class="comment"><sp/>*<sp/>task<sp/>should<sp/>be<sp/>used<sp/>in<sp/>place<sp/>of<sp/>the<sp/>parameter.<sp/><sp/>This<sp/>macro<sp/>simply<sp/>checks<sp/>to</highlight></codeline>
<codeline lineno="229"><highlight class="comment"><sp/>*<sp/>see<sp/>if<sp/>the<sp/>parameter<sp/>is<sp/>NULL<sp/>and<sp/>returns<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>appropriate<sp/>TCB.</highlight></codeline>
<codeline lineno="230" refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" refkind="member"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>prvGetTCBFromHandle(<sp/>pxHandle<sp/>)<sp/>(<sp/>(<sp/>(<sp/>pxHandle<sp/>)<sp/>==<sp/>NULL<sp/>)<sp/>?<sp/>pxCurrentTCB<sp/>:<sp/>(<sp/>pxHandle<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>item<sp/>value<sp/>of<sp/>the<sp/>event<sp/>list<sp/>item<sp/>is<sp/>normally<sp/>used<sp/>to<sp/>hold<sp/>the<sp/>priority</highlight></codeline>
<codeline lineno="234"><highlight class="comment">of<sp/>the<sp/>task<sp/>to<sp/>which<sp/>it<sp/>belongs<sp/>(coded<sp/>to<sp/>allow<sp/>it<sp/>to<sp/>be<sp/>held<sp/>in<sp/>reverse</highlight></codeline>
<codeline lineno="235"><highlight class="comment">priority<sp/>order).<sp/><sp/>However,<sp/>it<sp/>is<sp/>occasionally<sp/>borrowed<sp/>for<sp/>other<sp/>purposes.<sp/><sp/>It</highlight></codeline>
<codeline lineno="236"><highlight class="comment">is<sp/>important<sp/>its<sp/>value<sp/>is<sp/>not<sp/>updated<sp/>due<sp/>to<sp/>a<sp/>task<sp/>priority<sp/>change<sp/>while<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="237"><highlight class="comment">being<sp/>used<sp/>for<sp/>another<sp/>purpose.<sp/><sp/>The<sp/>following<sp/>bit<sp/>definition<sp/>is<sp/>used<sp/>to<sp/>inform</highlight></codeline>
<codeline lineno="238"><highlight class="comment">the<sp/>scheduler<sp/>that<sp/>the<sp/>value<sp/>should<sp/>not<sp/>be<sp/>changed<sp/>-<sp/>in<sp/>which<sp/>case<sp/>it<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="239"><highlight class="comment">responsibility<sp/>of<sp/>whichever<sp/>module<sp/>is<sp/>using<sp/>the<sp/>value<sp/>to<sp/>ensure<sp/>it<sp/>gets<sp/>set<sp/>back</highlight></codeline>
<codeline lineno="240"><highlight class="comment">to<sp/>its<sp/>original<sp/>value<sp/>when<sp/>it<sp/>is<sp/>released.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_16_BIT_TICKS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>taskEVENT_LIST_ITEM_VALUE_IN_USE<sp/><sp/>0x8000U</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243" refid="tasks_8c_1a3e36f3eda563e810a24ab36ee7c978d4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#define<sp/>taskEVENT_LIST_ITEM_VALUE_IN_USE<sp/><sp/>0x80000000UL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="248"><highlight class="comment"><sp/>*<sp/>Task<sp/>control<sp/>block.<sp/><sp/>A<sp/>task<sp/>control<sp/>block<sp/>(TCB)<sp/>is<sp/>allocated<sp/>for<sp/>each<sp/>task,</highlight></codeline>
<codeline lineno="249"><highlight class="comment"><sp/>*<sp/>and<sp/>stores<sp/>task<sp/>state<sp/>information,<sp/>including<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>task&apos;s<sp/>context</highlight></codeline>
<codeline lineno="250"><highlight class="comment"><sp/>*<sp/>(the<sp/>task&apos;s<sp/>run<sp/>time<sp/>environment,<sp/>including<sp/>register<sp/>values)</highlight></codeline>
<codeline lineno="251" refid="structtsk_task_control_block" refkind="compound"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structtsk_task_control_block" kindref="compound">tskTaskControlBlock</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>old<sp/>naming<sp/>convention<sp/>is<sp/>used<sp/>to<sp/>prevent<sp/>breaking<sp/>kernel<sp/>aware<sp/>debuggers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="structtsk_task_control_block_1a429a186c7f8e34aba1eef5e12d215b90" refkind="member"><highlight class="normal">{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/><sp/>*<ref refid="structtsk_task_control_block_1a429a186c7f8e34aba1eef5e12d215b90" kindref="member">pxTopOfStack</ref>;<sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Points<sp/>to<sp/>the<sp/>location<sp/>of<sp/>the<sp/>last<sp/>item<sp/>placed<sp/>on<sp/>the<sp/>tasks<sp/>stack.<sp/><sp/>THIS<sp/>MUST<sp/>BE<sp/>THE<sp/>FIRST<sp/>MEMBER<sp/>OF<sp/>THE<sp/>TCB<sp/>STRUCT.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>xMPU_SETTINGS<sp/>xMPUSettings;<sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>The<sp/>MPU<sp/>settings<sp/>are<sp/>defined<sp/>as<sp/>part<sp/>of<sp/>the<sp/>port<sp/>layer.<sp/><sp/>THIS<sp/>MUST<sp/>BE<sp/>THE<sp/>SECOND<sp/>MEMBER<sp/>OF<sp/>THE<sp/>TCB<sp/>STRUCT.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref>;<sp/></highlight><highlight class="comment">/*&lt;<sp/>The<sp/>list<sp/>that<sp/>the<sp/>state<sp/>list<sp/>item<sp/>of<sp/>a<sp/>task<sp/>is<sp/>reference<sp/>from<sp/>denotes<sp/>the<sp/>state<sp/>of<sp/>that<sp/>task<sp/>(Ready,<sp/>Blocked,<sp/>Suspended<sp/>).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261" refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Used<sp/>to<sp/>reference<sp/>a<sp/>task<sp/>from<sp/>an<sp/>event<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><sp/><sp/><sp/><sp/><ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>The<sp/>priority<sp/>of<sp/>the<sp/>task.<sp/><sp/>0<sp/>is<sp/>the<sp/>lowest<sp/>priority.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="structtsk_task_control_block_1a67d61291794f38afb5be5132078bc24f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/><sp/><sp/><sp/><sp/>*<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Points<sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtsk_task_control_block_1a67d61291794f38afb5be5132078bc24f" kindref="member">pcTaskName</ref>[<sp/><ref refid="_free_r_t_o_s_config_8h_1ac388dc4041aab6997348828eb27fc1a8" kindref="member">configMAX_TASK_NAME_LEN</ref><sp/>];</highlight><highlight class="comment">/*&lt;<sp/>Descriptive<sp/>name<sp/>given<sp/>to<sp/>the<sp/>task<sp/>when<sp/>created.<sp/><sp/>Facilitates<sp/>debugging<sp/>only.<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>(<sp/>portSTACK_GROWTH<sp/>&gt;<sp/>0<sp/>)<sp/>||<sp/>(<sp/>configRECORD_STACK_HIGH_ADDRESS<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/><sp/><sp/>*pxEndOfStack;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Points<sp/>to<sp/>the<sp/>highest<sp/>valid<sp/>address<sp/>for<sp/>the<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>portCRITICAL_NESTING_IN_TCB<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><sp/><sp/>uxCriticalNesting;<sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Holds<sp/>the<sp/>critical<sp/>section<sp/>nesting<sp/>depth<sp/>for<sp/>ports<sp/>that<sp/>do<sp/>not<sp/>maintain<sp/>their<sp/>own<sp/>count<sp/>in<sp/>the<sp/>port<sp/>layer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><sp/><sp/>uxTCBNumber;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Stores<sp/>a<sp/>number<sp/>that<sp/>increments<sp/>each<sp/>time<sp/>a<sp/>TCB<sp/>is<sp/>created.<sp/><sp/>It<sp/>allows<sp/>debuggers<sp/>to<sp/>determine<sp/>when<sp/>a<sp/>task<sp/>has<sp/>been<sp/>deleted<sp/>and<sp/>then<sp/>recreated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><sp/><sp/><ref refid="tasks_8c_1a43097b97496231e1af2dff1fac62bcc6" kindref="member">uxTaskNumber</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Stores<sp/>a<sp/>number<sp/>specifically<sp/>for<sp/>use<sp/>by<sp/>third<sp/>party<sp/>trace<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><sp/><sp/>uxBasePriority;<sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>The<sp/>priority<sp/>last<sp/>assigned<sp/>to<sp/>the<sp/>task<sp/>-<sp/>used<sp/>by<sp/>the<sp/>priority<sp/>inheritance<sp/>mechanism.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><sp/><sp/>uxMutexesHeld;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_APPLICATION_TASK_TAG<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1af984026250bf8fece2e0068874d4661d" kindref="member">TaskHookFunction_t</ref><sp/>pxTaskTag;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configNUM_THREAD_LOCAL_STORAGE_POINTERS<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pvThreadLocalStoragePointers[<sp/><ref refid="_free_r_t_o_s_8h_1a8d32b5f74e55dfd12c5aa3415e16d75e" kindref="member">configNUM_THREAD_LOCAL_STORAGE_POINTERS</ref><sp/>];</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configGENERATE_RUN_TIME_STATS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/><sp/><sp/><sp/>ulRunTimeCounter;<sp/></highlight><highlight class="comment">/*&lt;<sp/>Stores<sp/>the<sp/>amount<sp/>of<sp/>time<sp/>the<sp/>task<sp/>has<sp/>spent<sp/>in<sp/>the<sp/>Running<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_NEWLIB_REENTRANT<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>a<sp/>Newlib<sp/>reent<sp/>structure<sp/>that<sp/>is<sp/>specific<sp/>to<sp/>this<sp/>task.</highlight></codeline>
<codeline lineno="298"><highlight class="comment"><sp/><sp/><sp/><sp/>Note<sp/>Newlib<sp/>support<sp/>has<sp/>been<sp/>included<sp/>by<sp/>popular<sp/>demand,<sp/>but<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="299"><highlight class="comment"><sp/><sp/><sp/><sp/>used<sp/>by<sp/>the<sp/>FreeRTOS<sp/>maintainers<sp/>themselves.<sp/><sp/>FreeRTOS<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="300"><highlight class="comment"><sp/><sp/><sp/><sp/>responsible<sp/>for<sp/>resulting<sp/>newlib<sp/>operation.<sp/><sp/>User<sp/>must<sp/>be<sp/>familiar<sp/>with</highlight></codeline>
<codeline lineno="301"><highlight class="comment"><sp/><sp/><sp/><sp/>newlib<sp/>and<sp/>must<sp/>provide<sp/>system-wide<sp/>implementations<sp/>of<sp/>the<sp/>necessary</highlight></codeline>
<codeline lineno="302"><highlight class="comment"><sp/><sp/><sp/><sp/>stubs.<sp/>Be<sp/>warned<sp/>that<sp/>(at<sp/>the<sp/>time<sp/>of<sp/>writing)<sp/>the<sp/>current<sp/>newlib<sp/>design</highlight></codeline>
<codeline lineno="303"><highlight class="comment"><sp/><sp/><sp/><sp/>implements<sp/>a<sp/>system-wide<sp/>malloc()<sp/>that<sp/>must<sp/>be<sp/>provided<sp/>with<sp/>locks.</highlight></codeline>
<codeline lineno="304"><highlight class="comment"></highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/><sp/><sp/><sp/>See<sp/>the<sp/>third<sp/>party<sp/>link<sp/>http://www.nadler.com/embedded/newlibAndFreeRTOS.html</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>additional<sp/>information.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/><sp/></highlight><highlight class="normal">_reent<sp/>xNewLib_reent;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulNotifiedValue;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/>uint8_t<sp/>ucNotifyState;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>the<sp/>comments<sp/>in<sp/>FreeRTOS.h<sp/>with<sp/>the<sp/>definition<sp/>of</highlight></codeline>
<codeline lineno="316"><highlight class="comment"><sp/><sp/>tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE<sp/>!=<sp/>0<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e731<sp/>!e9029<sp/>Macro<sp/>has<sp/>been<sp/>consolidated<sp/>for<sp/>readability<sp/>reasons.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ucStaticallyAllocated;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Set<sp/>to<sp/>pdTRUE<sp/>if<sp/>the<sp/>task<sp/>is<sp/>a<sp/>statically<sp/>allocated<sp/>to<sp/>ensure<sp/>no<sp/>attempt<sp/>is<sp/>made<sp/>to<sp/>free<sp/>the<sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>INCLUDE_xTaskAbortDelay<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>ucDelayAborted;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configUSE_POSIX_ERRNO<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iTaskErrno;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="tasks_8c_1a67b1ddede4e49c946dd720d83c5838a5" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal">}<sp/><ref refid="tasks_8c_1a67b1ddede4e49c946dd720d83c5838a5" kindref="member">tskTCB</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>The<sp/>old<sp/>tskTCB<sp/>name<sp/>is<sp/>maintained<sp/>above<sp/>then<sp/>typedefed<sp/>to<sp/>the<sp/>new<sp/>TCB_t<sp/>name</highlight></codeline>
<codeline lineno="332" refid="tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453" refkind="member"><highlight class="comment">below<sp/>to<sp/>enable<sp/>the<sp/>use<sp/>of<sp/>older<sp/>kernel<sp/>aware<sp/>debuggers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">tskTCB</ref><sp/><ref refid="tasks_8c_1aa3c2dda92a6dc22860bbdb36e42a0453" kindref="member">TCB_t</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight><highlight class="comment">/*lint<sp/>-save<sp/>-e956<sp/>A<sp/>manual<sp/>analysis<sp/>and<sp/>inspection<sp/>has<sp/>been<sp/>used<sp/>to<sp/>determine</highlight></codeline>
<codeline lineno="336" refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" refkind="member"><highlight class="comment">which<sp/>static<sp/>variables<sp/>must<sp/>be<sp/>declared<sp/>volatile.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Lists<sp/>for<sp/>ready<sp/>and<sp/>blocked<sp/>tasks.<sp/>--------------------</highlight></codeline>
<codeline lineno="340"><highlight class="comment">xDelayedTaskList1<sp/>and<sp/>xDelayedTaskList2<sp/>could<sp/>be<sp/>move<sp/>to<sp/>function<sp/>scople<sp/>but</highlight></codeline>
<codeline lineno="341"><highlight class="comment">doing<sp/>so<sp/>breaks<sp/>some<sp/>kernel<sp/>aware<sp/>debuggers<sp/>and<sp/>debuggers<sp/>that<sp/>rely<sp/>on<sp/>removing</highlight></codeline>
<codeline lineno="342" refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" refkind="member"><highlight class="comment">the<sp/>static<sp/>qualifier.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="tasks_8c_1aa632b40f050382cce625ffb3c2ea8c7a" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/><ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>];</highlight><highlight class="comment">/*&lt;<sp/>Prioritised<sp/>ready<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344" refid="tasks_8c_1a52144ecca109402fbab49fa548175f82" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/><ref refid="tasks_8c_1aa632b40f050382cce625ffb3c2ea8c7a" kindref="member">xDelayedTaskList1</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Delayed<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/><ref refid="tasks_8c_1a52144ecca109402fbab49fa548175f82" kindref="member">xDelayedTaskList2</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Delayed<sp/>tasks<sp/>(two<sp/>lists<sp/>are<sp/>used<sp/>-<sp/>one<sp/>for<sp/>delays<sp/>that<sp/>have<sp/>overflowed<sp/>the<sp/>current<sp/>tick<sp/>count.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Points<sp/>to<sp/>the<sp/>delayed<sp/>task<sp/>list<sp/>currently<sp/>being<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" kindref="member">pxOverflowDelayedTaskList</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Points<sp/>to<sp/>the<sp/>delayed<sp/>task<sp/>list<sp/>currently<sp/>being<sp/>used<sp/>to<sp/>hold<sp/>tasks<sp/>that<sp/>have<sp/>overflowed<sp/>the<sp/>current<sp/>tick<sp/>count.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/><ref refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" kindref="member">xPendingReadyList</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Tasks<sp/>that<sp/>have<sp/>been<sp/>readied<sp/>while<sp/>the<sp/>scheduler<sp/>was<sp/>suspended.<sp/><sp/>They<sp/>will<sp/>be<sp/>moved<sp/>to<sp/>the<sp/>ready<sp/>list<sp/>when<sp/>the<sp/>scheduler<sp/>is<sp/>resumed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>INCLUDE_vTaskDelete<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>xTasksWaitingTermination;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Tasks<sp/>that<sp/>have<sp/>been<sp/>deleted<sp/>-<sp/>but<sp/>their<sp/>memory<sp/>not<sp/>yet<sp/>freed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxDeletedTasksWaitingCleanUp<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>xSuspendedTaskList;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Tasks<sp/>that<sp/>are<sp/>currently<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Global<sp/>POSIX<sp/>errno.<sp/>Its<sp/>value<sp/>is<sp/>changed<sp/>upon<sp/>context<sp/>switching<sp/>to<sp/>match</highlight></codeline>
<codeline lineno="364"><highlight class="comment">the<sp/>errno<sp/>of<sp/>the<sp/>currently<sp/>running<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_POSIX_ERRNO<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FreeRTOS_errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="369" refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" refkind="member"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Other<sp/>file<sp/>private<sp/>variables.<sp/>--------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref><sp/><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U;</highlight></codeline>
<codeline lineno="371" refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_8h_1ae52c1acd13b26e8758dc66b60b0e3417" kindref="member">configINITIAL_TICK_COUNT</ref>;</highlight></codeline>
<codeline lineno="372" refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" kindref="member">uxTopReadyPriority</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" kindref="member">tskIDLE_PRIORITY</ref>;</highlight></codeline>
<codeline lineno="373" refid="tasks_8c_1aa7a2317195d855e6961dd8bcaab9496a" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" kindref="member">xSchedulerRunning</ref><sp/><sp/><sp/><sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="374" refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/><ref refid="tasks_8c_1aa7a2317195d855e6961dd8bcaab9496a" kindref="member">xPendedTicks</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0U;</highlight></codeline>
<codeline lineno="375" refid="tasks_8c_1aba03b8cb535f03f1921f11868c98b0ef" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="376" refid="tasks_8c_1a43097b97496231e1af2dff1fac62bcc6" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="tasks_8c_1aba03b8cb535f03f1921f11868c98b0ef" kindref="member">xNumOfOverflows</ref><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>)<sp/>0;</highlight></codeline>
<codeline lineno="377" refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="tasks_8c_1a43097b97496231e1af2dff1fac62bcc6" kindref="member">uxTaskNumber</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U;</highlight></codeline>
<codeline lineno="378" refid="tasks_8c_1ac90c8a23419d8fa71919e020c433f1a6" refkind="member"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/><sp/><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0U;<sp/></highlight><highlight class="comment">/*<sp/>Initialised<sp/>to<sp/>portMAX_DELAY<sp/>before<sp/>the<sp/>scheduler<sp/>starts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/><ref refid="tasks_8c_1ac90c8a23419d8fa71919e020c433f1a6" kindref="member">xIdleTaskHandle</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>NULL;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Holds<sp/>the<sp/>handle<sp/>of<sp/>the<sp/>idle<sp/>task.<sp/><sp/>The<sp/>idle<sp/>task<sp/>is<sp/>created<sp/>automatically<sp/>when<sp/>the<sp/>scheduler<sp/>is<sp/>started.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Context<sp/>switches<sp/>are<sp/>held<sp/>pending<sp/>while<sp/>the<sp/>scheduler<sp/>is<sp/>suspended.<sp/><sp/>Also,</highlight></codeline>
<codeline lineno="382"><highlight class="comment">interrupts<sp/>must<sp/>not<sp/>manipulate<sp/>the<sp/>xStateListItem<sp/>of<sp/>a<sp/>TCB,<sp/>or<sp/>any<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="383"><highlight class="comment">lists<sp/>the<sp/>xStateListItem<sp/>can<sp/>be<sp/>referenced<sp/>from,<sp/>if<sp/>the<sp/>scheduler<sp/>is<sp/>suspended.</highlight></codeline>
<codeline lineno="384"><highlight class="comment">If<sp/>an<sp/>interrupt<sp/>needs<sp/>to<sp/>unblock<sp/>a<sp/>task<sp/>while<sp/>the<sp/>scheduler<sp/>is<sp/>suspended<sp/>then<sp/>it</highlight></codeline>
<codeline lineno="385"><highlight class="comment">moves<sp/>the<sp/>task&apos;s<sp/>event<sp/>list<sp/>item<sp/>into<sp/>the<sp/>xPendingReadyList,<sp/>ready<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="386"><highlight class="comment">kernel<sp/>to<sp/>move<sp/>the<sp/>task<sp/>from<sp/>the<sp/>pending<sp/>ready<sp/>list<sp/>into<sp/>the<sp/>real<sp/>ready<sp/>list</highlight></codeline>
<codeline lineno="387"><highlight class="comment">when<sp/>the<sp/>scheduler<sp/>is<sp/>unsuspended.<sp/><sp/>The<sp/>pending<sp/>ready<sp/>list<sp/>itself<sp/>can<sp/>only<sp/>be</highlight></codeline>
<codeline lineno="388" refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" refkind="member"><highlight class="comment">accessed<sp/>from<sp/>a<sp/>critical<sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configGENERATE_RUN_TIME_STATS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Do<sp/>not<sp/>move<sp/>these<sp/>variables<sp/>to<sp/>function<sp/>scope<sp/>as<sp/>doing<sp/>so<sp/>prevents<sp/>the</highlight></codeline>
<codeline lineno="394"><highlight class="comment"><sp/><sp/>code<sp/>working<sp/>with<sp/>debuggers<sp/>that<sp/>need<sp/>to<sp/>remove<sp/>the<sp/>static<sp/>qualifier.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulTaskSwitchedInTime<sp/>=<sp/>0UL;<sp/></highlight><highlight class="comment">/*&lt;<sp/>Holds<sp/>the<sp/>value<sp/>of<sp/>a<sp/>timer/counter<sp/>the<sp/>last<sp/>time<sp/>a<sp/>task<sp/>was<sp/>switched<sp/>in.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><ref refid="mpu__wrappers_8h_1a56a0b54ca924c56d192d4389ba585ed5" kindref="member">PRIVILEGED_DATA</ref><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulTotalRunTime<sp/>=<sp/>0UL;<sp/><sp/><sp/></highlight><highlight class="comment">/*&lt;<sp/>Holds<sp/>the<sp/>total<sp/>amount<sp/>of<sp/>execution<sp/>time<sp/>as<sp/>defined<sp/>by<sp/>the<sp/>run<sp/>time<sp/>counter<sp/>clock.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">/*lint<sp/>-restore<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Callback<sp/>function<sp/>prototypes.<sp/>--------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/><sp/>configCHECK_FOR_STACK_OVERFLOW<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cmsis__os2_8c_1ab87104b26fc04ce57c4717306fc97735" kindref="member">vApplicationStackOverflowHook</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcTaskName<sp/>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TICK_HOOK<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cmsis__os2_8c_1a9ca051aa77e17583aa5a85d5de5c199a" kindref="member">vApplicationTickHook</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e526<sp/>Symbol<sp/>not<sp/>defined<sp/>as<sp/>it<sp/>is<sp/>an<sp/>application<sp/>callback.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vApplicationGetIdleTaskMemory(<sp/><ref refid="structx_s_t_a_t_i_c___t_c_b" kindref="compound">StaticTask_t</ref><sp/>**ppxIdleTaskTCBBuffer,<sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>**ppxIdleTaskStackBuffer,<sp/>uint32_t<sp/>*pulIdleTaskStackSize<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e526<sp/>Symbol<sp/>not<sp/>defined<sp/>as<sp/>it<sp/>is<sp/>an<sp/>application<sp/>callback.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>File<sp/>private<sp/>functions.<sp/>--------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>prvTaskIsTaskSuspended(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskSuspend<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="437"><highlight class="comment"><sp/>*<sp/>Utility<sp/>to<sp/>ready<sp/>all<sp/>the<sp/>lists<sp/>used<sp/>by<sp/>the<sp/>scheduler.<sp/><sp/>This<sp/>is<sp/>called</highlight></codeline>
<codeline lineno="438"><highlight class="comment"><sp/>*<sp/>automatically<sp/>upon<sp/>the<sp/>creation<sp/>of<sp/>the<sp/>first<sp/>task.</highlight></codeline>
<codeline lineno="439" refid="tasks_8c_1a1ceb56c5c7ff2581a5ea837db4f721c1" refkind="member"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" kindref="member">prvInitialiseTaskLists</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="443"><highlight class="comment"><sp/>*<sp/>The<sp/>idle<sp/>task,<sp/>which<sp/>as<sp/>all<sp/>tasks<sp/>is<sp/>implemented<sp/>as<sp/>a<sp/>never<sp/>ending<sp/>loop.</highlight></codeline>
<codeline lineno="444"><highlight class="comment"><sp/>*<sp/>The<sp/>idle<sp/>task<sp/>is<sp/>automatically<sp/>created<sp/>and<sp/>added<sp/>to<sp/>the<sp/>ready<sp/>lists<sp/>upon</highlight></codeline>
<codeline lineno="445"><highlight class="comment"><sp/>*<sp/>creation<sp/>of<sp/>the<sp/>first<sp/>user<sp/>task.</highlight></codeline>
<codeline lineno="446"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="447"><highlight class="comment"><sp/>*<sp/>The<sp/>portTASK_FUNCTION_PROTO()<sp/>macro<sp/>is<sp/>used<sp/>to<sp/>allow<sp/>port/compiler<sp/>specific</highlight></codeline>
<codeline lineno="448"><highlight class="comment"><sp/>*<sp/>language<sp/>extensions.<sp/><sp/>The<sp/>equivalent<sp/>prototype<sp/>for<sp/>this<sp/>function<sp/>is:</highlight></codeline>
<codeline lineno="449"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="450"><highlight class="comment"><sp/>*<sp/>void<sp/>prvIdleTask(<sp/>void<sp/>*pvParameters<sp/>);</highlight></codeline>
<codeline lineno="451"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="452"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a2921e1c5a1f974dfa01ae44d1f665f14" kindref="member">portTASK_FUNCTION_PROTO</ref>(<sp/>prvIdleTask,<sp/>pvParameters<sp/>);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="456"><highlight class="comment"><sp/>*<sp/>Utility<sp/>to<sp/>free<sp/>all<sp/>memory<sp/>allocated<sp/>by<sp/>the<sp/>scheduler<sp/>to<sp/>hold<sp/>a<sp/>TCB,</highlight></codeline>
<codeline lineno="457"><highlight class="comment"><sp/>*<sp/>including<sp/>the<sp/>stack<sp/>pointed<sp/>to<sp/>by<sp/>the<sp/>TCB.</highlight></codeline>
<codeline lineno="458"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="459"><highlight class="comment"><sp/>*<sp/>This<sp/>does<sp/>not<sp/>free<sp/>memory<sp/>allocated<sp/>by<sp/>the<sp/>task<sp/>itself<sp/>(i.e.<sp/>memory</highlight></codeline>
<codeline lineno="460"><highlight class="comment"><sp/>*<sp/>allocated<sp/>by<sp/>calls<sp/>to<sp/>pvPortMalloc<sp/>from<sp/>within<sp/>the<sp/>tasks<sp/>application<sp/>code).</highlight></codeline>
<codeline lineno="461"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_vTaskDelete<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prvDeleteTCB(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="469"><highlight class="comment"><sp/>*<sp/>Used<sp/>only<sp/>by<sp/>the<sp/>idle<sp/>task.<sp/><sp/>This<sp/>checks<sp/>to<sp/>see<sp/>if<sp/>anything<sp/>has<sp/>been<sp/>placed</highlight></codeline>
<codeline lineno="470"><highlight class="comment"><sp/>*<sp/>in<sp/>the<sp/>list<sp/>of<sp/>tasks<sp/>waiting<sp/>to<sp/>be<sp/>deleted.<sp/><sp/>If<sp/>so<sp/>the<sp/>task<sp/>is<sp/>cleaned<sp/>up</highlight></codeline>
<codeline lineno="471"><highlight class="comment"><sp/>*<sp/>and<sp/>its<sp/>TCB<sp/>deleted.</highlight></codeline>
<codeline lineno="472"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a903096c962a2bc907f4b902a7d42302a" kindref="member">prvCheckTasksWaitingTermination</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="476"><highlight class="comment"><sp/>*<sp/>The<sp/>currently<sp/>executing<sp/>task<sp/>is<sp/>entering<sp/>the<sp/>Blocked<sp/>state.<sp/><sp/>Add<sp/>the<sp/>task<sp/>to</highlight></codeline>
<codeline lineno="477"><highlight class="comment"><sp/>*<sp/>either<sp/>the<sp/>current<sp/>or<sp/>the<sp/>overflow<sp/>delayed<sp/>task<sp/>list.</highlight></codeline>
<codeline lineno="478"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" kindref="member">prvAddCurrentTaskToDelayedList</ref>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xCanBlockIndefinitely<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="482"><highlight class="comment"><sp/>*<sp/>Fills<sp/>an<sp/>TaskStatus_t<sp/>structure<sp/>with<sp/>information<sp/>on<sp/>each<sp/>task<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="483"><highlight class="comment"><sp/>*<sp/>referenced<sp/>from<sp/>the<sp/>pxList<sp/>list<sp/>(which<sp/>may<sp/>be<sp/>a<sp/>ready<sp/>list,<sp/>a<sp/>delayed<sp/>list,</highlight></codeline>
<codeline lineno="484"><highlight class="comment"><sp/>*<sp/>a<sp/>suspended<sp/>list,<sp/>etc.).</highlight></codeline>
<codeline lineno="485"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="486"><highlight class="comment"><sp/>*<sp/>THIS<sp/>FUNCTION<sp/>IS<sp/>INTENDED<sp/>FOR<sp/>DEBUGGING<sp/>ONLY,<sp/>AND<sp/>SHOULD<sp/>NOT<sp/>BE<sp/>CALLED<sp/>FROM</highlight></codeline>
<codeline lineno="487"><highlight class="comment"><sp/>*<sp/>NORMAL<sp/>APPLICATION<sp/>CODE.</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>prvListTasksWithinSingleList(<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">TaskStatus_t</ref><sp/>*pxTaskStatusArray,<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*pxList,<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892c" kindref="member">eTaskState</ref><sp/>eState<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="496"><highlight class="comment"><sp/>*<sp/>Searches<sp/>pxList<sp/>for<sp/>a<sp/>task<sp/>with<sp/>name<sp/>pcNameToQuery<sp/>-<sp/>returning<sp/>a<sp/>handle<sp/>to</highlight></codeline>
<codeline lineno="497"><highlight class="comment"><sp/>*<sp/>the<sp/>task<sp/>if<sp/>it<sp/>is<sp/>found,<sp/>or<sp/>NULL<sp/>if<sp/>the<sp/>task<sp/>is<sp/>not<sp/>found.</highlight></codeline>
<codeline lineno="498"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_xTaskGetHandle<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*prvSearchForNameWithinSingleList(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*pxList,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pcNameToQuery[]<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="506"><highlight class="comment"><sp/>*<sp/>When<sp/>a<sp/>task<sp/>is<sp/>created,<sp/>the<sp/>stack<sp/>of<sp/>the<sp/>task<sp/>is<sp/>filled<sp/>with<sp/>a<sp/>known<sp/>value.</highlight></codeline>
<codeline lineno="507"><highlight class="comment"><sp/>*<sp/>This<sp/>function<sp/>determines<sp/>the<sp/>&apos;high<sp/>water<sp/>mark&apos;<sp/>of<sp/>the<sp/>task<sp/>stack<sp/>by</highlight></codeline>
<codeline lineno="508"><highlight class="comment"><sp/>*<sp/>determining<sp/>how<sp/>much<sp/>of<sp/>the<sp/>stack<sp/>remains<sp/>at<sp/>the<sp/>original<sp/>preset<sp/>value.</highlight></codeline>
<codeline lineno="509"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>INCLUDE_uxTaskGetStackHighWaterMark<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>INCLUDE_uxTaskGetStackHighWaterMark2<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="_free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a" kindref="member">configSTACK_DEPTH_TYPE</ref><sp/>prvTaskCheckFreeStackSpace(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>pucStackByte<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="517"><highlight class="comment"><sp/>*<sp/>Return<sp/>the<sp/>amount<sp/>of<sp/>time,<sp/>in<sp/>ticks,<sp/>that<sp/>will<sp/>pass<sp/>before<sp/>the<sp/>kernel<sp/>will</highlight></codeline>
<codeline lineno="518"><highlight class="comment"><sp/>*<sp/>next<sp/>move<sp/>a<sp/>task<sp/>from<sp/>the<sp/>Blocked<sp/>state<sp/>to<sp/>the<sp/>Running<sp/>state.</highlight></codeline>
<codeline lineno="519"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="520"><highlight class="comment"><sp/>*<sp/>This<sp/>conditional<sp/>compilation<sp/>should<sp/>use<sp/>inequality<sp/>to<sp/>0,<sp/>not<sp/>equality<sp/>to<sp/>1.</highlight></codeline>
<codeline lineno="521"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>to<sp/>ensure<sp/>portSUPPRESS_TICKS_AND_SLEEP()<sp/>can<sp/>be<sp/>called<sp/>when<sp/>user</highlight></codeline>
<codeline lineno="522"><highlight class="comment"><sp/>*<sp/>defined<sp/>low<sp/>power<sp/>mode<sp/>implementations<sp/>require<sp/>configUSE_TICKLESS_IDLE<sp/>to<sp/>be</highlight></codeline>
<codeline lineno="523"><highlight class="comment"><sp/>*<sp/>set<sp/>to<sp/>a<sp/>value<sp/>other<sp/>than<sp/>1.</highlight></codeline>
<codeline lineno="524"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TICKLESS_IDLE<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>prvGetExpectedIdleTime(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="532"><highlight class="comment"><sp/>*<sp/>Set<sp/>xNextTaskUnblockTime<sp/>to<sp/>the<sp/>time<sp/>at<sp/>which<sp/>the<sp/>next<sp/>Blocked<sp/>state<sp/>task</highlight></codeline>
<codeline lineno="533"><highlight class="comment"><sp/>*<sp/>will<sp/>exit<sp/>the<sp/>Blocked<sp/>state.</highlight></codeline>
<codeline lineno="534"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" kindref="member">prvResetNextTaskUnblockTime</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configUSE_STATS_FORMATTING_FUNCTIONS<sp/>&gt;<sp/>0<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="540"><highlight class="comment"><sp/><sp/><sp/>*<sp/>Helper<sp/>function<sp/>used<sp/>to<sp/>pad<sp/>task<sp/>names<sp/>with<sp/>spaces<sp/>when<sp/>printing<sp/>out</highlight></codeline>
<codeline lineno="541"><highlight class="comment"><sp/><sp/><sp/>*<sp/>human<sp/>readable<sp/>tables<sp/>of<sp/>task<sp/>information.</highlight></codeline>
<codeline lineno="542"><highlight class="comment"><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prvWriteNameToBuffer(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcBuffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcTaskName<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/>Called<sp/>after<sp/>a<sp/>Task_t<sp/>structure<sp/>has<sp/>been<sp/>allocated<sp/>either<sp/>statically<sp/>or</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/>dynamically<sp/>to<sp/>fill<sp/>in<sp/>the<sp/>structure&apos;s<sp/>members.</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prvInitialiseNewTask(<sp/><sp/><sp/><ref refid="projdefs_8h_1a9b32502ff92c255c686dacde53c1cba0" kindref="member">TaskFunction_t</ref><sp/>pxTaskCode,</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pcName,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulStackDepth,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvParameters,</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxPriority,</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxCreatedTask,</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxNewTCB,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_m_e_m_o_r_y___r_e_g_i_o_n" kindref="compound">MemoryRegion_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xRegions<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*<sp/>Called<sp/>after<sp/>a<sp/>new<sp/>task<sp/>has<sp/>been<sp/>created<sp/>and<sp/>initialised<sp/>to<sp/>place<sp/>the<sp/>task</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/>under<sp/>the<sp/>control<sp/>of<sp/>the<sp/>scheduler.</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" kindref="member">prvAddNewTaskToReadyList</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxNewTCB<sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="567"><highlight class="comment"><sp/>*<sp/>freertos_tasks_c_additions_init()<sp/>should<sp/>only<sp/>be<sp/>called<sp/>if<sp/>the<sp/>user<sp/>definable</highlight></codeline>
<codeline lineno="568"><highlight class="comment"><sp/>*<sp/>macro<sp/>FREERTOS_TASKS_C_ADDITIONS_INIT()<sp/>is<sp/>defined,<sp/>as<sp/>that<sp/>is<sp/>the<sp/>only<sp/>macro</highlight></codeline>
<codeline lineno="569"><highlight class="comment"><sp/>*<sp/>called<sp/>by<sp/>the<sp/>function.</highlight></codeline>
<codeline lineno="570"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FREERTOS_TASKS_C_ADDITIONS_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freertos_tasks_c_additions_init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)<sp/><ref refid="mpu__wrappers_8h_1a4785c4f4a8c04b835139dcc2a6682078" kindref="member">PRIVILEGED_FUNCTION</ref>;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskCreateStatic(<sp/><ref refid="projdefs_8h_1a9b32502ff92c255c686dacde53c1cba0" kindref="member">TaskFunction_t</ref><sp/>pxTaskCode,</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pcName,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulStackDepth,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvParameters,</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxPriority,</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>puxStackBuffer,</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structx_s_t_a_t_i_c___t_c_b" kindref="compound">StaticTask_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTaskBuffer<sp/>)</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxNewTCB;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>puxStackBuffer<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTaskBuffer<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>configASSERT_DEFINED<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Sanity<sp/>check<sp/>that<sp/>the<sp/>size<sp/>of<sp/>the<sp/>structure<sp/>used<sp/>to<sp/>declare<sp/>a</highlight></codeline>
<codeline lineno="598"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>of<sp/>type<sp/>StaticTask_t<sp/>equals<sp/>the<sp/>size<sp/>of<sp/>the<sp/>real<sp/>task</highlight></codeline>
<codeline lineno="599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>structure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">volatile</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>xSize<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="_free_r_t_o_s_8h_1af0002e4ad72220b34b95fcdf43bcd82d" kindref="member">StaticTask_t</ref><sp/>);</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xSize<sp/>==<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>xSize;<sp/></highlight><highlight class="comment">/*<sp/>Prevent<sp/>lint<sp/>warning<sp/>when<sp/>configASSERT()<sp/>is<sp/>not<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="604"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configASSERT_DEFINED<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxTaskBuffer<sp/>!=<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>puxStackBuffer<sp/>!=<sp/>NULL<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>memory<sp/>used<sp/>for<sp/>the<sp/>task&apos;s<sp/>TCB<sp/>and<sp/>stack<sp/>are<sp/>passed<sp/>into<sp/>this</highlight></codeline>
<codeline lineno="610"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>-<sp/>use<sp/>them.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB<sp/>=<sp/>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/>)<sp/>pxTaskBuffer;<sp/></highlight><highlight class="comment">/*lint<sp/>!e740<sp/>!e9087<sp/>Unusual<sp/>cast<sp/>is<sp/>ok<sp/>as<sp/>the<sp/>structures<sp/>are<sp/>designed<sp/>to<sp/>have<sp/>the<sp/>same<sp/>alignment,<sp/>and<sp/>the<sp/>size<sp/>is<sp/>checked<sp/>by<sp/>an<sp/>assert.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>*<sp/>)<sp/>puxStackBuffer;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE<sp/>!=<sp/>0<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e731<sp/>!e9029<sp/>Macro<sp/>has<sp/>been<sp/>consolidated<sp/>for<sp/>readability<sp/>reasons.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tasks<sp/>can<sp/>be<sp/>created<sp/>statically<sp/>or<sp/>dynamically,<sp/>so<sp/>note<sp/>this</highlight></codeline>
<codeline lineno="617"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>was<sp/>created<sp/>statically<sp/>in<sp/>case<sp/>the<sp/>task<sp/>is<sp/>later<sp/>deleted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;ucStaticallyAllocated<sp/>=<sp/><ref refid="tasks_8c_1a9851e50775136d536fed623e1ac598aa" kindref="member">tskSTATICALLY_ALLOCATED_STACK_AND_TCB</ref>;</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="620"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prvInitialiseNewTask(<sp/>pxTaskCode,<sp/>pcName,<sp/>ulStackDepth,<sp/>pvParameters,<sp/>uxPriority,<sp/>&amp;xReturn,<sp/>pxNewTCB,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" kindref="member">prvAddNewTaskToReadyList</ref>(<sp/>pxNewTCB<sp/>);</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>SUPPORT_STATIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"></highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xTaskCreateRestrictedStatic(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s" kindref="compound">TaskParameters_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTaskDefinition,<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>*pxCreatedTask<sp/>)</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxNewTCB;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a0b024e12cbca6f5018f5f1a43818b03d" kindref="member">errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a946c525d3765369780538f9bc3f3586d" kindref="member">puxStackBuffer</ref><sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTaskDefinition-&gt;pxTaskBuffer<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a946c525d3765369780538f9bc3f3586d" kindref="member">puxStackBuffer</ref><sp/>!=<sp/>NULL<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>pxTaskDefinition-&gt;pxTaskBuffer<sp/>!=<sp/>NULL<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>space<sp/>for<sp/>the<sp/>TCB.<sp/><sp/>Where<sp/>the<sp/>memory<sp/>comes<sp/>from<sp/>depends</highlight></codeline>
<codeline lineno="649"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>port<sp/>malloc<sp/>function<sp/>and<sp/>whether<sp/>or</highlight></codeline>
<codeline lineno="650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>static<sp/>allocation<sp/>is<sp/>being<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB<sp/>=<sp/>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/>)<sp/>pxTaskDefinition-&gt;pxTaskBuffer;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>stack<sp/>location<sp/>in<sp/>the<sp/>TCB.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref><sp/>=<sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a946c525d3765369780538f9bc3f3586d" kindref="member">puxStackBuffer</ref>;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tasks<sp/>can<sp/>be<sp/>created<sp/>statically<sp/>or<sp/>dynamically,<sp/>so<sp/>note<sp/>this</highlight></codeline>
<codeline lineno="659"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>was<sp/>created<sp/>statically<sp/>in<sp/>case<sp/>the<sp/>task<sp/>is<sp/>later<sp/>deleted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;ucStaticallyAllocated<sp/>=<sp/><ref refid="tasks_8c_1a9851e50775136d536fed623e1ac598aa" kindref="member">tskSTATICALLY_ALLOCATED_STACK_AND_TCB</ref>;</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"></highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prvInitialiseNewTask(<sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a7527993402054565cda38251c8922880" kindref="member">pvTaskCode</ref>,</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a7b3e5583acf9de8bacac572a42246459" kindref="member">pcName</ref>,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>uint32_t<sp/>)<sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1ac2edb442cd1a9dc5435c7735ed99c83e" kindref="member">usStackDepth</ref>,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1accbb9f4de75b5b5be750198b52390c7f" kindref="member">pvParameters</ref>,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1aa1aff14035db645e2bdcc85b3cdc9bab" kindref="member">uxPriority</ref>,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxCreatedTask,<sp/>pxNewTCB,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1ae8b97c6b7a344bf09b066b0844844d66" kindref="member">xRegions</ref><sp/>);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" kindref="member">prvAddNewTaskToReadyList</ref>(<sp/>pxNewTCB<sp/>);</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xTaskCreateRestricted(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s" kindref="compound">TaskParameters_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTaskDefinition,<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>*pxCreatedTask<sp/>)</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxNewTCB;</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a0b024e12cbca6f5018f5f1a43818b03d" kindref="member">errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a946c525d3765369780538f9bc3f3586d" kindref="member">puxStackBuffer</ref><sp/>);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"></highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a946c525d3765369780538f9bc3f3586d" kindref="member">puxStackBuffer</ref><sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>space<sp/>for<sp/>the<sp/>TCB.<sp/><sp/>Where<sp/>the<sp/>memory<sp/>comes<sp/>from<sp/>depends</highlight></codeline>
<codeline lineno="694"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>on<sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>port<sp/>malloc<sp/>function<sp/>and<sp/>whether<sp/>or</highlight></codeline>
<codeline lineno="695"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>static<sp/>allocation<sp/>is<sp/>being<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB<sp/>=<sp/>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/>)<sp/><ref refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" kindref="member">pvPortMalloc</ref>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxNewTCB<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>stack<sp/>location<sp/>in<sp/>the<sp/>TCB.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref><sp/>=<sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a946c525d3765369780538f9bc3f3586d" kindref="member">puxStackBuffer</ref>;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tasks<sp/>can<sp/>be<sp/>created<sp/>statically<sp/>or<sp/>dynamically,<sp/>so<sp/>note</highlight></codeline>
<codeline lineno="706"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>task<sp/>had<sp/>a<sp/>statically<sp/>allocated<sp/>stack<sp/>in<sp/>case<sp/>it<sp/>is</highlight></codeline>
<codeline lineno="707"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>later<sp/>deleted.<sp/><sp/>The<sp/>TCB<sp/>was<sp/>allocated<sp/>dynamically.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;ucStaticallyAllocated<sp/>=<sp/><ref refid="tasks_8c_1ad65be2320d426aca4e0e72d29ccd04de" kindref="member">tskSTATICALLY_ALLOCATED_STACK_ONLY</ref>;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prvInitialiseNewTask(<sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a7527993402054565cda38251c8922880" kindref="member">pvTaskCode</ref>,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1a7b3e5583acf9de8bacac572a42246459" kindref="member">pcName</ref>,</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>uint32_t<sp/>)<sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1ac2edb442cd1a9dc5435c7735ed99c83e" kindref="member">usStackDepth</ref>,</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1accbb9f4de75b5b5be750198b52390c7f" kindref="member">pvParameters</ref>,</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1aa1aff14035db645e2bdcc85b3cdc9bab" kindref="member">uxPriority</ref>,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxCreatedTask,<sp/>pxNewTCB,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskDefinition-&gt;<ref refid="structx_t_a_s_k___p_a_r_a_m_e_t_e_r_s_1ae8b97c6b7a344bf09b066b0844844d66" kindref="member">xRegions</ref><sp/>);</highlight></codeline>
<codeline lineno="719"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" kindref="member">prvAddNewTaskToReadyList</ref>(<sp/>pxNewTCB<sp/>);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>portUSING_MPU_WRAPPERS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xTaskCreate(<sp/><ref refid="projdefs_8h_1a9b32502ff92c255c686dacde53c1cba0" kindref="member">TaskFunction_t</ref><sp/>pxTaskCode,</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pcName,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="_free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a" kindref="member">configSTACK_DEPTH_TYPE</ref><sp/>usStackDepth,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvParameters,</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxPriority,</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxCreatedTask<sp/>)</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxNewTCB;</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>stack<sp/>grows<sp/>down<sp/>then<sp/>allocate<sp/>the<sp/>stack<sp/>then<sp/>the<sp/>TCB<sp/>so<sp/>the<sp/>stack</highlight></codeline>
<codeline lineno="744"><highlight class="comment"><sp/><sp/><sp/><sp/>does<sp/>not<sp/>grow<sp/>into<sp/>the<sp/>TCB.<sp/><sp/>Likewise<sp/>if<sp/>the<sp/>stack<sp/>grows<sp/>up<sp/>then<sp/>allocate</highlight></codeline>
<codeline lineno="745"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>TCB<sp/>then<sp/>the<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>portSTACK_GROWTH<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>space<sp/>for<sp/>the<sp/>TCB.<sp/><sp/>Where<sp/>the<sp/>memory<sp/>comes<sp/>from<sp/>depends<sp/>on</highlight></codeline>
<codeline lineno="749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>implementation<sp/>of<sp/>the<sp/>port<sp/>malloc<sp/>function<sp/>and<sp/>whether<sp/>or<sp/>not<sp/>static</highlight></codeline>
<codeline lineno="750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>allocation<sp/>is<sp/>being<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB<sp/>=<sp/>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/>)<sp/><ref refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" kindref="member">pvPortMalloc</ref>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxNewTCB<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>space<sp/>for<sp/>the<sp/>stack<sp/>used<sp/>by<sp/>the<sp/>task<sp/>being<sp/>created.</highlight></codeline>
<codeline lineno="756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>base<sp/>of<sp/>the<sp/>stack<sp/>memory<sp/>stored<sp/>in<sp/>the<sp/>TCB<sp/>so<sp/>the<sp/>task<sp/>can</highlight></codeline>
<codeline lineno="757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>deleted<sp/>later<sp/>if<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>*<sp/>)<sp/><ref refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" kindref="member">pvPortMalloc</ref>(<sp/>(<sp/>(<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>usStackDepth<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>)<sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref><sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Could<sp/>not<sp/>allocate<sp/>the<sp/>stack.<sp/><sp/>Delete<sp/>the<sp/>allocated<sp/>TCB.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxNewTCB<sp/>);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>portSTACK_GROWTH<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>*pxStack;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>space<sp/>for<sp/>the<sp/>stack<sp/>used<sp/>by<sp/>the<sp/>task<sp/>being<sp/>created.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxStack<sp/>=<sp/><ref refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" kindref="member">pvPortMalloc</ref>(<sp/>(<sp/>(<sp/>(<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>)<sp/>usStackDepth<sp/>)<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>)<sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>All<sp/>values<sp/>returned<sp/>by<sp/>pvPortMalloc()<sp/>have<sp/>at<sp/>least<sp/>the<sp/>alignment<sp/>required<sp/>by<sp/>the<sp/>MCU&apos;s<sp/>stack<sp/>and<sp/>this<sp/>allocation<sp/>is<sp/>the<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="774"><highlight class="normal"></highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxStack<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>space<sp/>for<sp/>the<sp/>TCB.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB<sp/>=<sp/>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/>)<sp/><ref refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" kindref="member">pvPortMalloc</ref>(<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9087<sp/>!e9079<sp/>All<sp/>values<sp/>returned<sp/>by<sp/>pvPortMalloc()<sp/>have<sp/>at<sp/>least<sp/>the<sp/>alignment<sp/>required<sp/>by<sp/>the<sp/>MCU&apos;s<sp/>stack,<sp/>and<sp/>the<sp/>first<sp/>member<sp/>of<sp/>TCB_t<sp/>is<sp/>always<sp/>a<sp/>pointer<sp/>to<sp/>the<sp/>task&apos;s<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxNewTCB<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>stack<sp/>location<sp/>in<sp/>the<sp/>TCB.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref><sp/>=<sp/>pxStack;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>stack<sp/>cannot<sp/>be<sp/>used<sp/>as<sp/>the<sp/>TCB<sp/>was<sp/>not<sp/>created.<sp/><sp/>Free</highlight></codeline>
<codeline lineno="788"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxStack<sp/>);</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>portSTACK_GROWTH<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxNewTCB<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE<sp/>!=<sp/>0<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e9029<sp/>!e731<sp/>Macro<sp/>has<sp/>been<sp/>consolidated<sp/>for<sp/>readability<sp/>reasons.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tasks<sp/>can<sp/>be<sp/>created<sp/>statically<sp/>or<sp/>dynamically,<sp/>so<sp/>note<sp/>this</highlight></codeline>
<codeline lineno="804"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>was<sp/>created<sp/>dynamically<sp/>in<sp/>case<sp/>it<sp/>is<sp/>later<sp/>deleted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;ucStaticallyAllocated<sp/>=<sp/><ref refid="tasks_8c_1af06a1633d2fb92f67712e62f3d1c3777" kindref="member">tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB</ref>;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prvInitialiseNewTask(<sp/>pxTaskCode,<sp/>pcName,<sp/>(<sp/>uint32_t<sp/>)<sp/>usStackDepth,<sp/>pvParameters,<sp/>uxPriority,<sp/>pxCreatedTask,<sp/>pxNewTCB,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" kindref="member">prvAddNewTaskToReadyList</ref>(<sp/>pxNewTCB<sp/>);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a0b024e12cbca6f5018f5f1a43818b03d" kindref="member">errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY</ref>;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prvInitialiseNewTask(<sp/><sp/><sp/><ref refid="projdefs_8h_1a9b32502ff92c255c686dacde53c1cba0" kindref="member">TaskFunction_t</ref><sp/>pxTaskCode,</highlight></codeline>
<codeline lineno="825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pcName,<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>ulStackDepth,</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pvParameters,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxPriority,</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxCreatedTask,</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxNewTCB,</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_m_e_m_o_r_y___r_e_g_i_o_n" kindref="compound">MemoryRegion_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xRegions<sp/>)</highlight></codeline>
<codeline lineno="832"><highlight class="normal">{</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>*pxTopOfStack;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>x;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>the<sp/>task<sp/>be<sp/>created<sp/>in<sp/>privileged<sp/>mode?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xRunPrivileged;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>uxPriority<sp/>&amp;<sp/><ref refid="_free_r_t_o_s_8h_1a27b7e11718b2ec5b5217e60f3b9e8aec" kindref="member">portPRIVILEGE_BIT</ref><sp/>)<sp/>!=<sp/>0U<sp/>)</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xRunPrivileged<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xRunPrivileged<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>uxPriority<sp/>&amp;=<sp/>~portPRIVILEGE_BIT;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="849"><highlight class="normal"></highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Avoid<sp/>dependency<sp/>on<sp/>memset()<sp/>if<sp/>it<sp/>is<sp/>not<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>tskSET_NEW_STACKS_TO_KNOWN_VALUE<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fill<sp/>the<sp/>stack<sp/>with<sp/>a<sp/>known<sp/>value<sp/>to<sp/>assist<sp/>debugging.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>memset(<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref>,<sp/>(<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/><ref refid="tasks_8c_1ad3b1c99066f14855be098ccca1685fac" kindref="member">tskSTACK_FILL_BYTE</ref>,<sp/>(<sp/>size_t<sp/>)<sp/>ulStackDepth<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="856"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>tskSET_NEW_STACKS_TO_KNOWN_VALUE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>top<sp/>of<sp/>stack<sp/>address.<sp/><sp/>This<sp/>depends<sp/>on<sp/>whether<sp/>the<sp/>stack</highlight></codeline>
<codeline lineno="859"><highlight class="comment"><sp/><sp/>grows<sp/>from<sp/>high<sp/>memory<sp/>to<sp/>low<sp/>(as<sp/>per<sp/>the<sp/>80x86)<sp/>or<sp/>vice<sp/>versa.</highlight></codeline>
<codeline lineno="860"><highlight class="comment"><sp/><sp/>portSTACK_GROWTH<sp/>is<sp/>used<sp/>to<sp/>make<sp/>the<sp/>result<sp/>positive<sp/>or<sp/>negative<sp/>as<sp/>required</highlight></codeline>
<codeline lineno="861"><highlight class="comment"><sp/><sp/>by<sp/>the<sp/>port.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>portSTACK_GROWTH<sp/>&lt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTopOfStack<sp/>=<sp/>&amp;(<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref>[<sp/>ulStackDepth<sp/>-<sp/>(<sp/>uint32_t<sp/>)<sp/>1<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTopOfStack<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>*<sp/>)<sp/>(<sp/>(<sp/>(<sp/><ref refid="_free_r_t_o_s_8h_1a53bae25f223b7156dce0fc6e6b1b2295" kindref="member">portPOINTER_SIZE_TYPE</ref><sp/>)<sp/>pxTopOfStack<sp/>)<sp/>&amp;<sp/>(<sp/>~(<sp/>(<sp/><ref refid="_free_r_t_o_s_8h_1a53bae25f223b7156dce0fc6e6b1b2295" kindref="member">portPOINTER_SIZE_TYPE</ref><sp/>)<sp/>portBYTE_ALIGNMENT_MASK<sp/>)<sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e923<sp/>!e9033<sp/>!e9078<sp/>MISRA<sp/>exception.<sp/><sp/>Avoiding<sp/>casts<sp/>between<sp/>pointers<sp/>and<sp/>integers<sp/>is<sp/>not<sp/>practical.<sp/><sp/>Size<sp/>differences<sp/>accounted<sp/>for<sp/>using<sp/>portPOINTER_SIZE_TYPE<sp/>type.<sp/><sp/>Checked<sp/>by<sp/>assert().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="866"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>alignment<sp/>of<sp/>the<sp/>calculated<sp/>top<sp/>of<sp/>stack<sp/>is<sp/>correct.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>(<sp/>(<sp/><ref refid="_free_r_t_o_s_8h_1a53bae25f223b7156dce0fc6e6b1b2295" kindref="member">portPOINTER_SIZE_TYPE</ref><sp/>)<sp/>pxTopOfStack<sp/>&amp;<sp/>(<sp/><ref refid="_free_r_t_o_s_8h_1a53bae25f223b7156dce0fc6e6b1b2295" kindref="member">portPOINTER_SIZE_TYPE</ref><sp/>)<sp/>portBYTE_ALIGNMENT_MASK<sp/>)<sp/>==<sp/>0UL<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>configRECORD_STACK_HIGH_ADDRESS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Also<sp/>record<sp/>the<sp/>stack&apos;s<sp/>high<sp/>address,<sp/>which<sp/>may<sp/>assist</highlight></codeline>
<codeline lineno="873"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>debugging.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;pxEndOfStack<sp/>=<sp/>pxTopOfStack;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="876"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configRECORD_STACK_HIGH_ADDRESS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>portSTACK_GROWTH<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTopOfStack<sp/>=<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref>;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>alignment<sp/>of<sp/>the<sp/>stack<sp/>buffer<sp/>is<sp/>correct.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>(<sp/>(<sp/><ref refid="_free_r_t_o_s_8h_1a53bae25f223b7156dce0fc6e6b1b2295" kindref="member">portPOINTER_SIZE_TYPE</ref><sp/>)<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref><sp/>&amp;<sp/>(<sp/><ref refid="_free_r_t_o_s_8h_1a53bae25f223b7156dce0fc6e6b1b2295" kindref="member">portPOINTER_SIZE_TYPE</ref><sp/>)<sp/>portBYTE_ALIGNMENT_MASK<sp/>)<sp/>==<sp/>0UL<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"></highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>other<sp/>extreme<sp/>of<sp/>the<sp/>stack<sp/>space<sp/>is<sp/>required<sp/>if<sp/>stack<sp/>checking<sp/>is</highlight></codeline>
<codeline lineno="886"><highlight class="comment"><sp/><sp/><sp/><sp/>performed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewTCB-&gt;pxEndOfStack<sp/>=<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref><sp/>+<sp/>(<sp/>ulStackDepth<sp/>-<sp/>(<sp/>uint32_t<sp/>)<sp/>1<sp/>);</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="889"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>portSTACK_GROWTH<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="890"><highlight class="normal"></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>task<sp/>name<sp/>in<sp/>the<sp/>TCB.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pcName<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>x<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0;<sp/>x<sp/>&lt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1ac388dc4041aab6997348828eb27fc1a8" kindref="member">configMAX_TASK_NAME_LEN</ref>;<sp/>x++<sp/>)</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a67d61291794f38afb5be5132078bc24f" kindref="member">pcTaskName</ref>[<sp/>x<sp/>]<sp/>=<sp/>pcName[<sp/>x<sp/>];</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Don&apos;t<sp/>copy<sp/>all<sp/>configMAX_TASK_NAME_LEN<sp/>if<sp/>the<sp/>string<sp/>is<sp/>shorter<sp/>than</highlight></codeline>
<codeline lineno="899"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>configMAX_TASK_NAME_LEN<sp/>characters<sp/>just<sp/>in<sp/>case<sp/>the<sp/>memory<sp/>after<sp/>the</highlight></codeline>
<codeline lineno="900"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>is<sp/>not<sp/>accessible<sp/>(extremely<sp/>unlikely).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pcName[<sp/>x<sp/>]<sp/>==<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>)<sp/>0x00<sp/>)</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"></highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>the<sp/>name<sp/>string<sp/>is<sp/>terminated<sp/>in<sp/>the<sp/>case<sp/>that<sp/>the<sp/>string<sp/>length</highlight></codeline>
<codeline lineno="912"><highlight class="comment"><sp/><sp/><sp/><sp/>was<sp/>greater<sp/>or<sp/>equal<sp/>to<sp/>configMAX_TASK_NAME_LEN.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a67d61291794f38afb5be5132078bc24f" kindref="member">pcTaskName</ref>[<sp/><ref refid="_free_r_t_o_s_config_8h_1ac388dc4041aab6997348828eb27fc1a8" kindref="member">configMAX_TASK_NAME_LEN</ref><sp/>-<sp/>1<sp/>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>has<sp/>not<sp/>been<sp/>given<sp/>a<sp/>name,<sp/>so<sp/>just<sp/>ensure<sp/>there<sp/>is<sp/>a<sp/>NULL</highlight></codeline>
<codeline lineno="918"><highlight class="comment"><sp/><sp/><sp/><sp/>terminator<sp/>when<sp/>it<sp/>is<sp/>read<sp/>out.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a67d61291794f38afb5be5132078bc24f" kindref="member">pcTaskName</ref>[<sp/>0<sp/>]<sp/>=<sp/>0x00;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>used<sp/>as<sp/>an<sp/>array<sp/>index<sp/>so<sp/>must<sp/>ensure<sp/>it&apos;s<sp/>not<sp/>too<sp/>large.<sp/><sp/>First</highlight></codeline>
<codeline lineno="923"><highlight class="comment"><sp/><sp/>remove<sp/>the<sp/>privilege<sp/>bit<sp/>if<sp/>one<sp/>is<sp/>present.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxPriority<sp/>&gt;=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>)</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>uxPriority<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1U;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>=<sp/>uxPriority;</highlight></codeline>
<codeline lineno="934"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewTCB-&gt;uxBasePriority<sp/>=<sp/>uxPriority;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewTCB-&gt;uxMutexesHeld<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="939"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1ab91611baae53be209a05d211f55f5395" kindref="member">vListInitialiseItem</ref>(<sp/>&amp;(<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1ab91611baae53be209a05d211f55f5395" kindref="member">vListInitialiseItem</ref>(<sp/>&amp;(<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Set<sp/>the<sp/>pxNewTCB<sp/>as<sp/>a<sp/>link<sp/>back<sp/>from<sp/>the<sp/>ListItem_t.<sp/><sp/>This<sp/>is<sp/>so<sp/>we<sp/>can<sp/>get</highlight></codeline>
<codeline lineno="945"><highlight class="comment"><sp/><sp/>back<sp/>to<sp/>the<sp/>containing<sp/>TCB<sp/>from<sp/>a<sp/>generic<sp/>item<sp/>in<sp/>a<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1acc01a08e534b54fe438847ef02e5060a" kindref="member">listSET_LIST_ITEM_OWNER</ref>(<sp/>&amp;(<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>),<sp/>pxNewTCB<sp/>);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Event<sp/>lists<sp/>are<sp/>always<sp/>in<sp/>priority<sp/>order.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" kindref="member">listSET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>),<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>uxPriority<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1acc01a08e534b54fe438847ef02e5060a" kindref="member">listSET_LIST_ITEM_OWNER</ref>(<sp/>&amp;(<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>),<sp/>pxNewTCB<sp/>);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"></highlight></codeline>
<codeline lineno="952"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>portCRITICAL_NESTING_IN_TCB<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewTCB-&gt;uxCriticalNesting<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>portCRITICAL_NESTING_IN_TCB<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_APPLICATION_TASK_TAG<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewTCB-&gt;pxTaskTag<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="962"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_APPLICATION_TASK_TAG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configGENERATE_RUN_TIME_STATS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewTCB-&gt;ulRunTimeCounter<sp/>=<sp/>0UL;</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configGENERATE_RUN_TIME_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/>vPortStoreTaskMPUSettings(<sp/>&amp;(<sp/>pxNewTCB-&gt;xMPUSettings<sp/>),<sp/>xRegions,<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref>,<sp/>ulStackDepth<sp/>);</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="974"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Avoid<sp/>compiler<sp/>warning<sp/>about<sp/>unreferenced<sp/>parameter.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>xRegions;</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="normal"></highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configNUM_THREAD_LOCAL_STORAGE_POINTERS<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_8h_1a8d32b5f74e55dfd12c5aa3415e16d75e" kindref="member">configNUM_THREAD_LOCAL_STORAGE_POINTERS</ref>;<sp/>x++<sp/>)</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;pvThreadLocalStoragePointers[<sp/>x<sp/>]<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewTCB-&gt;ulNotifiedValue<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewTCB-&gt;ucNotifyState<sp/>=<sp/><ref refid="tasks_8c_1a4f2f023143b2cd2367a441e104f8cf2c" kindref="member">taskNOT_WAITING_NOTIFICATION</ref>;</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_NEWLIB_REENTRANT<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialise<sp/>this<sp/>task&apos;s<sp/>Newlib<sp/>reent<sp/>structure.</highlight></codeline>
<codeline lineno="1000"><highlight class="comment"><sp/><sp/><sp/><sp/>See<sp/>the<sp/>third<sp/>party<sp/>link<sp/>http://www.nadler.com/embedded/newlibAndFreeRTOS.html</highlight></codeline>
<codeline lineno="1001"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>additional<sp/>information.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/>_REENT_INIT_PTR(<sp/>(<sp/>&amp;(<sp/>pxNewTCB-&gt;xNewLib_reent<sp/>)<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>INCLUDE_xTaskAbortDelay<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>pxNewTCB-&gt;ucDelayAborted<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Initialize<sp/>the<sp/>TCB<sp/>stack<sp/>to<sp/>look<sp/>as<sp/>if<sp/>the<sp/>task<sp/>was<sp/>already<sp/>running,</highlight></codeline>
<codeline lineno="1013"><highlight class="comment"><sp/><sp/>but<sp/>had<sp/>been<sp/>interrupted<sp/>by<sp/>the<sp/>scheduler.<sp/><sp/>The<sp/>return<sp/>address<sp/>is<sp/>set</highlight></codeline>
<codeline lineno="1014"><highlight class="comment"><sp/><sp/>to<sp/>the<sp/>start<sp/>of<sp/>the<sp/>task<sp/>function.<sp/>Once<sp/>the<sp/>stack<sp/>has<sp/>been<sp/>initialised</highlight></codeline>
<codeline lineno="1015"><highlight class="comment"><sp/><sp/>the<sp/>top<sp/>of<sp/>stack<sp/>variable<sp/>is<sp/>updated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>port<sp/>has<sp/>capability<sp/>to<sp/>detect<sp/>stack<sp/>overflow,</highlight></codeline>
<codeline lineno="1019"><highlight class="comment"><sp/><sp/><sp/><sp/>pass<sp/>the<sp/>stack<sp/>end<sp/>address<sp/>to<sp/>the<sp/>stack<sp/>initialization</highlight></codeline>
<codeline lineno="1020"><highlight class="comment"><sp/><sp/><sp/><sp/>function<sp/>as<sp/>well.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>portHAS_STACK_OVERFLOW_CHECKING<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>portSTACK_GROWTH<sp/>&lt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a429a186c7f8e34aba1eef5e12d215b90" kindref="member">pxTopOfStack</ref><sp/>=<sp/><ref refid="portable_8h_1aec89de59377079f7dc6a71dfbefd9a6f" kindref="member">pxPortInitialiseStack</ref>(<sp/>pxTopOfStack,<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref>,<sp/>pxTaskCode,<sp/>pvParameters,<sp/>xRunPrivileged<sp/>);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>portSTACK_GROWTH<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a429a186c7f8e34aba1eef5e12d215b90" kindref="member">pxTopOfStack</ref><sp/>=<sp/><ref refid="portable_8h_1aec89de59377079f7dc6a71dfbefd9a6f" kindref="member">pxPortInitialiseStack</ref>(<sp/>pxTopOfStack,<sp/>pxNewTCB-&gt;pxEndOfStack,<sp/>pxTaskCode,<sp/>pvParameters,<sp/>xRunPrivileged<sp/>);</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>portSTACK_GROWTH<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>portHAS_STACK_OVERFLOW_CHECKING<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a429a186c7f8e34aba1eef5e12d215b90" kindref="member">pxTopOfStack</ref><sp/>=<sp/><ref refid="portable_8h_1aec89de59377079f7dc6a71dfbefd9a6f" kindref="member">pxPortInitialiseStack</ref>(<sp/>pxTopOfStack,<sp/>pxTaskCode,<sp/>pvParameters,<sp/>xRunPrivileged<sp/>);</highlight></codeline>
<codeline lineno="1036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>portHAS_STACK_OVERFLOW_CHECKING<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>portUSING_MPU_WRAPPERS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1041"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>port<sp/>has<sp/>capability<sp/>to<sp/>detect<sp/>stack<sp/>overflow,</highlight></codeline>
<codeline lineno="1042"><highlight class="comment"><sp/><sp/><sp/><sp/>pass<sp/>the<sp/>stack<sp/>end<sp/>address<sp/>to<sp/>the<sp/>stack<sp/>initialization</highlight></codeline>
<codeline lineno="1043"><highlight class="comment"><sp/><sp/><sp/><sp/>function<sp/>as<sp/>well.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>portHAS_STACK_OVERFLOW_CHECKING<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>portSTACK_GROWTH<sp/>&lt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a429a186c7f8e34aba1eef5e12d215b90" kindref="member">pxTopOfStack</ref><sp/>=<sp/><ref refid="portable_8h_1aec89de59377079f7dc6a71dfbefd9a6f" kindref="member">pxPortInitialiseStack</ref>(<sp/>pxTopOfStack,<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref>,<sp/>pxTaskCode,<sp/>pvParameters<sp/>);</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>portSTACK_GROWTH<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a429a186c7f8e34aba1eef5e12d215b90" kindref="member">pxTopOfStack</ref><sp/>=<sp/><ref refid="portable_8h_1aec89de59377079f7dc6a71dfbefd9a6f" kindref="member">pxPortInitialiseStack</ref>(<sp/>pxTopOfStack,<sp/>pxNewTCB-&gt;pxEndOfStack,<sp/>pxTaskCode,<sp/>pvParameters<sp/>);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>portSTACK_GROWTH<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1055"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>portHAS_STACK_OVERFLOW_CHECKING<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a429a186c7f8e34aba1eef5e12d215b90" kindref="member">pxTopOfStack</ref><sp/>=<sp/><ref refid="portable_8h_1aec89de59377079f7dc6a71dfbefd9a6f" kindref="member">pxPortInitialiseStack</ref>(<sp/>pxTopOfStack,<sp/>pxTaskCode,<sp/>pvParameters<sp/>);</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>portHAS_STACK_OVERFLOW_CHECKING<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>portUSING_MPU_WRAPPERS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxCreatedTask<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pass<sp/>the<sp/>handle<sp/>out<sp/>in<sp/>an<sp/>anonymous<sp/>way.<sp/><sp/>The<sp/>handle<sp/>can<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="1067"><highlight class="comment"><sp/><sp/><sp/><sp/>change<sp/>the<sp/>created<sp/>task&apos;s<sp/>priority,<sp/>delete<sp/>the<sp/>created<sp/>task,<sp/>etc.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>*pxCreatedTask<sp/>=<sp/>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>)<sp/>pxNewTCB;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1074"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1076" refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a132d136b8d2586e0778ce369e5cb8a1e" kindref="member">prvAddNewTaskToReadyList</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxNewTCB<sp/>)</highlight></codeline>
<codeline lineno="1078"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>interrupts<sp/>don&apos;t<sp/>access<sp/>the<sp/>task<sp/>lists<sp/>while<sp/>the<sp/>lists<sp/>are<sp/>being</highlight></codeline>
<codeline lineno="1080"><highlight class="comment"><sp/><sp/>updated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref>++;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>are<sp/>no<sp/>other<sp/>tasks,<sp/>or<sp/>all<sp/>the<sp/>other<sp/>tasks<sp/>are<sp/>in</highlight></codeline>
<codeline lineno="1087"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>suspended<sp/>state<sp/>-<sp/>make<sp/>this<sp/>the<sp/>current<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>=<sp/>pxNewTCB;</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>the<sp/>first<sp/>task<sp/>to<sp/>be<sp/>created<sp/>so<sp/>do<sp/>the<sp/>preliminary</highlight></codeline>
<codeline lineno="1093"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>initialisation<sp/>required.<sp/><sp/>We<sp/>will<sp/>not<sp/>recover<sp/>if<sp/>this<sp/>call</highlight></codeline>
<codeline lineno="1094"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fails,<sp/>but<sp/>we<sp/>will<sp/>report<sp/>the<sp/>failure.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" kindref="member">prvInitialiseTaskLists</ref>();</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>scheduler<sp/>is<sp/>not<sp/>already<sp/>running,<sp/>make<sp/>this<sp/>task<sp/>the</highlight></codeline>
<codeline lineno="1105"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>task<sp/>if<sp/>it<sp/>is<sp/>the<sp/>highest<sp/>priority<sp/>task<sp/>to<sp/>be<sp/>created</highlight></codeline>
<codeline lineno="1106"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>so<sp/>far.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" kindref="member">xSchedulerRunning</ref><sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&lt;=<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>=<sp/>pxNewTCB;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a43097b97496231e1af2dff1fac62bcc6" kindref="member">uxTaskNumber</ref>++;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"></highlight></codeline>
<codeline lineno="1126"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>a<sp/>counter<sp/>into<sp/>the<sp/>TCB<sp/>for<sp/>tracing<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxNewTCB-&gt;uxTCBNumber<sp/>=<sp/><ref refid="tasks_8c_1a43097b97496231e1af2dff1fac62bcc6" kindref="member">uxTaskNumber</ref>;</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1131"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a453dc678632734505187c453da598172" kindref="member">traceTASK_CREATE</ref>(<sp/>pxNewTCB<sp/>);</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxNewTCB<sp/>);</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1aca0e7403a160318f5c216fc40c95e294" kindref="member">portSETUP_TCB</ref>(<sp/>pxNewTCB<sp/>);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" kindref="member">xSchedulerRunning</ref><sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1141"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>created<sp/>task<sp/>is<sp/>of<sp/>a<sp/>higher<sp/>priority<sp/>than<sp/>the<sp/>current<sp/>task</highlight></codeline>
<codeline lineno="1143"><highlight class="comment"><sp/><sp/><sp/><sp/>then<sp/>it<sp/>should<sp/>run<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&lt;<sp/>pxNewTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="1145"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acd0c920e40647de517ac633965b52273" kindref="member">taskYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1149"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1157"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1160"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_vTaskDelete<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1161"><highlight class="normal"></highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a27ff4ebce26565bef136bda84201ff80" kindref="member">vTaskDelete</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskToDelete<sp/>)</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"></highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>null<sp/>is<sp/>passed<sp/>in<sp/>here<sp/>then<sp/>it<sp/>is<sp/>the<sp/>calling<sp/>task<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="1169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>being<sp/>deleted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTaskToDelete<sp/>);</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>task<sp/>from<sp/>the<sp/>ready/delayed<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>)<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a9517fc40d713aff9dd8182223948f9c8" kindref="member">taskRESET_READY_PRIORITY</ref>(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>);</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"></highlight></codeline>
<codeline lineno="1182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>the<sp/>task<sp/>waiting<sp/>on<sp/>an<sp/>event<sp/>also?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a7c4dff11380cd843ed0b6a8dc065916b" kindref="member">listLIST_ITEM_CONTAINER</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"></highlight></codeline>
<codeline lineno="1192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>the<sp/>uxTaskNumber<sp/>also<sp/>so<sp/>kernel<sp/>aware<sp/>debuggers<sp/>can</highlight></codeline>
<codeline lineno="1193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>detect<sp/>that<sp/>the<sp/>task<sp/>lists<sp/>need<sp/>re-generating.<sp/><sp/>This<sp/>is<sp/>done<sp/>before</highlight></codeline>
<codeline lineno="1194"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>portPRE_TASK_DELETE_HOOK()<sp/>as<sp/>in<sp/>the<sp/>Windows<sp/>port<sp/>that<sp/>macro<sp/>will</highlight></codeline>
<codeline lineno="1195"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>return.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a43097b97496231e1af2dff1fac62bcc6" kindref="member">uxTaskNumber</ref>++;</highlight></codeline>
<codeline lineno="1197"><highlight class="normal"></highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>==<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>)</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>is<sp/>deleting<sp/>itself.<sp/><sp/>This<sp/>cannot<sp/>complete<sp/>within<sp/>the</highlight></codeline>
<codeline lineno="1201"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>itself,<sp/>as<sp/>a<sp/>context<sp/>switch<sp/>to<sp/>another<sp/>task<sp/>is<sp/>required.</highlight></codeline>
<codeline lineno="1202"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Place<sp/>the<sp/>task<sp/>in<sp/>the<sp/>termination<sp/>list.<sp/><sp/>The<sp/>idle<sp/>task<sp/>will</highlight></codeline>
<codeline lineno="1203"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check<sp/>the<sp/>termination<sp/>list<sp/>and<sp/>free<sp/>up<sp/>any<sp/>memory<sp/>allocated<sp/>by</highlight></codeline>
<codeline lineno="1204"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>scheduler<sp/>for<sp/>the<sp/>TCB<sp/>and<sp/>stack<sp/>of<sp/>the<sp/>deleted<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" kindref="member">vListInsertEnd</ref>(<sp/>&amp;xTasksWaitingTermination,<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>the<sp/>ucTasksDeleted<sp/>variable<sp/>so<sp/>the<sp/>idle<sp/>task<sp/>knows</highlight></codeline>
<codeline lineno="1208"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>there<sp/>is<sp/>a<sp/>task<sp/>that<sp/>has<sp/>been<sp/>deleted<sp/>and<sp/>that<sp/>it<sp/>should<sp/>therefore</highlight></codeline>
<codeline lineno="1209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>check<sp/>the<sp/>xTasksWaitingTermination<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++uxDeletedTasksWaitingCleanUp;</highlight></codeline>
<codeline lineno="1211"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>the<sp/>delete<sp/>hook<sp/>before<sp/>portPRE_TASK_DELETE_HOOK()<sp/>as</highlight></codeline>
<codeline lineno="1213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portPRE_TASK_DELETE_HOOK()<sp/>does<sp/>not<sp/>return<sp/>in<sp/>the<sp/>Win32<sp/>port.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af3f9bb780241cc663247908a22defa65" kindref="member">traceTASK_DELETE</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>pre-delete<sp/>hook<sp/>is<sp/>primarily<sp/>for<sp/>the<sp/>Windows<sp/>simulator,</highlight></codeline>
<codeline lineno="1217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>which<sp/>Windows<sp/>specific<sp/>clean<sp/>up<sp/>operations<sp/>are<sp/>performed,</highlight></codeline>
<codeline lineno="1218"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>after<sp/>which<sp/>it<sp/>is<sp/>not<sp/>possible<sp/>to<sp/>yield<sp/>away<sp/>from<sp/>this<sp/>task<sp/>-</highlight></codeline>
<codeline lineno="1219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hence<sp/>xYieldPending<sp/>is<sp/>used<sp/>to<sp/>latch<sp/>that<sp/>a<sp/>context<sp/>switch<sp/>is</highlight></codeline>
<codeline lineno="1220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a712f8cbd5ce7b049ef6a92dbb0da0215" kindref="member">portPRE_TASK_DELETE_HOOK</ref>(<sp/>pxTCB,<sp/>&amp;<ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>);</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref>;</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af3f9bb780241cc663247908a22defa65" kindref="member">traceTASK_DELETE</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>prvDeleteTCB(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>next<sp/>expected<sp/>unblock<sp/>time<sp/>in<sp/>case<sp/>it<sp/>referred<sp/>to</highlight></codeline>
<codeline lineno="1230"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>task<sp/>that<sp/>has<sp/>just<sp/>been<sp/>deleted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" kindref="member">prvResetNextTaskUnblockTime</ref>();</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight></codeline>
<codeline lineno="1236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Force<sp/>a<sp/>reschedule<sp/>if<sp/>it<sp/>is<sp/>the<sp/>currently<sp/>running<sp/>task<sp/>that<sp/>has<sp/>just</highlight></codeline>
<codeline lineno="1237"><highlight class="comment"><sp/><sp/><sp/><sp/>been<sp/>deleted.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" kindref="member">xSchedulerRunning</ref><sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>==<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>)</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="1244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1251"><highlight class="normal"></highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskDelete<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_vTaskDelayUntil<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a067da3e949e248096ec6c01f9cb75a47" kindref="member">vTaskDelayUntil</ref>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxPreviousWakeTime,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTimeIncrement<sp/>)</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTimeToWake;</highlight></codeline>
<codeline lineno="1260"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xAlreadyYielded,<sp/>xShouldDelay<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxPreviousWakeTime<sp/>);</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>xTimeIncrement<sp/>&gt;<sp/>0U<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"></highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a084d232640bd1d04bcac0b8784417015" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Minor<sp/>optimisation.<sp/><sp/>The<sp/>tick<sp/>count<sp/>cannot<sp/>change<sp/>in<sp/>this</highlight></codeline>
<codeline lineno="1269"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xConstTickCount<sp/>=<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref>;</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>the<sp/>tick<sp/>time<sp/>at<sp/>which<sp/>the<sp/>task<sp/>wants<sp/>to<sp/>wake.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTimeToWake<sp/>=<sp/>*pxPreviousWakeTime<sp/>+<sp/>xTimeIncrement;</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xConstTickCount<sp/>&lt;<sp/>*pxPreviousWakeTime<sp/>)</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>tick<sp/>count<sp/>has<sp/>overflowed<sp/>since<sp/>this<sp/>function<sp/>was</highlight></codeline>
<codeline lineno="1278"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lasted<sp/>called.<sp/><sp/>In<sp/>this<sp/>case<sp/>the<sp/>only<sp/>time<sp/>we<sp/>should<sp/>ever</highlight></codeline>
<codeline lineno="1279"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>actually<sp/>delay<sp/>is<sp/>if<sp/>the<sp/>wake<sp/>time<sp/>has<sp/>also<sp/>overflowed,</highlight></codeline>
<codeline lineno="1280"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>the<sp/>wake<sp/>time<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>tick<sp/>time.<sp/><sp/>When<sp/>this</highlight></codeline>
<codeline lineno="1281"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>the<sp/>case<sp/>it<sp/>is<sp/>as<sp/>if<sp/>neither<sp/>time<sp/>had<sp/>overflowed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>xTimeToWake<sp/>&lt;<sp/>*pxPreviousWakeTime<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>xTimeToWake<sp/>&gt;<sp/>xConstTickCount<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="1283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xShouldDelay<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>tick<sp/>time<sp/>has<sp/>not<sp/>overflowed.<sp/><sp/>In<sp/>this<sp/>case<sp/>we<sp/>will</highlight></codeline>
<codeline lineno="1294"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>delay<sp/>if<sp/>either<sp/>the<sp/>wake<sp/>time<sp/>has<sp/>overflowed,<sp/>and/or<sp/>the</highlight></codeline>
<codeline lineno="1295"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tick<sp/>time<sp/>is<sp/>less<sp/>than<sp/>the<sp/>wake<sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>xTimeToWake<sp/>&lt;<sp/>*pxPreviousWakeTime<sp/>)<sp/>||<sp/>(<sp/>xTimeToWake<sp/>&gt;<sp/>xConstTickCount<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="1297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xShouldDelay<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1305"><highlight class="normal"></highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Update<sp/>the<sp/>wake<sp/>time<sp/>ready<sp/>for<sp/>the<sp/>next<sp/>call.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pxPreviousWakeTime<sp/>=<sp/>xTimeToWake;</highlight></codeline>
<codeline lineno="1308"><highlight class="normal"></highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xShouldDelay<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac7bba9e806376061522f5cb2eef261c4" kindref="member">traceTASK_DELAY_UNTIL</ref>(<sp/>xTimeToWake<sp/>);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>prvAddCurrentTaskToDelayedList()<sp/>needs<sp/>the<sp/>block<sp/>time,<sp/>not</highlight></codeline>
<codeline lineno="1314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>time<sp/>to<sp/>wake,<sp/>so<sp/>subtract<sp/>the<sp/>current<sp/>tick<sp/>count.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" kindref="member">prvAddCurrentTaskToDelayedList</ref>(<sp/>xTimeToWake<sp/>-<sp/>xConstTickCount,<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>);</highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1322"><highlight class="normal"><sp/><sp/><sp/><sp/>xAlreadyYielded<sp/>=<sp/><ref refid="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Force<sp/>a<sp/>reschedule<sp/>if<sp/>xTaskResumeAll<sp/>has<sp/>not<sp/>already<sp/>done<sp/>so,<sp/>we<sp/>may</highlight></codeline>
<codeline lineno="1325"><highlight class="comment"><sp/><sp/><sp/><sp/>have<sp/>put<sp/>ourselves<sp/>to<sp/>sleep.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xAlreadyYielded<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1331"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"></highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskDelayUntil<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_vTaskDelay<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="normal"></highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1aa154068cecd7f31446a7a84af44ab1a3" kindref="member">vTaskDelay</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToDelay<sp/>)</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xAlreadyYielded<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1344"><highlight class="normal"></highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>delay<sp/>time<sp/>of<sp/>zero<sp/>just<sp/>forces<sp/>a<sp/>reschedule.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToDelay<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0U<sp/>)</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a084d232640bd1d04bcac0b8784417015" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1adb0c71969f4eed7a92f0f398dffb443d" kindref="member">traceTASK_DELAY</ref>();</highlight></codeline>
<codeline lineno="1352"><highlight class="normal"></highlight></codeline>
<codeline lineno="1353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>that<sp/>is<sp/>removed<sp/>from<sp/>the<sp/>event<sp/>list<sp/>while<sp/>the</highlight></codeline>
<codeline lineno="1354"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scheduler<sp/>is<sp/>suspended<sp/>will<sp/>not<sp/>get<sp/>placed<sp/>in<sp/>the<sp/>ready</highlight></codeline>
<codeline lineno="1355"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>or<sp/>removed<sp/>from<sp/>the<sp/>blocked<sp/>list<sp/>until<sp/>the<sp/>scheduler</highlight></codeline>
<codeline lineno="1356"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>resumed.</highlight></codeline>
<codeline lineno="1357"><highlight class="comment"></highlight></codeline>
<codeline lineno="1358"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>task<sp/>cannot<sp/>be<sp/>in<sp/>an<sp/>event<sp/>list<sp/>as<sp/>it<sp/>is<sp/>the<sp/>currently</highlight></codeline>
<codeline lineno="1359"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executing<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" kindref="member">prvAddCurrentTaskToDelayedList</ref>(<sp/>xTicksToDelay,<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xAlreadyYielded<sp/>=<sp/><ref refid="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Force<sp/>a<sp/>reschedule<sp/>if<sp/>xTaskResumeAll<sp/>has<sp/>not<sp/>already<sp/>done<sp/>so,<sp/>we<sp/>may</highlight></codeline>
<codeline lineno="1370"><highlight class="comment"><sp/><sp/><sp/><sp/>have<sp/>put<sp/>ourselves<sp/>to<sp/>sleep.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xAlreadyYielded<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1378"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1380"><highlight class="normal"></highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskDelay<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1383"><highlight class="normal"></highlight></codeline>
<codeline lineno="1384"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>(<sp/>INCLUDE_eTaskGetState<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>INCLUDE_xTaskAbortDelay<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1385"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892c" kindref="member">eTaskState</ref><sp/><ref refid="task_8h_1a954df77397d616484edb7c58c7760b10" kindref="member">eTaskGetState</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1388"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892c" kindref="member">eTaskState</ref><sp/>eReturn;</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"><sp/><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*<sp/>pxStateList,<sp/>*pxDelayedList,<sp/>*pxOverflowedDelayedList;</highlight></codeline>
<codeline lineno="1390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTCB<sp/>=<sp/>xTask;</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="1393"><highlight class="normal"></highlight></codeline>
<codeline lineno="1394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>==<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>)</highlight></codeline>
<codeline lineno="1395"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>calling<sp/>this<sp/>function<sp/>is<sp/>querying<sp/>its<sp/>own<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892ca83318c0d58e6b2bafaefa1be597fb8b6" kindref="member">eRunning</ref>;</highlight></codeline>
<codeline lineno="1398"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1400"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxStateList<sp/>=<sp/><ref refid="list_8h_1a7c4dff11380cd843ed0b6a8dc065916b" kindref="member">listLIST_ITEM_CONTAINER</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxDelayedList<sp/>=<sp/><ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref>;</highlight></codeline>
<codeline lineno="1405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxOverflowedDelayedList<sp/>=<sp/><ref refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" kindref="member">pxOverflowDelayedTaskList</ref>;</highlight></codeline>
<codeline lineno="1406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1408"><highlight class="normal"></highlight></codeline>
<codeline lineno="1409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStateList<sp/>==<sp/>pxDelayedList<sp/>)<sp/>||<sp/>(<sp/>pxStateList<sp/>==<sp/>pxOverflowedDelayedList<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="1410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>being<sp/>queried<sp/>is<sp/>referenced<sp/>from<sp/>one<sp/>of<sp/>the<sp/>Blocked</highlight></codeline>
<codeline lineno="1412"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lists.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af" kindref="member">eBlocked</ref>;</highlight></codeline>
<codeline lineno="1414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1415"><highlight class="normal"></highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxStateList<sp/>==<sp/>&amp;xSuspendedTaskList<sp/>)</highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>being<sp/>queried<sp/>is<sp/>referenced<sp/>from<sp/>the<sp/>suspended</highlight></codeline>
<codeline lineno="1420"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<sp/><sp/>Is<sp/>it<sp/>genuinely<sp/>suspended<sp/>or<sp/>is<sp/>it<sp/>blocked</highlight></codeline>
<codeline lineno="1421"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indefinitely?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a7c4dff11380cd843ed0b6a8dc065916b" kindref="member">listLIST_ITEM_CONTAINER</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1424"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>does<sp/>not<sp/>appear<sp/>on<sp/>the<sp/>event<sp/>list<sp/>item<sp/>of</highlight></codeline>
<codeline lineno="1427"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>and<sp/>of<sp/>the<sp/>RTOS<sp/>objects,<sp/>but<sp/>could<sp/>still<sp/>be<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1428"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocked<sp/>state<sp/>if<sp/>it<sp/>is<sp/>waiting<sp/>on<sp/>its<sp/>notification</highlight></codeline>
<codeline lineno="1429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rather<sp/>than<sp/>waiting<sp/>on<sp/>an<sp/>object.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;ucNotifyState<sp/>==<sp/><ref refid="tasks_8c_1acee66205293e253c13626e74798a0cf0" kindref="member">taskWAITING_NOTIFICATION</ref><sp/>)</highlight></codeline>
<codeline lineno="1431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af" kindref="member">eBlocked</ref>;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892caf35a900d49fdfc2502eefc68fdb70f72" kindref="member">eSuspended</ref>;</highlight></codeline>
<codeline lineno="1437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892caf35a900d49fdfc2502eefc68fdb70f72" kindref="member">eSuspended</ref>;</highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af" kindref="member">eBlocked</ref>;</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1450"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1451"><highlight class="normal"></highlight></codeline>
<codeline lineno="1452"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>INCLUDE_vTaskDelete<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxStateList<sp/>==<sp/>&amp;xTasksWaitingTermination<sp/>)<sp/>||<sp/>(<sp/>pxStateList<sp/>==<sp/>NULL<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="1454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>being<sp/>queried<sp/>is<sp/>referenced<sp/>from<sp/>the<sp/>deleted</highlight></codeline>
<codeline lineno="1456"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tasks<sp/>list,<sp/>or<sp/>it<sp/>is<sp/>not<sp/>referenced<sp/>from<sp/>any<sp/>lists<sp/>at</highlight></codeline>
<codeline lineno="1457"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>all.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cacef5c6e771d3a07f656e07a13a20ba35" kindref="member">eDeleted</ref>;</highlight></codeline>
<codeline lineno="1459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1460"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1461"><highlight class="normal"></highlight></codeline>
<codeline lineno="1462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*lint<sp/>!e525<sp/>Negative<sp/>indentation<sp/>is<sp/>intended<sp/>to<sp/>make<sp/>use<sp/>of<sp/>pre-processor<sp/>clearer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>task<sp/>is<sp/>not<sp/>in<sp/>any<sp/>other<sp/>state,<sp/>it<sp/>must<sp/>be<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ready<sp/>(including<sp/>pending<sp/>ready)<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892ca8570b65f331057b2cf92c504f0a2bc83" kindref="member">eReady</ref>;</highlight></codeline>
<codeline lineno="1467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1469"><highlight class="normal"></highlight></codeline>
<codeline lineno="1470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eReturn;</highlight></codeline>
<codeline lineno="1471"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>xTask<sp/>cannot<sp/>be<sp/>a<sp/>pointer<sp/>to<sp/>const<sp/>because<sp/>it<sp/>is<sp/>a<sp/>typedef.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1472"><highlight class="normal"></highlight></codeline>
<codeline lineno="1473"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_eTaskGetState<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1474"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1475"><highlight class="normal"></highlight></codeline>
<codeline lineno="1476"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_uxTaskPriorityGet<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1477"><highlight class="normal"></highlight></codeline>
<codeline lineno="1478"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="task_8h_1a18d1148c845f5c4bff3b9e5b2077e058" kindref="member">uxTaskPriorityGet</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)</highlight></codeline>
<codeline lineno="1479"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1480"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="1481"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxReturn;</highlight></codeline>
<codeline lineno="1482"><highlight class="normal"></highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>null<sp/>is<sp/>passed<sp/>in<sp/>here<sp/>then<sp/>it<sp/>is<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>task</highlight></codeline>
<codeline lineno="1486"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>that<sp/>called<sp/>uxTaskPriorityGet()<sp/>that<sp/>is<sp/>being<sp/>queried.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="1488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>;</highlight></codeline>
<codeline lineno="1489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="1493"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1494"><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_uxTaskPriorityGet<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1496"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1497"><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_uxTaskPriorityGet<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1499"><highlight class="normal"></highlight></codeline>
<codeline lineno="1500"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="task_8h_1a772bdcb1ae3cb58b0f12a172357f4a06" kindref="member">uxTaskPriorityGetFromISR</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)</highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1502"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxReturn,<sp/>uxSavedInterruptState;</highlight></codeline>
<codeline lineno="1504"><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RTOS<sp/>ports<sp/>that<sp/>support<sp/>interrupt<sp/>nesting<sp/>have<sp/>the<sp/>concept<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="1506"><highlight class="comment"><sp/><sp/><sp/><sp/>maximum<sp/>system<sp/>call<sp/>(or<sp/>maximum<sp/>API<sp/>call)<sp/>interrupt<sp/>priority.</highlight></codeline>
<codeline lineno="1507"><highlight class="comment"><sp/><sp/><sp/><sp/>Interrupts<sp/>that<sp/>are<sp/>above<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>priority<sp/>are<sp/>keep</highlight></codeline>
<codeline lineno="1508"><highlight class="comment"><sp/><sp/><sp/><sp/>permanently<sp/>enabled,<sp/>even<sp/>when<sp/>the<sp/>RTOS<sp/>kernel<sp/>is<sp/>in<sp/>a<sp/>critical<sp/>section,</highlight></codeline>
<codeline lineno="1509"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>cannot<sp/>make<sp/>any<sp/>calls<sp/>to<sp/>FreeRTOS<sp/>API<sp/>functions.<sp/><sp/>If<sp/>configASSERT()</highlight></codeline>
<codeline lineno="1510"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>defined<sp/>in<sp/>FreeRTOSConfig.h<sp/>then</highlight></codeline>
<codeline lineno="1511"><highlight class="comment"><sp/><sp/><sp/><sp/>portASSERT_IF_INTERRUPT_PRIORITY_INVALID()<sp/>will<sp/>result<sp/>in<sp/>an<sp/>assertion</highlight></codeline>
<codeline lineno="1512"><highlight class="comment"><sp/><sp/><sp/><sp/>failure<sp/>if<sp/>a<sp/>FreeRTOS<sp/>API<sp/>function<sp/>is<sp/>called<sp/>from<sp/>an<sp/>interrupt<sp/>that<sp/>has</highlight></codeline>
<codeline lineno="1513"><highlight class="comment"><sp/><sp/><sp/><sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>configured<sp/>maximum<sp/>system<sp/>call</highlight></codeline>
<codeline lineno="1514"><highlight class="comment"><sp/><sp/><sp/><sp/>priority.<sp/><sp/>Only<sp/>FreeRTOS<sp/>functions<sp/>that<sp/>end<sp/>in<sp/>FromISR<sp/>can<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="1515"><highlight class="comment"><sp/><sp/><sp/><sp/>from<sp/>interrupts<sp/>that<sp/>have<sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>at<sp/>or<sp/>(logically)</highlight></codeline>
<codeline lineno="1516"><highlight class="comment"><sp/><sp/><sp/><sp/>below<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>interrupt<sp/>priority.<sp/><sp/>FreeRTOS<sp/>maintains<sp/>a</highlight></codeline>
<codeline lineno="1517"><highlight class="comment"><sp/><sp/><sp/><sp/>separate<sp/>interrupt<sp/>safe<sp/>API<sp/>to<sp/>ensure<sp/>interrupt<sp/>entry<sp/>is<sp/>as<sp/>fast<sp/>and<sp/>as</highlight></codeline>
<codeline lineno="1518"><highlight class="comment"><sp/><sp/><sp/><sp/>simple<sp/>as<sp/>possible.<sp/><sp/>More<sp/>information<sp/>(albeit<sp/>Cortex-M<sp/>specific)<sp/>is</highlight></codeline>
<codeline lineno="1519"><highlight class="comment"><sp/><sp/><sp/><sp/>provided<sp/>on<sp/>the<sp/>following<sp/>link:</highlight></codeline>
<codeline lineno="1520"><highlight class="comment"><sp/><sp/><sp/><sp/>https://www.freertos.org/RTOS-Cortex-M3-M4.html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1521"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" kindref="member">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</ref>();</highlight></codeline>
<codeline lineno="1522"><highlight class="normal"></highlight></codeline>
<codeline lineno="1523"><highlight class="normal"><sp/><sp/><sp/><sp/>uxSavedInterruptState<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="1524"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>null<sp/>is<sp/>passed<sp/>in<sp/>here<sp/>then<sp/>it<sp/>is<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>calling</highlight></codeline>
<codeline lineno="1526"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>that<sp/>is<sp/>being<sp/>queried.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="1528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>;</highlight></codeline>
<codeline lineno="1529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptState<sp/>);</highlight></codeline>
<codeline lineno="1531"><highlight class="normal"></highlight></codeline>
<codeline lineno="1532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_uxTaskPriorityGet<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1536"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1537"><highlight class="normal"></highlight></codeline>
<codeline lineno="1538"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_vTaskPrioritySet<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1539"><highlight class="normal"></highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a1ee31be76e326e0644dbd6ac40a787b6" kindref="member">vTaskPrioritySet</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask,<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxNewPriority<sp/>)</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="1543"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxCurrentBasePriority,<sp/>uxPriorityUsedOnEntry;</highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xYieldRequired<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"></highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/>uxNewPriority<sp/>&lt;<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"></highlight></codeline>
<codeline lineno="1548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ensure<sp/>the<sp/>new<sp/>priority<sp/>is<sp/>valid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1549"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxNewPriority<sp/>&gt;=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>)</highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxNewPriority<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1U;</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1558"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>null<sp/>is<sp/>passed<sp/>in<sp/>here<sp/>then<sp/>it<sp/>is<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>calling</highlight></codeline>
<codeline lineno="1561"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>that<sp/>is<sp/>being<sp/>changed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"></highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1acec813ac5f0628aa108bede0cd8c329d" kindref="member">traceTASK_PRIORITY_SET</ref>(<sp/>pxTCB,<sp/>uxNewPriority<sp/>);</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"></highlight></codeline>
<codeline lineno="1566"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxCurrentBasePriority<sp/>=<sp/>pxTCB-&gt;uxBasePriority;</highlight></codeline>
<codeline lineno="1569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1570"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxCurrentBasePriority<sp/>=<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>;</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1575"><highlight class="normal"></highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxCurrentBasePriority<sp/>!=<sp/>uxNewPriority<sp/>)</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>priority<sp/>change<sp/>may<sp/>have<sp/>readied<sp/>a<sp/>task<sp/>of<sp/>higher</highlight></codeline>
<codeline lineno="1579"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priority<sp/>than<sp/>the<sp/>calling<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1580"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxNewPriority<sp/>&gt;<sp/>uxCurrentBasePriority<sp/>)</highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>!=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>)</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>priority<sp/>of<sp/>a<sp/>task<sp/>other<sp/>than<sp/>the<sp/>currently</highlight></codeline>
<codeline lineno="1585"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>running<sp/>task<sp/>is<sp/>being<sp/>raised.<sp/><sp/>Is<sp/>the<sp/>priority<sp/>being</highlight></codeline>
<codeline lineno="1586"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raised<sp/>above<sp/>that<sp/>of<sp/>the<sp/>running<sp/>task?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxNewPriority<sp/>&gt;=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xYieldRequired<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>priority<sp/>of<sp/>the<sp/>running<sp/>task<sp/>is<sp/>being<sp/>raised,</highlight></codeline>
<codeline lineno="1599"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>the<sp/>running<sp/>task<sp/>must<sp/>already<sp/>be<sp/>the<sp/>highest</highlight></codeline>
<codeline lineno="1600"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priority<sp/>task<sp/>able<sp/>to<sp/>run<sp/>so<sp/>no<sp/>yield<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>==<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>)</highlight></codeline>
<codeline lineno="1604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Setting<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>running<sp/>task<sp/>down<sp/>means</highlight></codeline>
<codeline lineno="1606"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>there<sp/>may<sp/>now<sp/>be<sp/>another<sp/>task<sp/>of<sp/>higher<sp/>priority<sp/>that</highlight></codeline>
<codeline lineno="1607"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>ready<sp/>to<sp/>execute.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xYieldRequired<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Setting<sp/>the<sp/>priority<sp/>of<sp/>any<sp/>other<sp/>task<sp/>down<sp/>does<sp/>not</highlight></codeline>
<codeline lineno="1613"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>require<sp/>a<sp/>yield<sp/>as<sp/>the<sp/>running<sp/>task<sp/>must<sp/>be<sp/>above<sp/>the</highlight></codeline>
<codeline lineno="1614"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>priority<sp/>of<sp/>the<sp/>task<sp/>being<sp/>modified.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"></highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remember<sp/>the<sp/>ready<sp/>list<sp/>the<sp/>task<sp/>might<sp/>be<sp/>referenced<sp/>from</highlight></codeline>
<codeline lineno="1618"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>before<sp/>its<sp/>uxPriority<sp/>member<sp/>is<sp/>changed<sp/>so<sp/>the</highlight></codeline>
<codeline lineno="1619"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskRESET_READY_PRIORITY()<sp/>macro<sp/>can<sp/>function<sp/>correctly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxPriorityUsedOnEntry<sp/>=<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"></highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>change<sp/>the<sp/>priority<sp/>being<sp/>used<sp/>if<sp/>the<sp/>task<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="1625"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currently<sp/>using<sp/>an<sp/>inherited<sp/>priority.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;uxBasePriority<sp/>==<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>=<sp/>uxNewPriority;</highlight></codeline>
<codeline lineno="1629"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1634"><highlight class="normal"></highlight></codeline>
<codeline lineno="1635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>base<sp/>priority<sp/>gets<sp/>set<sp/>whatever.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;uxBasePriority<sp/>=<sp/>uxNewPriority;</highlight></codeline>
<codeline lineno="1637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>=<sp/>uxNewPriority;</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>reset<sp/>the<sp/>event<sp/>list<sp/>item<sp/>value<sp/>if<sp/>the<sp/>value<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="1645"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>being<sp/>used<sp/>for<sp/>anything<sp/>else.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/><ref refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" kindref="member">listGET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>&amp;<sp/><ref refid="tasks_8c_1a3e36f3eda563e810a24ab36ee7c978d4" kindref="member">taskEVENT_LIST_ITEM_VALUE_IN_USE</ref><sp/>)<sp/>==<sp/>0UL<sp/>)</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" kindref="member">listSET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>),<sp/>(<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>uxNewPriority<sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>task<sp/>is<sp/>in<sp/>the<sp/>blocked<sp/>or<sp/>suspended<sp/>list<sp/>we<sp/>need<sp/>do</highlight></codeline>
<codeline lineno="1656"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nothing<sp/>more<sp/>than<sp/>change<sp/>its<sp/>priority<sp/>variable.<sp/>However,<sp/>if</highlight></codeline>
<codeline lineno="1657"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>task<sp/>is<sp/>in<sp/>a<sp/>ready<sp/>list<sp/>it<sp/>needs<sp/>to<sp/>be<sp/>removed<sp/>and<sp/>placed</highlight></codeline>
<codeline lineno="1658"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>the<sp/>list<sp/>appropriate<sp/>to<sp/>its<sp/>new<sp/>priority.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a60302b468d21f8c53d13987372acb8fa" kindref="member">listIS_CONTAINED_WITHIN</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[<sp/>uxPriorityUsedOnEntry<sp/>]<sp/>),<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>is<sp/>currently<sp/>in<sp/>its<sp/>ready<sp/>list<sp/>-<sp/>remove<sp/>before</highlight></codeline>
<codeline lineno="1662"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>adding<sp/>it<sp/>to<sp/>it&apos;s<sp/>new<sp/>ready<sp/>list.<sp/><sp/>As<sp/>we<sp/>are<sp/>in<sp/>a<sp/>critical</highlight></codeline>
<codeline lineno="1663"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>section<sp/>we<sp/>can<sp/>do<sp/>this<sp/>even<sp/>if<sp/>the<sp/>scheduler<sp/>is<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>)<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>known<sp/>that<sp/>the<sp/>task<sp/>is<sp/>in<sp/>its<sp/>ready<sp/>list<sp/>so</highlight></codeline>
<codeline lineno="1667"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>check<sp/>again<sp/>and<sp/>the<sp/>port<sp/>level</highlight></codeline>
<codeline lineno="1668"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset<sp/>macro<sp/>can<sp/>be<sp/>called<sp/>directly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a27f854590fc6fcb8b4c7955b5f13b98e" kindref="member">portRESET_READY_PRIORITY</ref>(<sp/>uxPriorityUsedOnEntry,<sp/><ref refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" kindref="member">uxTopReadyPriority</ref><sp/>);</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xYieldRequired<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acd0c920e40647de517ac633965b52273" kindref="member">taskYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"></highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>compiler<sp/>warning<sp/>about<sp/>unused<sp/>variables<sp/>when<sp/>the<sp/>port</highlight></codeline>
<codeline lineno="1692"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>optimised<sp/>task<sp/>selection<sp/>is<sp/>not<sp/>being<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>uxPriorityUsedOnEntry;</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"></highlight></codeline>
<codeline lineno="1699"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskPrioritySet<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1700"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1702"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1703"><highlight class="normal"></highlight></codeline>
<codeline lineno="1704"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a84d4e660b04630be2939d91b3c2412f8" kindref="member">vTaskSuspend</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskToSuspend<sp/>)</highlight></codeline>
<codeline lineno="1705"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"></highlight></codeline>
<codeline lineno="1708"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1709"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>null<sp/>is<sp/>passed<sp/>in<sp/>here<sp/>then<sp/>it<sp/>is<sp/>the<sp/>running<sp/>task<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="1711"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>being<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTaskToSuspend<sp/>);</highlight></codeline>
<codeline lineno="1713"><highlight class="normal"></highlight></codeline>
<codeline lineno="1714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac48891d4d553ea9acbc660d2ebd2ffd7" kindref="member">traceTASK_SUSPEND</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="1715"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>task<sp/>from<sp/>the<sp/>ready/delayed<sp/>list<sp/>and<sp/>place<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="1717"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>suspended<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>)<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a9517fc40d713aff9dd8182223948f9c8" kindref="member">taskRESET_READY_PRIORITY</ref>(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>);</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"></highlight></codeline>
<codeline lineno="1727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>the<sp/>task<sp/>waiting<sp/>on<sp/>an<sp/>event<sp/>also?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a7c4dff11380cd843ed0b6a8dc065916b" kindref="member">listLIST_ITEM_CONTAINER</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1736"><highlight class="normal"></highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" kindref="member">vListInsertEnd</ref>(<sp/>&amp;xSuspendedTaskList,<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;ucNotifyState<sp/>==<sp/><ref refid="tasks_8c_1acee66205293e253c13626e74798a0cf0" kindref="member">taskWAITING_NOTIFICATION</ref><sp/>)</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>was<sp/>blocked<sp/>to<sp/>wait<sp/>for<sp/>a<sp/>notification,<sp/>but<sp/>is</highlight></codeline>
<codeline lineno="1744"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>now<sp/>suspended,<sp/>so<sp/>no<sp/>notification<sp/>was<sp/>received.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ucNotifyState<sp/>=<sp/><ref refid="tasks_8c_1a4f2f023143b2cd2367a441e104f8cf2c" kindref="member">taskNOT_WAITING_NOTIFICATION</ref>;</highlight></codeline>
<codeline lineno="1746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1748"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1751"><highlight class="normal"></highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" kindref="member">xSchedulerRunning</ref><sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1753"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>next<sp/>expected<sp/>unblock<sp/>time<sp/>in<sp/>case<sp/>it<sp/>referred<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="1755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>that<sp/>is<sp/>now<sp/>in<sp/>the<sp/>Suspended<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" kindref="member">prvResetNextTaskUnblockTime</ref>();</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1761"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1762"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"></highlight></codeline>
<codeline lineno="1767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>==<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>)</highlight></codeline>
<codeline lineno="1768"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" kindref="member">xSchedulerRunning</ref><sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>current<sp/>task<sp/>has<sp/>just<sp/>been<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="1774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>scheduler<sp/>is<sp/>not<sp/>running,<sp/>but<sp/>the<sp/>task<sp/>that<sp/>was<sp/>pointed</highlight></codeline>
<codeline lineno="1778"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>by<sp/>pxCurrentTCB<sp/>has<sp/>just<sp/>been<sp/>suspended<sp/>and<sp/>pxCurrentTCB</highlight></codeline>
<codeline lineno="1779"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>be<sp/>adjusted<sp/>to<sp/>point<sp/>to<sp/>a<sp/>different<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" kindref="member">listCURRENT_LIST_LENGTH</ref>(<sp/>&amp;xSuspendedTaskList<sp/>)<sp/>==<sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref><sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e931<sp/>Right<sp/>has<sp/>no<sp/>side<sp/>effect,<sp/>just<sp/>volatile.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>No<sp/>other<sp/>tasks<sp/>are<sp/>ready,<sp/>so<sp/>set<sp/>pxCurrentTCB<sp/>back<sp/>to</highlight></codeline>
<codeline lineno="1783"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NULL<sp/>so<sp/>when<sp/>the<sp/>next<sp/>task<sp/>is<sp/>created<sp/>pxCurrentTCB<sp/>will</highlight></codeline>
<codeline lineno="1784"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>set<sp/>to<sp/>point<sp/>to<sp/>it<sp/>no<sp/>matter<sp/>what<sp/>its<sp/>relative<sp/>priority</highlight></codeline>
<codeline lineno="1785"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a9c86137bc3c1cbffc39fff22627cb885" kindref="member">vTaskSwitchContext</ref>();</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1793"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1794"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1795"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1799"><highlight class="normal"></highlight></codeline>
<codeline lineno="1800"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskSuspend<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1801"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"></highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"></highlight></codeline>
<codeline lineno="1805"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>prvTaskIsTaskSuspended(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)</highlight></codeline>
<codeline lineno="1806"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1807"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1808"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTCB<sp/>=<sp/>xTask;</highlight></codeline>
<codeline lineno="1809"><highlight class="normal"></highlight></codeline>
<codeline lineno="1810"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Accesses<sp/>xPendingReadyList<sp/>so<sp/>must<sp/>be<sp/>called<sp/>from<sp/>a<sp/>critical</highlight></codeline>
<codeline lineno="1811"><highlight class="comment"><sp/><sp/><sp/><sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"></highlight></codeline>
<codeline lineno="1813"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>does<sp/>not<sp/>make<sp/>sense<sp/>to<sp/>check<sp/>if<sp/>the<sp/>calling<sp/>task<sp/>is<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1814"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="1815"><highlight class="normal"></highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>the<sp/>task<sp/>being<sp/>resumed<sp/>actually<sp/>in<sp/>the<sp/>suspended<sp/>list?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a60302b468d21f8c53d13987372acb8fa" kindref="member">listIS_CONTAINED_WITHIN</ref>(<sp/>&amp;xSuspendedTaskList,<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Has<sp/>the<sp/>task<sp/>already<sp/>been<sp/>resumed<sp/>from<sp/>within<sp/>an<sp/>ISR?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a60302b468d21f8c53d13987372acb8fa" kindref="member">listIS_CONTAINED_WITHIN</ref>(<sp/>&amp;<ref refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" kindref="member">xPendingReadyList</ref>,<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>it<sp/>in<sp/>the<sp/>suspended<sp/>list<sp/>because<sp/>it<sp/>is<sp/>in<sp/>the<sp/>Suspended</highlight></codeline>
<codeline lineno="1823"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state,<sp/>or<sp/>because<sp/>is<sp/>is<sp/>blocked<sp/>with<sp/>no<sp/>timeout?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a60302b468d21f8c53d13987372acb8fa" kindref="member">listIS_CONTAINED_WITHIN</ref>(<sp/>NULL,<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e961.<sp/><sp/>The<sp/>cast<sp/>is<sp/>only<sp/>redundant<sp/>when<sp/>NULL<sp/>is<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1837"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1839"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1841"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1842"><highlight class="normal"></highlight></codeline>
<codeline lineno="1843"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="1844"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="comment">/*lint<sp/>!e818<sp/>xTask<sp/>cannot<sp/>be<sp/>a<sp/>pointer<sp/>to<sp/>const<sp/>because<sp/>it<sp/>is<sp/>a<sp/>typedef.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1845"><highlight class="normal"></highlight></codeline>
<codeline lineno="1846"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskSuspend<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1847"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1848"><highlight class="normal"></highlight></codeline>
<codeline lineno="1849"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal"></highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a84a1584f29fb7736a1aa72ad5b3e9b44" kindref="member">vTaskResume</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskToResume<sp/>)</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTCB<sp/>=<sp/>xTaskToResume;</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>does<sp/>not<sp/>make<sp/>sense<sp/>to<sp/>resume<sp/>the<sp/>calling<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1856"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xTaskToResume<sp/>);</highlight></codeline>
<codeline lineno="1857"><highlight class="normal"></highlight></codeline>
<codeline lineno="1858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>parameter<sp/>cannot<sp/>be<sp/>NULL<sp/>as<sp/>it<sp/>is<sp/>impossible<sp/>to<sp/>resume<sp/>the</highlight></codeline>
<codeline lineno="1859"><highlight class="comment"><sp/><sp/><sp/><sp/>currently<sp/>executing<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1860"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>pxTCB<sp/>!=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>pxTCB<sp/>!=<sp/>NULL<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="1861"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1864"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>prvTaskIsTaskSuspended(<sp/>pxTCB<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a4f21b0c170fa8675ee2dbf70141695a2" kindref="member">traceTASK_RESUME</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="1867"><highlight class="normal"></highlight></codeline>
<codeline lineno="1868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>ready<sp/>list<sp/>can<sp/>be<sp/>accessed<sp/>even<sp/>if<sp/>the<sp/>scheduler<sp/>is</highlight></codeline>
<codeline lineno="1869"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suspended<sp/>because<sp/>this<sp/>is<sp/>inside<sp/>a<sp/>critical<sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/><sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="1872"><highlight class="normal"></highlight></codeline>
<codeline lineno="1873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>higher<sp/>priority<sp/>task<sp/>may<sp/>have<sp/>just<sp/>been<sp/>resumed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&gt;=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="1875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>yield<sp/>may<sp/>not<sp/>cause<sp/>the<sp/>task<sp/>just<sp/>resumed<sp/>to<sp/>run,</highlight></codeline>
<codeline lineno="1877"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>will<sp/>leave<sp/>the<sp/>lists<sp/>in<sp/>the<sp/>correct<sp/>state<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="1878"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>yield.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acd0c920e40647de517ac633965b52273" kindref="member">taskYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="1880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1886"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1887"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1888"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="1892"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1893"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1894"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1895"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1896"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1897"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1898"><highlight class="normal"></highlight></codeline>
<codeline lineno="1899"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskSuspend<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1900"><highlight class="normal"></highlight></codeline>
<codeline lineno="1901"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1902"><highlight class="normal"></highlight></codeline>
<codeline lineno="1903"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>INCLUDE_xTaskResumeFromISR<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1904"><highlight class="normal"></highlight></codeline>
<codeline lineno="1905"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="task_8h_1aefbfd37c0661c3062fafd7334bff9aed" kindref="member">xTaskResumeFromISR</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskToResume<sp/>)</highlight></codeline>
<codeline lineno="1906"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1907"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xYieldRequired<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="1908"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTCB<sp/>=<sp/>xTaskToResume;</highlight></codeline>
<codeline lineno="1909"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="1910"><highlight class="normal"></highlight></codeline>
<codeline lineno="1911"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xTaskToResume<sp/>);</highlight></codeline>
<codeline lineno="1912"><highlight class="normal"></highlight></codeline>
<codeline lineno="1913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RTOS<sp/>ports<sp/>that<sp/>support<sp/>interrupt<sp/>nesting<sp/>have<sp/>the<sp/>concept<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="1914"><highlight class="comment"><sp/><sp/><sp/><sp/>maximum<sp/>system<sp/>call<sp/>(or<sp/>maximum<sp/>API<sp/>call)<sp/>interrupt<sp/>priority.</highlight></codeline>
<codeline lineno="1915"><highlight class="comment"><sp/><sp/><sp/><sp/>Interrupts<sp/>that<sp/>are<sp/>above<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>priority<sp/>are<sp/>keep</highlight></codeline>
<codeline lineno="1916"><highlight class="comment"><sp/><sp/><sp/><sp/>permanently<sp/>enabled,<sp/>even<sp/>when<sp/>the<sp/>RTOS<sp/>kernel<sp/>is<sp/>in<sp/>a<sp/>critical<sp/>section,</highlight></codeline>
<codeline lineno="1917"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>cannot<sp/>make<sp/>any<sp/>calls<sp/>to<sp/>FreeRTOS<sp/>API<sp/>functions.<sp/><sp/>If<sp/>configASSERT()</highlight></codeline>
<codeline lineno="1918"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>defined<sp/>in<sp/>FreeRTOSConfig.h<sp/>then</highlight></codeline>
<codeline lineno="1919"><highlight class="comment"><sp/><sp/><sp/><sp/>portASSERT_IF_INTERRUPT_PRIORITY_INVALID()<sp/>will<sp/>result<sp/>in<sp/>an<sp/>assertion</highlight></codeline>
<codeline lineno="1920"><highlight class="comment"><sp/><sp/><sp/><sp/>failure<sp/>if<sp/>a<sp/>FreeRTOS<sp/>API<sp/>function<sp/>is<sp/>called<sp/>from<sp/>an<sp/>interrupt<sp/>that<sp/>has</highlight></codeline>
<codeline lineno="1921"><highlight class="comment"><sp/><sp/><sp/><sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>configured<sp/>maximum<sp/>system<sp/>call</highlight></codeline>
<codeline lineno="1922"><highlight class="comment"><sp/><sp/><sp/><sp/>priority.<sp/><sp/>Only<sp/>FreeRTOS<sp/>functions<sp/>that<sp/>end<sp/>in<sp/>FromISR<sp/>can<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="1923"><highlight class="comment"><sp/><sp/><sp/><sp/>from<sp/>interrupts<sp/>that<sp/>have<sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>at<sp/>or<sp/>(logically)</highlight></codeline>
<codeline lineno="1924"><highlight class="comment"><sp/><sp/><sp/><sp/>below<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>interrupt<sp/>priority.<sp/><sp/>FreeRTOS<sp/>maintains<sp/>a</highlight></codeline>
<codeline lineno="1925"><highlight class="comment"><sp/><sp/><sp/><sp/>separate<sp/>interrupt<sp/>safe<sp/>API<sp/>to<sp/>ensure<sp/>interrupt<sp/>entry<sp/>is<sp/>as<sp/>fast<sp/>and<sp/>as</highlight></codeline>
<codeline lineno="1926"><highlight class="comment"><sp/><sp/><sp/><sp/>simple<sp/>as<sp/>possible.<sp/><sp/>More<sp/>information<sp/>(albeit<sp/>Cortex-M<sp/>specific)<sp/>is</highlight></codeline>
<codeline lineno="1927"><highlight class="comment"><sp/><sp/><sp/><sp/>provided<sp/>on<sp/>the<sp/>following<sp/>link:</highlight></codeline>
<codeline lineno="1928"><highlight class="comment"><sp/><sp/><sp/><sp/>https://www.freertos.org/RTOS-Cortex-M3-M4.html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1929"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" kindref="member">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</ref>();</highlight></codeline>
<codeline lineno="1930"><highlight class="normal"></highlight></codeline>
<codeline lineno="1931"><highlight class="normal"><sp/><sp/><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="1932"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>prvTaskIsTaskSuspended(<sp/>pxTCB<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a7b4afafa82e9c80d0dc43cc22108d248" kindref="member">traceTASK_RESUME_FROM_ISR</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="1936"><highlight class="normal"></highlight></codeline>
<codeline lineno="1937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>the<sp/>ready<sp/>lists<sp/>can<sp/>be<sp/>accessed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="1939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Ready<sp/>lists<sp/>can<sp/>be<sp/>accessed<sp/>so<sp/>move<sp/>the<sp/>task<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="1941"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>suspended<sp/>list<sp/>to<sp/>the<sp/>ready<sp/>list<sp/>directly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&gt;=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="1943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xYieldRequired<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="1945"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1950"><highlight class="normal"></highlight></codeline>
<codeline lineno="1951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="1953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>delayed<sp/>or<sp/>ready<sp/>lists<sp/>cannot<sp/>be<sp/>accessed<sp/>so<sp/>the<sp/>task</highlight></codeline>
<codeline lineno="1957"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>held<sp/>in<sp/>the<sp/>pending<sp/>ready<sp/>list<sp/>until<sp/>the<sp/>scheduler<sp/>is</highlight></codeline>
<codeline lineno="1958"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unsuspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" kindref="member">vListInsertEnd</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" kindref="member">xPendingReadyList</ref><sp/>),<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="1960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="1965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1966"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1967"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="1968"><highlight class="normal"></highlight></codeline>
<codeline lineno="1969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xYieldRequired;</highlight></codeline>
<codeline lineno="1970"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1971"><highlight class="normal"></highlight></codeline>
<codeline lineno="1972"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>(<sp/>INCLUDE_xTaskResumeFromISR<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1973"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1974" refid="task_8h_1aaf9dca1065c60abdeb309d56ab7293cb" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="1975"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a598661cdd2a6af95a077245d11e3d142" kindref="member">vTaskStartScheduler</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="1976"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1977"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="1978"><highlight class="normal"></highlight></codeline>
<codeline lineno="1979"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>idle<sp/>task<sp/>at<sp/>the<sp/>lowest<sp/>priority.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1980"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1981"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="1982"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structx_s_t_a_t_i_c___t_c_b" kindref="compound">StaticTask_t</ref><sp/>*pxIdleTaskTCBBuffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1983"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>*pxIdleTaskStackBuffer<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="1984"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>ulIdleTaskStackSize;</highlight></codeline>
<codeline lineno="1985"><highlight class="normal"></highlight></codeline>
<codeline lineno="1986"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>Idle<sp/>task<sp/>is<sp/>created<sp/>using<sp/>user<sp/>provided<sp/>RAM<sp/>-<sp/>obtain<sp/>the</highlight></codeline>
<codeline lineno="1987"><highlight class="comment"><sp/><sp/><sp/><sp/>address<sp/>of<sp/>the<sp/>RAM<sp/>then<sp/>create<sp/>the<sp/>idle<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1988"><highlight class="normal"><sp/><sp/><sp/><sp/>vApplicationGetIdleTaskMemory(<sp/>&amp;pxIdleTaskTCBBuffer,<sp/>&amp;pxIdleTaskStackBuffer,<sp/>&amp;ulIdleTaskStackSize<sp/>);</highlight></codeline>
<codeline lineno="1989"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ac90c8a23419d8fa71919e020c433f1a6" kindref="member">xIdleTaskHandle</ref><sp/>=<sp/>xTaskCreateStatic(<sp/><sp/>prvIdleTask,</highlight></codeline>
<codeline lineno="1990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1aa637612832bcdd420acc9e6cc4361071" kindref="member">configIDLE_TASK_NAME</ref>,</highlight></codeline>
<codeline lineno="1991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ulIdleTaskStackSize,</highlight></codeline>
<codeline lineno="1992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>NULL,<sp/></highlight><highlight class="comment">/*lint<sp/>!e961.<sp/><sp/>The<sp/>cast<sp/>is<sp/>not<sp/>redundant<sp/>for<sp/>all<sp/>compilers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a27b7e11718b2ec5b5217e60f3b9e8aec" kindref="member">portPRIVILEGE_BIT</ref>,<sp/></highlight><highlight class="comment">/*<sp/>In<sp/>effect<sp/>(<sp/>tskIDLE_PRIORITY<sp/>|<sp/>portPRIVILEGE_BIT<sp/>),<sp/>but<sp/>tskIDLE_PRIORITY<sp/>is<sp/>zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxIdleTaskStackBuffer,</highlight></codeline>
<codeline lineno="1995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxIdleTaskTCBBuffer<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception,<sp/>justified<sp/>as<sp/>it<sp/>is<sp/>not<sp/>a<sp/>redundant<sp/>explicit<sp/>cast<sp/>to<sp/>all<sp/>supported<sp/>compilers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1996"><highlight class="normal"></highlight></codeline>
<codeline lineno="1997"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1ac90c8a23419d8fa71919e020c433f1a6" kindref="member">xIdleTaskHandle</ref><sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="1998"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="2000"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2001"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2002"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="2004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2005"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2006"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2007"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>Idle<sp/>task<sp/>is<sp/>being<sp/>created<sp/>using<sp/>dynamically<sp/>allocated<sp/>RAM.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2009"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>xTaskCreate(<sp/><sp/>prvIdleTask,</highlight></codeline>
<codeline lineno="2010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1aa637612832bcdd420acc9e6cc4361071" kindref="member">configIDLE_TASK_NAME</ref>,</highlight></codeline>
<codeline lineno="2011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a6c534a6cf8a00528fe0be42083484f9a" kindref="member">configMINIMAL_STACK_SIZE</ref>,</highlight></codeline>
<codeline lineno="2012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>NULL,</highlight></codeline>
<codeline lineno="2013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a27b7e11718b2ec5b5217e60f3b9e8aec" kindref="member">portPRIVILEGE_BIT</ref>,<sp/></highlight><highlight class="comment">/*<sp/>In<sp/>effect<sp/>(<sp/>tskIDLE_PRIORITY<sp/>|<sp/>portPRIVILEGE_BIT<sp/>),<sp/>but<sp/>tskIDLE_PRIORITY<sp/>is<sp/>zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;<ref refid="tasks_8c_1ac90c8a23419d8fa71919e020c433f1a6" kindref="member">xIdleTaskHandle</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception,<sp/>justified<sp/>as<sp/>it<sp/>is<sp/>not<sp/>a<sp/>redundant<sp/>explicit<sp/>cast<sp/>to<sp/>all<sp/>supported<sp/>compilers.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2015"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2016"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2017"><highlight class="normal"></highlight></codeline>
<codeline lineno="2018"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2019"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2020"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xReturn<sp/>==<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref><sp/>)</highlight></codeline>
<codeline lineno="2021"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="timers_8h_1af777ab3e9ac04abd5dd21be739fa1321" kindref="member">xTimerCreateTimerTask</ref>();</highlight></codeline>
<codeline lineno="2023"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2025"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2026"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2027"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2028"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2029"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TIMERS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2030"><highlight class="normal"></highlight></codeline>
<codeline lineno="2031"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xReturn<sp/>==<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref><sp/>)</highlight></codeline>
<codeline lineno="2032"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2033"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>freertos_tasks_c_additions_init()<sp/>should<sp/>only<sp/>be<sp/>called<sp/>if<sp/>the<sp/>user</highlight></codeline>
<codeline lineno="2034"><highlight class="comment"><sp/><sp/><sp/><sp/>definable<sp/>macro<sp/>FREERTOS_TASKS_C_ADDITIONS_INIT()<sp/>is<sp/>defined,<sp/>as<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="2035"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>only<sp/>macro<sp/>called<sp/>by<sp/>the<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2036"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#ifdef<sp/>FREERTOS_TASKS_C_ADDITIONS_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2037"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>freertos_tasks_c_additions_init();</highlight></codeline>
<codeline lineno="2039"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2040"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2041"><highlight class="normal"></highlight></codeline>
<codeline lineno="2042"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Interrupts<sp/>are<sp/>turned<sp/>off<sp/>here,<sp/>to<sp/>ensure<sp/>a<sp/>tick<sp/>does<sp/>not<sp/>occur</highlight></codeline>
<codeline lineno="2043"><highlight class="comment"><sp/><sp/><sp/><sp/>before<sp/>or<sp/>during<sp/>the<sp/>call<sp/>to<sp/>xPortStartScheduler().<sp/><sp/>The<sp/>stacks<sp/>of</highlight></codeline>
<codeline lineno="2044"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>created<sp/>tasks<sp/>contain<sp/>a<sp/>status<sp/>word<sp/>with<sp/>interrupts<sp/>switched<sp/>on</highlight></codeline>
<codeline lineno="2045"><highlight class="comment"><sp/><sp/><sp/><sp/>so<sp/>interrupts<sp/>will<sp/>automatically<sp/>get<sp/>re-enabled<sp/>when<sp/>the<sp/>first<sp/>task</highlight></codeline>
<codeline lineno="2046"><highlight class="comment"><sp/><sp/><sp/><sp/>starts<sp/>to<sp/>run.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2047"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a6e3d10ee1a0734a647ca192523c2cfc1" kindref="member">portDISABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2048"><highlight class="normal"></highlight></codeline>
<codeline lineno="2049"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_NEWLIB_REENTRANT<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2050"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Switch<sp/>Newlib&apos;s<sp/>_impure_ptr<sp/>variable<sp/>to<sp/>point<sp/>to<sp/>the<sp/>_reent</highlight></codeline>
<codeline lineno="2052"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>structure<sp/>specific<sp/>to<sp/>the<sp/>task<sp/>that<sp/>will<sp/>run<sp/>first.</highlight></codeline>
<codeline lineno="2053"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>third<sp/>party<sp/>link<sp/>http://www.nadler.com/embedded/newlibAndFreeRTOS.html</highlight></codeline>
<codeline lineno="2054"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>additional<sp/>information.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_impure_ptr<sp/>=<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;xNewLib_reent<sp/>);</highlight></codeline>
<codeline lineno="2056"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2057"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_NEWLIB_REENTRANT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2058"><highlight class="normal"></highlight></codeline>
<codeline lineno="2059"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>=<sp/><ref refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" kindref="member">portMAX_DELAY</ref>;</highlight></codeline>
<codeline lineno="2060"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" kindref="member">xSchedulerRunning</ref><sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2061"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref><sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_8h_1ae52c1acd13b26e8758dc66b60b0e3417" kindref="member">configINITIAL_TICK_COUNT</ref>;</highlight></codeline>
<codeline lineno="2062"><highlight class="normal"></highlight></codeline>
<codeline lineno="2063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>configGENERATE_RUN_TIME_STATS<sp/>is<sp/>defined<sp/>then<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="2064"><highlight class="comment"><sp/><sp/><sp/><sp/>macro<sp/>must<sp/>be<sp/>defined<sp/>to<sp/>configure<sp/>the<sp/>timer/counter<sp/>used<sp/>to<sp/>generate</highlight></codeline>
<codeline lineno="2065"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>run<sp/>time<sp/>counter<sp/>time<sp/>base.<sp/><sp/><sp/>NOTE:<sp/><sp/>If<sp/>configGENERATE_RUN_TIME_STATS</highlight></codeline>
<codeline lineno="2066"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>set<sp/>to<sp/>0<sp/>and<sp/>the<sp/>following<sp/>line<sp/>fails<sp/>to<sp/>build<sp/>then<sp/>ensure<sp/>you<sp/>do<sp/>not</highlight></codeline>
<codeline lineno="2067"><highlight class="comment"><sp/><sp/><sp/><sp/>have<sp/>portCONFIGURE_TIMER_FOR_RUN_TIME_STATS()<sp/>defined<sp/>in<sp/>your</highlight></codeline>
<codeline lineno="2068"><highlight class="comment"><sp/><sp/><sp/><sp/>FreeRTOSConfig.h<sp/>file.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2069"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a727939bcdb98501e0eba0ec8a1841e1b" kindref="member">portCONFIGURE_TIMER_FOR_RUN_TIME_STATS</ref>();</highlight></codeline>
<codeline lineno="2070"><highlight class="normal"></highlight></codeline>
<codeline lineno="2071"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2f813fe80d3519a396a9f2bb7cc7e820" kindref="member">traceTASK_SWITCHED_IN</ref>();</highlight></codeline>
<codeline lineno="2072"><highlight class="normal"></highlight></codeline>
<codeline lineno="2073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Setting<sp/>up<sp/>the<sp/>timer<sp/>tick<sp/>is<sp/>hardware<sp/>specific<sp/>and<sp/>thus<sp/>in<sp/>the</highlight></codeline>
<codeline lineno="2074"><highlight class="comment"><sp/><sp/><sp/><sp/>portable<sp/>interface.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2075"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="portable_8h_1ade5a8c6666e7413a0355cc252029c5c6" kindref="member">xPortStartScheduler</ref>()<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2076"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>not<sp/>reach<sp/>here<sp/>as<sp/>if<sp/>the<sp/>scheduler<sp/>is<sp/>running<sp/>the</highlight></codeline>
<codeline lineno="2078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>will<sp/>not<sp/>return.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2079"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2080"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2081"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>only<sp/>reach<sp/>here<sp/>if<sp/>a<sp/>task<sp/>calls<sp/>xTaskEndScheduler().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2083"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2084"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2085"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2086"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2087"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>line<sp/>will<sp/>only<sp/>be<sp/>reached<sp/>if<sp/>the<sp/>kernel<sp/>could<sp/>not<sp/>be<sp/>started,</highlight></codeline>
<codeline lineno="2088"><highlight class="comment"><sp/><sp/><sp/><sp/>because<sp/>there<sp/>was<sp/>not<sp/>enough<sp/>FreeRTOS<sp/>heap<sp/>to<sp/>create<sp/>the<sp/>idle<sp/>task</highlight></codeline>
<codeline lineno="2089"><highlight class="comment"><sp/><sp/><sp/><sp/>or<sp/>the<sp/>timer<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2090"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xReturn<sp/>!=<sp/><ref refid="projdefs_8h_1a0b024e12cbca6f5018f5f1a43818b03d" kindref="member">errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY</ref><sp/>);</highlight></codeline>
<codeline lineno="2091"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2092"><highlight class="normal"></highlight></codeline>
<codeline lineno="2093"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Prevent<sp/>compiler<sp/>warnings<sp/>if<sp/>INCLUDE_xTaskGetIdleTaskHandle<sp/>is<sp/>set<sp/>to<sp/>0,</highlight></codeline>
<codeline lineno="2094"><highlight class="comment"><sp/><sp/>meaning<sp/>xIdleTaskHandle<sp/>is<sp/>not<sp/>used<sp/>anywhere<sp/>else.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2095"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="tasks_8c_1ac90c8a23419d8fa71919e020c433f1a6" kindref="member">xIdleTaskHandle</ref>;</highlight></codeline>
<codeline lineno="2096"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2097"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2098" refid="task_8h_1a1651e13c7ccd6273f53a62425ec79a15" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="2099"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1aeadc53d3d0d0ea3a6c7702a9eacbf452" kindref="member">vTaskEndScheduler</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2101"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>the<sp/>scheduler<sp/>interrupts<sp/>and<sp/>call<sp/>the<sp/>portable<sp/>scheduler<sp/>end</highlight></codeline>
<codeline lineno="2102"><highlight class="comment"><sp/><sp/>routine<sp/>so<sp/>the<sp/>original<sp/>ISRs<sp/>can<sp/>be<sp/>restored<sp/>if<sp/>necessary.<sp/><sp/>The<sp/>port</highlight></codeline>
<codeline lineno="2103"><highlight class="comment"><sp/><sp/>layer<sp/>must<sp/>ensure<sp/>interrupts<sp/>enable<sp/>bit<sp/>is<sp/>left<sp/>in<sp/>the<sp/>correct<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2104"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a6e3d10ee1a0734a647ca192523c2cfc1" kindref="member">portDISABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="2105"><highlight class="normal"><sp/><sp/><ref refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" kindref="member">xSchedulerRunning</ref><sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2106"><highlight class="normal"><sp/><sp/><ref refid="portable_8h_1af76f3c0b44c5b5c06fc046a4ee1a6423" kindref="member">vPortEndScheduler</ref>();</highlight></codeline>
<codeline lineno="2107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2108"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2109" refid="task_8h_1a366b302eba79d10b5ee2a3756f0fcc43" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="2110"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a084d232640bd1d04bcac0b8784417015" kindref="member">vTaskSuspendAll</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2111"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2112"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>critical<sp/>section<sp/>is<sp/>not<sp/>required<sp/>as<sp/>the<sp/>variable<sp/>is<sp/>of<sp/>type</highlight></codeline>
<codeline lineno="2113"><highlight class="comment"><sp/><sp/>BaseType_t.<sp/><sp/>Please<sp/>read<sp/>Richard<sp/>Barry&apos;s<sp/>reply<sp/>in<sp/>the<sp/>following<sp/>link<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="2114"><highlight class="comment"><sp/><sp/>post<sp/>in<sp/>the<sp/>FreeRTOS<sp/>support<sp/>forum<sp/>before<sp/>reporting<sp/>this<sp/>as<sp/>a<sp/>bug!<sp/>-</highlight></codeline>
<codeline lineno="2115"><highlight class="comment"><sp/><sp/>http://goo.gl/wu4acr<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2116"><highlight class="normal"></highlight></codeline>
<codeline lineno="2117"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>portSOFRWARE_BARRIER()<sp/>is<sp/>only<sp/>implemented<sp/>for<sp/>emulated/simulated<sp/>ports<sp/>that</highlight></codeline>
<codeline lineno="2118"><highlight class="comment"><sp/><sp/>do<sp/>not<sp/>otherwise<sp/>exhibit<sp/>real<sp/>time<sp/>behaviour.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2119"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a24b7085ff32bad7b44b6ea618f640914" kindref="member">portSOFTWARE_BARRIER</ref>();</highlight></codeline>
<codeline lineno="2120"><highlight class="normal"></highlight></codeline>
<codeline lineno="2121"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>scheduler<sp/>is<sp/>suspended<sp/>if<sp/>uxSchedulerSuspended<sp/>is<sp/>non-zero.<sp/><sp/>An<sp/>increment</highlight></codeline>
<codeline lineno="2122"><highlight class="comment"><sp/><sp/>is<sp/>used<sp/>to<sp/>allow<sp/>calls<sp/>to<sp/>vTaskSuspendAll()<sp/>to<sp/>nest.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2123"><highlight class="normal"><sp/><sp/>++<ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref>;</highlight></codeline>
<codeline lineno="2124"><highlight class="normal"></highlight></codeline>
<codeline lineno="2125"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Enforces<sp/>ordering<sp/>for<sp/>ports<sp/>and<sp/>optimised<sp/>compilers<sp/>that<sp/>may<sp/>otherwise<sp/>place</highlight></codeline>
<codeline lineno="2126"><highlight class="comment"><sp/><sp/>the<sp/>above<sp/>increment<sp/>elsewhere.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2127"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a4b03d1af7eaa8e1c7788e17fc74482eb" kindref="member">portMEMORY_BARRIER</ref>();</highlight></codeline>
<codeline lineno="2128"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2129"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2130"><highlight class="normal"></highlight></codeline>
<codeline lineno="2131"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TICKLESS_IDLE<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2132"><highlight class="normal"></highlight></codeline>
<codeline lineno="2133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>prvGetExpectedIdleTime(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2134"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2135"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2136"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxHigherPriorityReadyTasks<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2137"><highlight class="normal"></highlight></codeline>
<codeline lineno="2138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>uxHigherPriorityReadyTasks<sp/>takes<sp/>care<sp/>of<sp/>the<sp/>case<sp/>where</highlight></codeline>
<codeline lineno="2139"><highlight class="comment"><sp/><sp/><sp/><sp/>configUSE_PREEMPTION<sp/>is<sp/>0,<sp/>so<sp/>there<sp/>may<sp/>be<sp/>tasks<sp/>above<sp/>the<sp/>idle<sp/>priority</highlight></codeline>
<codeline lineno="2140"><highlight class="comment"><sp/><sp/><sp/><sp/>task<sp/>that<sp/>are<sp/>in<sp/>the<sp/>Ready<sp/>state,<sp/>even<sp/>though<sp/>the<sp/>idle<sp/>task<sp/>is</highlight></codeline>
<codeline lineno="2141"><highlight class="comment"><sp/><sp/><sp/><sp/>running.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2142"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>configUSE_PORT_OPTIMISED_TASK_SELECTION<sp/>==<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2143"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" kindref="member">uxTopReadyPriority</ref><sp/>&gt;<sp/><ref refid="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" kindref="member">tskIDLE_PRIORITY</ref><sp/>)</highlight></codeline>
<codeline lineno="2145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxHigherPriorityReadyTasks<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2148"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2149"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2150"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxLeastSignificantBit<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0x01;</highlight></codeline>
<codeline lineno="2152"><highlight class="normal"></highlight></codeline>
<codeline lineno="2153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>When<sp/>port<sp/>optimised<sp/>task<sp/>selection<sp/>is<sp/>used<sp/>the<sp/>uxTopReadyPriority</highlight></codeline>
<codeline lineno="2154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>variable<sp/>is<sp/>used<sp/>as<sp/>a<sp/>bit<sp/>map.<sp/><sp/>If<sp/>bits<sp/>other<sp/>than<sp/>the<sp/>least</highlight></codeline>
<codeline lineno="2155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>significant<sp/>bit<sp/>are<sp/>set<sp/>then<sp/>there<sp/>are<sp/>tasks<sp/>that<sp/>have<sp/>a<sp/>priority</highlight></codeline>
<codeline lineno="2156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>above<sp/>the<sp/>idle<sp/>priority<sp/>that<sp/>are<sp/>in<sp/>the<sp/>Ready<sp/>state.<sp/><sp/>This<sp/>takes</highlight></codeline>
<codeline lineno="2157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>care<sp/>of<sp/>the<sp/>case<sp/>where<sp/>the<sp/>co-operative<sp/>scheduler<sp/>is<sp/>in<sp/>use.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" kindref="member">uxTopReadyPriority</ref><sp/>&gt;<sp/>uxLeastSignificantBit<sp/>)</highlight></codeline>
<codeline lineno="2159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxHigherPriorityReadyTasks<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2163"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2164"><highlight class="normal"></highlight></codeline>
<codeline lineno="2165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&gt;<sp/><ref refid="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" kindref="member">tskIDLE_PRIORITY</ref><sp/>)</highlight></codeline>
<codeline lineno="2166"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2168"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" kindref="member">listCURRENT_LIST_LENGTH</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[<sp/><ref refid="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" kindref="member">tskIDLE_PRIORITY</ref><sp/>]<sp/>)<sp/>)<sp/>&gt;<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="2170"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>are<sp/>other<sp/>idle<sp/>priority<sp/>tasks<sp/>in<sp/>the<sp/>ready<sp/>state.<sp/><sp/>If</highlight></codeline>
<codeline lineno="2172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>slicing<sp/>is<sp/>used<sp/>then<sp/>the<sp/>very<sp/>next<sp/>tick<sp/>interrupt<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="2173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>processed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2175"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxHigherPriorityReadyTasks<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2177"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>There<sp/>are<sp/>tasks<sp/>in<sp/>the<sp/>Ready<sp/>state<sp/>that<sp/>have<sp/>a<sp/>priority<sp/>above<sp/>the</highlight></codeline>
<codeline lineno="2179"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>idle<sp/>priority.<sp/><sp/>This<sp/>path<sp/>can<sp/>only<sp/>be<sp/>reached<sp/>if</highlight></codeline>
<codeline lineno="2180"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>configUSE_PREEMPTION<sp/>is<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2184"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>-<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref>;</highlight></codeline>
<codeline lineno="2186"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2187"><highlight class="normal"></highlight></codeline>
<codeline lineno="2188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2190"><highlight class="normal"></highlight></codeline>
<codeline lineno="2191"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TICKLESS_IDLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2192"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2193" refid="task_8h_1a003f8ae6d649225abd030cc76e1c7d0e" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="2194"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" kindref="member">xTaskResumeAll</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2195"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2196"><highlight class="normal"><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2197"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xAlreadyYielded<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2198"><highlight class="normal"></highlight></codeline>
<codeline lineno="2199"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>uxSchedulerSuspended<sp/>is<sp/>zero<sp/>then<sp/>this<sp/>function<sp/>does<sp/>not<sp/>match<sp/>a</highlight></codeline>
<codeline lineno="2200"><highlight class="comment"><sp/><sp/>previous<sp/>call<sp/>to<sp/>vTaskSuspendAll().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2201"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>);</highlight></codeline>
<codeline lineno="2202"><highlight class="normal"></highlight></codeline>
<codeline lineno="2203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>possible<sp/>that<sp/>an<sp/>ISR<sp/>caused<sp/>a<sp/>task<sp/>to<sp/>be<sp/>removed<sp/>from<sp/>an<sp/>event</highlight></codeline>
<codeline lineno="2204"><highlight class="comment"><sp/><sp/>list<sp/>while<sp/>the<sp/>scheduler<sp/>was<sp/>suspended.<sp/><sp/>If<sp/>this<sp/>was<sp/>the<sp/>case<sp/>then<sp/>the</highlight></codeline>
<codeline lineno="2205"><highlight class="comment"><sp/><sp/>removed<sp/>task<sp/>will<sp/>have<sp/>been<sp/>added<sp/>to<sp/>the<sp/>xPendingReadyList.<sp/><sp/>Once<sp/>the</highlight></codeline>
<codeline lineno="2206"><highlight class="comment"><sp/><sp/>scheduler<sp/>has<sp/>been<sp/>resumed<sp/>it<sp/>is<sp/>safe<sp/>to<sp/>move<sp/>all<sp/>the<sp/>pending<sp/>ready</highlight></codeline>
<codeline lineno="2207"><highlight class="comment"><sp/><sp/>tasks<sp/>from<sp/>this<sp/>list<sp/>into<sp/>their<sp/>appropriate<sp/>ready<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2208"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2209"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2210"><highlight class="normal"><sp/><sp/><sp/><sp/>--<ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref>;</highlight></codeline>
<codeline lineno="2211"><highlight class="normal"></highlight></codeline>
<codeline lineno="2212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2213"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref><sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U<sp/>)</highlight></codeline>
<codeline lineno="2215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Move<sp/>any<sp/>readied<sp/>tasks<sp/>from<sp/>the<sp/>pending<sp/>list<sp/>into<sp/>the</highlight></codeline>
<codeline lineno="2217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>appropriate<sp/>ready<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/>&amp;<ref refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" kindref="member">xPendingReadyList</ref><sp/>)<sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="list_8h_1a715561302af8cb5b74416b23ce4e999d" kindref="member">listGET_OWNER_OF_HEAD_ENTRY</ref>(<sp/>(<sp/>&amp;<ref refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" kindref="member">xPendingReadyList</ref><sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>void<sp/>*<sp/>is<sp/>used<sp/>as<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>with<sp/>timers<sp/>and<sp/>co-routines<sp/>too.<sp/><sp/>Alignment<sp/>is<sp/>known<sp/>to<sp/>be<sp/>fine<sp/>as<sp/>the<sp/>type<sp/>of<sp/>the<sp/>pointer<sp/>stored<sp/>and<sp/>retrieved<sp/>is<sp/>the<sp/>same.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="2224"><highlight class="normal"></highlight></codeline>
<codeline lineno="2225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>moved<sp/>task<sp/>has<sp/>a<sp/>priority<sp/>higher<sp/>than<sp/>the<sp/>current</highlight></codeline>
<codeline lineno="2226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>then<sp/>a<sp/>yield<sp/>must<sp/>be<sp/>performed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&gt;=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="2228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2236"><highlight class="normal"></highlight></codeline>
<codeline lineno="2237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>was<sp/>unblocked<sp/>while<sp/>the<sp/>scheduler<sp/>was<sp/>suspended,</highlight></codeline>
<codeline lineno="2240"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>which<sp/>may<sp/>have<sp/>prevented<sp/>the<sp/>next<sp/>unblock<sp/>time<sp/>from<sp/>being</highlight></codeline>
<codeline lineno="2241"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>re-calculated,<sp/>in<sp/>which<sp/>case<sp/>re-calculate<sp/>it<sp/>now.<sp/><sp/>Mainly</highlight></codeline>
<codeline lineno="2242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>important<sp/>for<sp/>low<sp/>power<sp/>tickless<sp/>implementations,<sp/>where</highlight></codeline>
<codeline lineno="2243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>can<sp/>prevent<sp/>an<sp/>unnecessary<sp/>exit<sp/>from<sp/>low<sp/>power</highlight></codeline>
<codeline lineno="2244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" kindref="member">prvResetNextTaskUnblockTime</ref>();</highlight></codeline>
<codeline lineno="2246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2247"><highlight class="normal"></highlight></codeline>
<codeline lineno="2248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>any<sp/>ticks<sp/>occurred<sp/>while<sp/>the<sp/>scheduler<sp/>was<sp/>suspended<sp/>then</highlight></codeline>
<codeline lineno="2249"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>they<sp/>should<sp/>be<sp/>processed<sp/>now.<sp/><sp/>This<sp/>ensures<sp/>the<sp/>tick<sp/>count<sp/>does</highlight></codeline>
<codeline lineno="2250"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>slip,<sp/>and<sp/>that<sp/>any<sp/>delayed<sp/>tasks<sp/>are<sp/>resumed<sp/>at<sp/>the<sp/>correct</highlight></codeline>
<codeline lineno="2251"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xPendedCounts<sp/>=<sp/><ref refid="tasks_8c_1aa7a2317195d855e6961dd8bcaab9496a" kindref="member">xPendedTicks</ref>;<sp/></highlight><highlight class="comment">/*<sp/>Non-volatile<sp/>copy.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2254"><highlight class="normal"></highlight></codeline>
<codeline lineno="2255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xPendedCounts<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0U<sp/>)</highlight></codeline>
<codeline lineno="2256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1a54f31e9aef0eb7b87e48c7d68ecc84c1" kindref="member">xTaskIncrementTick</ref>()<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--xPendedCounts;</highlight></codeline>
<codeline lineno="2268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>xPendedCounts<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0U<sp/>);</highlight></codeline>
<codeline lineno="2269"><highlight class="normal"></highlight></codeline>
<codeline lineno="2270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1aa7a2317195d855e6961dd8bcaab9496a" kindref="member">xPendedTicks</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2277"><highlight class="normal"></highlight></codeline>
<codeline lineno="2278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2280"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>configUSE_PREEMPTION<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xAlreadyYielded<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2284"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acd0c920e40647de517ac633965b52273" kindref="member">taskYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="2286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2297"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2298"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2299"><highlight class="normal"></highlight></codeline>
<codeline lineno="2300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xAlreadyYielded;</highlight></codeline>
<codeline lineno="2301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2302"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2303" refid="task_8h_1a753ecfe23e7386066ecccad5d16422f7" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="2304"><highlight class="normal"><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/><ref refid="tasks_8c_1a5fa24e36d5e1eeb57f5b73b72ea048e7" kindref="member">xTaskGetTickCount</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2306"><highlight class="normal"><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicks;</highlight></codeline>
<codeline lineno="2307"><highlight class="normal"></highlight></codeline>
<codeline lineno="2308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Critical<sp/>section<sp/>required<sp/>if<sp/>running<sp/>on<sp/>a<sp/>16<sp/>bit<sp/>processor.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2309"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a5ada85b405891061cad280c1e35213ee" kindref="member">portTICK_TYPE_ENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2310"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2311"><highlight class="normal"><sp/><sp/><sp/><sp/>xTicks<sp/>=<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref>;</highlight></codeline>
<codeline lineno="2312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2313"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a3a24fff82b123ddc7cf8195a466733dd" kindref="member">portTICK_TYPE_EXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2314"><highlight class="normal"></highlight></codeline>
<codeline lineno="2315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xTicks;</highlight></codeline>
<codeline lineno="2316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2317"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2318" refid="task_8h_1a092be3fd5752625303c307620be523ff" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="2319"><highlight class="normal"><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/><ref refid="tasks_8c_1ad58fd766b8f438b5703276f585738762" kindref="member">xTaskGetTickCountFromISR</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2320"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2321"><highlight class="normal"><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2322"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="2323"><highlight class="normal"></highlight></codeline>
<codeline lineno="2324"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>RTOS<sp/>ports<sp/>that<sp/>support<sp/>interrupt<sp/>nesting<sp/>have<sp/>the<sp/>concept<sp/>of<sp/>a<sp/>maximum</highlight></codeline>
<codeline lineno="2325"><highlight class="comment"><sp/><sp/>system<sp/>call<sp/>(or<sp/>maximum<sp/>API<sp/>call)<sp/>interrupt<sp/>priority.<sp/><sp/>Interrupts<sp/>that<sp/>are</highlight></codeline>
<codeline lineno="2326"><highlight class="comment"><sp/><sp/>above<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>priority<sp/>are<sp/>kept<sp/>permanently<sp/>enabled,<sp/>even</highlight></codeline>
<codeline lineno="2327"><highlight class="comment"><sp/><sp/>when<sp/>the<sp/>RTOS<sp/>kernel<sp/>is<sp/>in<sp/>a<sp/>critical<sp/>section,<sp/>but<sp/>cannot<sp/>make<sp/>any<sp/>calls<sp/>to</highlight></codeline>
<codeline lineno="2328"><highlight class="comment"><sp/><sp/>FreeRTOS<sp/>API<sp/>functions.<sp/><sp/>If<sp/>configASSERT()<sp/>is<sp/>defined<sp/>in<sp/>FreeRTOSConfig.h</highlight></codeline>
<codeline lineno="2329"><highlight class="comment"><sp/><sp/>then<sp/>portASSERT_IF_INTERRUPT_PRIORITY_INVALID()<sp/>will<sp/>result<sp/>in<sp/>an<sp/>assertion</highlight></codeline>
<codeline lineno="2330"><highlight class="comment"><sp/><sp/>failure<sp/>if<sp/>a<sp/>FreeRTOS<sp/>API<sp/>function<sp/>is<sp/>called<sp/>from<sp/>an<sp/>interrupt<sp/>that<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="2331"><highlight class="comment"><sp/><sp/>assigned<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>configured<sp/>maximum<sp/>system<sp/>call<sp/>priority.</highlight></codeline>
<codeline lineno="2332"><highlight class="comment"><sp/><sp/>Only<sp/>FreeRTOS<sp/>functions<sp/>that<sp/>end<sp/>in<sp/>FromISR<sp/>can<sp/>be<sp/>called<sp/>from<sp/>interrupts</highlight></codeline>
<codeline lineno="2333"><highlight class="comment"><sp/><sp/>that<sp/>have<sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>at<sp/>or<sp/>(logically)<sp/>below<sp/>the<sp/>maximum</highlight></codeline>
<codeline lineno="2334"><highlight class="comment"><sp/><sp/>system<sp/>call<sp/>interrupt<sp/>priority.<sp/><sp/>FreeRTOS<sp/>maintains<sp/>a<sp/>separate<sp/>interrupt</highlight></codeline>
<codeline lineno="2335"><highlight class="comment"><sp/><sp/>safe<sp/>API<sp/>to<sp/>ensure<sp/>interrupt<sp/>entry<sp/>is<sp/>as<sp/>fast<sp/>and<sp/>as<sp/>simple<sp/>as<sp/>possible.</highlight></codeline>
<codeline lineno="2336"><highlight class="comment"><sp/><sp/>More<sp/>information<sp/>(albeit<sp/>Cortex-M<sp/>specific)<sp/>is<sp/>provided<sp/>on<sp/>the<sp/>following</highlight></codeline>
<codeline lineno="2337"><highlight class="comment"><sp/><sp/>link:<sp/>https://www.freertos.org/RTOS-Cortex-M3-M4.html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2338"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" kindref="member">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</ref>();</highlight></codeline>
<codeline lineno="2339"><highlight class="normal"></highlight></codeline>
<codeline lineno="2340"><highlight class="normal"><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a7b53d0f5d4ae09f599f92fb5cd546e6b" kindref="member">portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="2341"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2342"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref>;</highlight></codeline>
<codeline lineno="2343"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2344"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a506f401396abd44a8dbe31edac713f8b" kindref="member">portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="2345"><highlight class="normal"></highlight></codeline>
<codeline lineno="2346"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2347"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2348"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2349" refid="task_8h_1a70a89a0f07c7db5d695707d1f6f44a4a" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="2350"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="tasks_8c_1a4b660446c721df74158dddb9fc189c1e" kindref="member">uxTaskGetNumberOfTasks</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2351"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2352"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>critical<sp/>section<sp/>is<sp/>not<sp/>required<sp/>because<sp/>the<sp/>variables<sp/>are<sp/>of<sp/>type</highlight></codeline>
<codeline lineno="2353"><highlight class="comment"><sp/><sp/>BaseType_t.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref>;</highlight></codeline>
<codeline lineno="2355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2356"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2357" refid="task_8h_1aedab278c23c41dcbfdf312d383bdb342" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="2358"><highlight class="normal"></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="tasks_8c_1acb1be57d03f6f1a3161b69e98df6ccb9" kindref="member">pcTaskGetName</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskToQuery<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2359"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2360"><highlight class="normal"><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="2361"><highlight class="normal"></highlight></codeline>
<codeline lineno="2362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>null<sp/>is<sp/>passed<sp/>in<sp/>here<sp/>then<sp/>the<sp/>name<sp/>of<sp/>the<sp/>calling<sp/>task<sp/>is<sp/>being</highlight></codeline>
<codeline lineno="2363"><highlight class="comment"><sp/><sp/>queried.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2364"><highlight class="normal"><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTaskToQuery<sp/>);</highlight></codeline>
<codeline lineno="2365"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="2366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a67d61291794f38afb5be5132078bc24f" kindref="member">pcTaskName</ref>[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="2367"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2368"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2369"><highlight class="normal"></highlight></codeline>
<codeline lineno="2370"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_xTaskGetHandle<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2371"><highlight class="normal"></highlight></codeline>
<codeline lineno="2372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*prvSearchForNameWithinSingleList(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*pxList,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>pcNameToQuery[]<sp/>)</highlight></codeline>
<codeline lineno="2373"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2374"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxNextTCB,<sp/>*pxFirstTCB,<sp/>*pxReturn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="2375"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>x;</highlight></codeline>
<codeline lineno="2376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cNextChar;</highlight></codeline>
<codeline lineno="2377"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xBreakLoop;</highlight></codeline>
<codeline lineno="2378"><highlight class="normal"></highlight></codeline>
<codeline lineno="2379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>is<sp/>called<sp/>with<sp/>the<sp/>scheduler<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2380"><highlight class="normal"></highlight></codeline>
<codeline lineno="2381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" kindref="member">listCURRENT_LIST_LENGTH</ref>(<sp/>pxList<sp/>)<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2382"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a275d9855e9b71652e2b8f6e2ed62aadd" kindref="member">listGET_OWNER_OF_NEXT_ENTRY</ref>(<sp/>pxFirstTCB,<sp/>pxList<sp/>);<sp/><sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>void<sp/>*<sp/>is<sp/>used<sp/>as<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>with<sp/>timers<sp/>and<sp/>co-routines<sp/>too.<sp/><sp/>Alignment<sp/>is<sp/>known<sp/>to<sp/>be<sp/>fine<sp/>as<sp/>the<sp/>type<sp/>of<sp/>the<sp/>pointer<sp/>stored<sp/>and<sp/>retrieved<sp/>is<sp/>the<sp/>same.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2384"><highlight class="normal"></highlight></codeline>
<codeline lineno="2385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a275d9855e9b71652e2b8f6e2ed62aadd" kindref="member">listGET_OWNER_OF_NEXT_ENTRY</ref>(<sp/>pxNextTCB,<sp/>pxList<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>void<sp/>*<sp/>is<sp/>used<sp/>as<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>with<sp/>timers<sp/>and<sp/>co-routines<sp/>too.<sp/><sp/>Alignment<sp/>is<sp/>known<sp/>to<sp/>be<sp/>fine<sp/>as<sp/>the<sp/>type<sp/>of<sp/>the<sp/>pointer<sp/>stored<sp/>and<sp/>retrieved<sp/>is<sp/>the<sp/>same.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2388"><highlight class="normal"></highlight></codeline>
<codeline lineno="2389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>each<sp/>character<sp/>in<sp/>the<sp/>name<sp/>looking<sp/>for<sp/>a<sp/>match<sp/>or</highlight></codeline>
<codeline lineno="2390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mismatch.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xBreakLoop<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>x<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0;<sp/>x<sp/>&lt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1ac388dc4041aab6997348828eb27fc1a8" kindref="member">configMAX_TASK_NAME_LEN</ref>;<sp/>x++<sp/>)</highlight></codeline>
<codeline lineno="2393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cNextChar<sp/>=<sp/>pxNextTCB-&gt;<ref refid="structtsk_task_control_block_1a67d61291794f38afb5be5132078bc24f" kindref="member">pcTaskName</ref>[<sp/>x<sp/>];</highlight></codeline>
<codeline lineno="2395"><highlight class="normal"></highlight></codeline>
<codeline lineno="2396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cNextChar<sp/>!=<sp/>pcNameToQuery[<sp/>x<sp/>]<sp/>)</highlight></codeline>
<codeline lineno="2397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Characters<sp/>didn&apos;t<sp/>match.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xBreakLoop<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>cNextChar<sp/>==<sp/>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>)<sp/>0x00<sp/>)</highlight></codeline>
<codeline lineno="2402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Both<sp/>strings<sp/>terminated,<sp/>a<sp/>match<sp/>must<sp/>have<sp/>been</highlight></codeline>
<codeline lineno="2404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxReturn<sp/>=<sp/>pxNextTCB;</highlight></codeline>
<codeline lineno="2406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xBreakLoop<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2412"><highlight class="normal"></highlight></codeline>
<codeline lineno="2413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xBreakLoop<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2418"><highlight class="normal"></highlight></codeline>
<codeline lineno="2419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxReturn<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>handle<sp/>has<sp/>been<sp/>found.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2424"><highlight class="normal"></highlight></codeline>
<codeline lineno="2425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>pxNextTCB<sp/>!=<sp/>pxFirstTCB<sp/>);</highlight></codeline>
<codeline lineno="2426"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2427"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2428"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2431"><highlight class="normal"></highlight></codeline>
<codeline lineno="2432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pxReturn;</highlight></codeline>
<codeline lineno="2433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2434"><highlight class="normal"></highlight></codeline>
<codeline lineno="2435"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_xTaskGetHandle<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2436"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2437"><highlight class="normal"></highlight></codeline>
<codeline lineno="2438"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_xTaskGetHandle<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2439"><highlight class="normal"></highlight></codeline>
<codeline lineno="2440"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/><ref refid="task_8h_1a45b3b1cd0227269609499beeeb8c5c26" kindref="member">xTaskGetHandle</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcNameToQuery<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e971<sp/>Unqualified<sp/>char<sp/>types<sp/>are<sp/>allowed<sp/>for<sp/>strings<sp/>and<sp/>single<sp/>characters<sp/>only.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2441"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2442"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxQueue<sp/>=<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref>;</highlight></codeline>
<codeline lineno="2443"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref>*<sp/>pxTCB;</highlight></codeline>
<codeline lineno="2444"><highlight class="normal"></highlight></codeline>
<codeline lineno="2445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Task<sp/>names<sp/>will<sp/>be<sp/>truncated<sp/>to<sp/>configMAX_TASK_NAME_LEN<sp/>-<sp/>1<sp/>bytes.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2446"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>strlen(<sp/>pcNameToQuery<sp/>)<sp/>&lt;<sp/><ref refid="_free_r_t_o_s_config_8h_1ac388dc4041aab6997348828eb27fc1a8" kindref="member">configMAX_TASK_NAME_LEN</ref><sp/>);</highlight></codeline>
<codeline lineno="2447"><highlight class="normal"></highlight></codeline>
<codeline lineno="2448"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a084d232640bd1d04bcac0b8784417015" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="2449"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Search<sp/>the<sp/>ready<sp/>lists.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxQueue--;</highlight></codeline>
<codeline lineno="2454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/>prvSearchForNameWithinSingleList(<sp/>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/>)<sp/>&amp;(<sp/><ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[<sp/>uxQueue<sp/>]<sp/>),<sp/>pcNameToQuery<sp/>);</highlight></codeline>
<codeline lineno="2455"><highlight class="normal"></highlight></codeline>
<codeline lineno="2456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Found<sp/>the<sp/>handle.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2461"><highlight class="normal"></highlight></codeline>
<codeline lineno="2462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>uxQueue<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" kindref="member">tskIDLE_PRIORITY</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2463"><highlight class="normal"></highlight></codeline>
<codeline lineno="2464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Search<sp/>the<sp/>delayed<sp/>lists.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/>prvSearchForNameWithinSingleList(<sp/>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/>)<sp/><ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref>,<sp/>pcNameToQuery<sp/>);</highlight></codeline>
<codeline lineno="2468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2469"><highlight class="normal"></highlight></codeline>
<codeline lineno="2470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/>prvSearchForNameWithinSingleList(<sp/>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/>)<sp/><ref refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" kindref="member">pxOverflowDelayedTaskList</ref>,<sp/>pcNameToQuery<sp/>);</highlight></codeline>
<codeline lineno="2473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2474"><highlight class="normal"></highlight></codeline>
<codeline lineno="2475"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Search<sp/>the<sp/>suspended<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/>prvSearchForNameWithinSingleList(<sp/>&amp;xSuspendedTaskList,<sp/>pcNameToQuery<sp/>);</highlight></codeline>
<codeline lineno="2481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2483"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2484"><highlight class="normal"></highlight></codeline>
<codeline lineno="2485"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>INCLUDE_vTaskDelete<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Search<sp/>the<sp/>deleted<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/>prvSearchForNameWithinSingleList(<sp/>&amp;xTasksWaitingTermination,<sp/>pcNameToQuery<sp/>);</highlight></codeline>
<codeline lineno="2491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2493"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2495"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="2496"><highlight class="normal"></highlight></codeline>
<codeline lineno="2497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pxTCB;</highlight></codeline>
<codeline lineno="2498"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2499"><highlight class="normal"></highlight></codeline>
<codeline lineno="2500"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_xTaskGetHandle<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2501"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2502"><highlight class="normal"></highlight></codeline>
<codeline lineno="2503"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2504"><highlight class="normal"></highlight></codeline>
<codeline lineno="2505"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="task_8h_1aa4603f3de3d809e9beb18d10fbac005d" kindref="member">uxTaskGetSystemState</ref>(<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">TaskStatus_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTaskStatusArray,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxArraySize,<sp/>uint32_t<sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pulTotalRunTime<sp/>)</highlight></codeline>
<codeline lineno="2506"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2507"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxTask<sp/>=<sp/>0,<sp/>uxQueue<sp/>=<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref>;</highlight></codeline>
<codeline lineno="2508"><highlight class="normal"></highlight></codeline>
<codeline lineno="2509"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a084d232640bd1d04bcac0b8784417015" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="2510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>there<sp/>a<sp/>space<sp/>in<sp/>the<sp/>array<sp/>for<sp/>each<sp/>task<sp/>in<sp/>the<sp/>system?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>uxArraySize<sp/>&gt;=<sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref><sp/>)</highlight></codeline>
<codeline lineno="2513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fill<sp/>in<sp/>an<sp/>TaskStatus_t<sp/>structure<sp/>with<sp/>information<sp/>on<sp/>each</highlight></codeline>
<codeline lineno="2515"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>in<sp/>the<sp/>Ready<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxQueue--;</highlight></codeline>
<codeline lineno="2519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxTask<sp/>+=<sp/>prvListTasksWithinSingleList(<sp/>&amp;(<sp/>pxTaskStatusArray[<sp/>uxTask<sp/>]<sp/>),<sp/>&amp;(<sp/><ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[<sp/>uxQueue<sp/>]<sp/>),<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892ca8570b65f331057b2cf92c504f0a2bc83" kindref="member">eReady</ref><sp/>);</highlight></codeline>
<codeline lineno="2520"><highlight class="normal"></highlight></codeline>
<codeline lineno="2521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>uxQueue<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" kindref="member">tskIDLE_PRIORITY</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2522"><highlight class="normal"></highlight></codeline>
<codeline lineno="2523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fill<sp/>in<sp/>an<sp/>TaskStatus_t<sp/>structure<sp/>with<sp/>information<sp/>on<sp/>each</highlight></codeline>
<codeline lineno="2524"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>in<sp/>the<sp/>Blocked<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxTask<sp/>+=<sp/>prvListTasksWithinSingleList(<sp/>&amp;(<sp/>pxTaskStatusArray[<sp/>uxTask<sp/>]<sp/>),<sp/>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/>)<sp/><ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref>,<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af" kindref="member">eBlocked</ref><sp/>);</highlight></codeline>
<codeline lineno="2526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxTask<sp/>+=<sp/>prvListTasksWithinSingleList(<sp/>&amp;(<sp/>pxTaskStatusArray[<sp/>uxTask<sp/>]<sp/>),<sp/>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/>)<sp/><ref refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" kindref="member">pxOverflowDelayedTaskList</ref>,<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af" kindref="member">eBlocked</ref><sp/>);</highlight></codeline>
<codeline lineno="2527"><highlight class="normal"></highlight></codeline>
<codeline lineno="2528"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>INCLUDE_vTaskDelete<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fill<sp/>in<sp/>an<sp/>TaskStatus_t<sp/>structure<sp/>with<sp/>information<sp/>on</highlight></codeline>
<codeline lineno="2531"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>each<sp/>task<sp/>that<sp/>has<sp/>been<sp/>deleted<sp/>but<sp/>not<sp/>yet<sp/>cleaned<sp/>up.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxTask<sp/>+=<sp/>prvListTasksWithinSingleList(<sp/>&amp;(<sp/>pxTaskStatusArray[<sp/>uxTask<sp/>]<sp/>),<sp/>&amp;xTasksWaitingTermination,<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cacef5c6e771d3a07f656e07a13a20ba35" kindref="member">eDeleted</ref><sp/>);</highlight></codeline>
<codeline lineno="2533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2534"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2535"><highlight class="normal"></highlight></codeline>
<codeline lineno="2536"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fill<sp/>in<sp/>an<sp/>TaskStatus_t<sp/>structure<sp/>with<sp/>information<sp/>on</highlight></codeline>
<codeline lineno="2539"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>each<sp/>task<sp/>in<sp/>the<sp/>Suspended<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxTask<sp/>+=<sp/>prvListTasksWithinSingleList(<sp/>&amp;(<sp/>pxTaskStatusArray[<sp/>uxTask<sp/>]<sp/>),<sp/>&amp;xSuspendedTaskList,<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892caf35a900d49fdfc2502eefc68fdb70f72" kindref="member">eSuspended</ref><sp/>);</highlight></codeline>
<codeline lineno="2541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2542"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2543"><highlight class="normal"></highlight></codeline>
<codeline lineno="2544"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configGENERATE_RUN_TIME_STATS<sp/>==<sp/>1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pulTotalRunTime<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2548"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>portALT_GET_RUN_TIME_COUNTER_VALUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portALT_GET_RUN_TIME_COUNTER_VALUE(<sp/>(<sp/>*pulTotalRunTime<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2550"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pulTotalRunTime<sp/>=<sp/>portGET_RUN_TIME_COUNTER_VALUE();</highlight></codeline>
<codeline lineno="2552"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2555"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pulTotalRunTime<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pulTotalRunTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="2560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2562"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2568"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2569"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="2570"><highlight class="normal"></highlight></codeline>
<codeline lineno="2571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxTask;</highlight></codeline>
<codeline lineno="2572"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2573"><highlight class="normal"></highlight></codeline>
<codeline lineno="2574"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2575"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2576"><highlight class="normal"></highlight></codeline>
<codeline lineno="2577"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_xTaskGetIdleTaskHandle<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2578"><highlight class="normal"></highlight></codeline>
<codeline lineno="2579"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/><ref refid="task_8h_1a3d5446a4403457e855cb84b3bba5570a" kindref="member">xTaskGetIdleTaskHandle</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2580"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2581"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>xTaskGetIdleTaskHandle()<sp/>is<sp/>called<sp/>before<sp/>the<sp/>scheduler<sp/>has<sp/>been</highlight></codeline>
<codeline lineno="2582"><highlight class="comment"><sp/><sp/><sp/><sp/>started,<sp/>then<sp/>xIdleTaskHandle<sp/>will<sp/>be<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/><ref refid="tasks_8c_1ac90c8a23419d8fa71919e020c433f1a6" kindref="member">xIdleTaskHandle</ref><sp/>!=<sp/>NULL<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2584"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1ac90c8a23419d8fa71919e020c433f1a6" kindref="member">xIdleTaskHandle</ref>;</highlight></codeline>
<codeline lineno="2585"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2586"><highlight class="normal"></highlight></codeline>
<codeline lineno="2587"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_xTaskGetIdleTaskHandle<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2588"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2589"><highlight class="normal"></highlight></codeline>
<codeline lineno="2590"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>conditional<sp/>compilation<sp/>should<sp/>use<sp/>inequality<sp/>to<sp/>0,<sp/>not<sp/>equality<sp/>to<sp/>1.</highlight></codeline>
<codeline lineno="2591"><highlight class="comment">This<sp/>is<sp/>to<sp/>ensure<sp/>vTaskStepTick()<sp/>is<sp/>available<sp/>when<sp/>user<sp/>defined<sp/>low<sp/>power<sp/>mode</highlight></codeline>
<codeline lineno="2592"><highlight class="comment">implementations<sp/>require<sp/>configUSE_TICKLESS_IDLE<sp/>to<sp/>be<sp/>set<sp/>to<sp/>a<sp/>value<sp/>other<sp/>than</highlight></codeline>
<codeline lineno="2593"><highlight class="comment">1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2594"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TICKLESS_IDLE<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2595"><highlight class="normal"></highlight></codeline>
<codeline lineno="2596"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a8dda6cb26bb158dd9636873135e63912" kindref="member">vTaskStepTick</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToJump<sp/>)</highlight></codeline>
<codeline lineno="2597"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Correct<sp/>the<sp/>tick<sp/>count<sp/>value<sp/>after<sp/>a<sp/>period<sp/>during<sp/>which<sp/>the<sp/>tick</highlight></codeline>
<codeline lineno="2599"><highlight class="comment"><sp/><sp/><sp/><sp/>was<sp/>suppressed.<sp/><sp/>Note<sp/>this<sp/>does<sp/>*not*<sp/>call<sp/>the<sp/>tick<sp/>hook<sp/>function<sp/>for</highlight></codeline>
<codeline lineno="2600"><highlight class="comment"><sp/><sp/><sp/><sp/>each<sp/>stepped<sp/>tick.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2601"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>(<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref><sp/>+<sp/>xTicksToJump<sp/>)<sp/>&lt;=<sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>);</highlight></codeline>
<codeline lineno="2602"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref><sp/>+=<sp/>xTicksToJump;</highlight></codeline>
<codeline lineno="2603"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a74e013fe2bad2c2d7db71f4b17bad698" kindref="member">traceINCREASE_TICK_COUNT</ref>(<sp/>xTicksToJump<sp/>);</highlight></codeline>
<codeline lineno="2604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2605"><highlight class="normal"></highlight></codeline>
<codeline lineno="2606"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TICKLESS_IDLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2607"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2608" refid="task_8h_1a399bcc59c77ed9f1cb2bf3eac55bdf02" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="2609"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="tasks_8c_1aea7126047f4a766a28f579a0027f00c3" kindref="member">xTaskCatchUpTicks</ref>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToCatchUp<sp/>)</highlight></codeline>
<codeline lineno="2610"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2611"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xYieldRequired<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2612"><highlight class="normal"></highlight></codeline>
<codeline lineno="2613"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Must<sp/>not<sp/>be<sp/>called<sp/>with<sp/>the<sp/>scheduler<sp/>suspended<sp/>as<sp/>the<sp/>implementation</highlight></codeline>
<codeline lineno="2614"><highlight class="comment"><sp/><sp/>relies<sp/>on<sp/>xPendedTicks<sp/>being<sp/>wound<sp/>down<sp/>to<sp/>0<sp/>in<sp/>xTaskResumeAll().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2615"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="2616"><highlight class="normal"></highlight></codeline>
<codeline lineno="2617"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Use<sp/>xPendedTicks<sp/>to<sp/>mimic<sp/>xTicksToCatchUp<sp/>number<sp/>of<sp/>ticks<sp/>occurring<sp/>when</highlight></codeline>
<codeline lineno="2618"><highlight class="comment"><sp/><sp/>the<sp/>scheduler<sp/>is<sp/>suspended<sp/>so<sp/>the<sp/>ticks<sp/>are<sp/>executed<sp/>in<sp/>xTaskResumeAll().<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2619"><highlight class="normal"><sp/><sp/><ref refid="tasks_8c_1a084d232640bd1d04bcac0b8784417015" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="2620"><highlight class="normal"><sp/><sp/><ref refid="tasks_8c_1aa7a2317195d855e6961dd8bcaab9496a" kindref="member">xPendedTicks</ref><sp/>+=<sp/>xTicksToCatchUp;</highlight></codeline>
<codeline lineno="2621"><highlight class="normal"><sp/><sp/>xYieldRequired<sp/>=<sp/><ref refid="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="2622"><highlight class="normal"></highlight></codeline>
<codeline lineno="2623"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xYieldRequired;</highlight></codeline>
<codeline lineno="2624"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2625"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2626"><highlight class="normal"></highlight></codeline>
<codeline lineno="2627"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_xTaskAbortDelay<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2628"><highlight class="normal"></highlight></codeline>
<codeline lineno="2629"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="task_8h_1afefe333df0492c8411c0094badd25185" kindref="member">xTaskAbortDelay</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)</highlight></codeline>
<codeline lineno="2630"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2631"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB<sp/>=<sp/>xTask;</highlight></codeline>
<codeline lineno="2632"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2633"><highlight class="normal"></highlight></codeline>
<codeline lineno="2634"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="2635"><highlight class="normal"></highlight></codeline>
<codeline lineno="2636"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a084d232640bd1d04bcac0b8784417015" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="2637"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>can<sp/>only<sp/>be<sp/>prematurely<sp/>removed<sp/>from<sp/>the<sp/>Blocked<sp/>state<sp/>if</highlight></codeline>
<codeline lineno="2639"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>is<sp/>actually<sp/>in<sp/>the<sp/>Blocked<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="task_8h_1a954df77397d616484edb7c58c7760b10" kindref="member">eTaskGetState</ref>(<sp/>xTask<sp/>)<sp/>==<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af" kindref="member">eBlocked</ref><sp/>)</highlight></codeline>
<codeline lineno="2641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="2643"><highlight class="normal"></highlight></codeline>
<codeline lineno="2644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>the<sp/>reference<sp/>to<sp/>the<sp/>task<sp/>from<sp/>the<sp/>blocked<sp/>list.<sp/><sp/>An</highlight></codeline>
<codeline lineno="2645"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>interrupt<sp/>won&apos;t<sp/>touch<sp/>the<sp/>xStateListItem<sp/>because<sp/>the</highlight></codeline>
<codeline lineno="2646"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scheduler<sp/>is<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2648"><highlight class="normal"></highlight></codeline>
<codeline lineno="2649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>the<sp/>task<sp/>waiting<sp/>on<sp/>an<sp/>event<sp/>also?<sp/><sp/>If<sp/>so<sp/>remove<sp/>it<sp/>from</highlight></codeline>
<codeline lineno="2650"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>event<sp/>list<sp/>too.<sp/><sp/>Interrupts<sp/>can<sp/>touch<sp/>the<sp/>event<sp/>list<sp/>item,</highlight></codeline>
<codeline lineno="2651"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>even<sp/>though<sp/>the<sp/>scheduler<sp/>is<sp/>suspended,<sp/>so<sp/>a<sp/>critical<sp/>section</highlight></codeline>
<codeline lineno="2652"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a7c4dff11380cd843ed0b6a8dc065916b" kindref="member">listLIST_ITEM_CONTAINER</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2658"><highlight class="normal"></highlight></codeline>
<codeline lineno="2659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>lets<sp/>the<sp/>task<sp/>know<sp/>it<sp/>was<sp/>forcibly<sp/>removed<sp/>from<sp/>the</highlight></codeline>
<codeline lineno="2660"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blocked<sp/>state<sp/>so<sp/>it<sp/>should<sp/>not<sp/>re-evaluate<sp/>its<sp/>block<sp/>time<sp/>and</highlight></codeline>
<codeline lineno="2661"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>block<sp/>again.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ucDelayAborted<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2670"><highlight class="normal"></highlight></codeline>
<codeline lineno="2671"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Place<sp/>the<sp/>unblocked<sp/>task<sp/>into<sp/>the<sp/>appropriate<sp/>ready<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="2673"><highlight class="normal"></highlight></codeline>
<codeline lineno="2674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>being<sp/>unblocked<sp/>cannot<sp/>cause<sp/>an<sp/>immediate<sp/>context</highlight></codeline>
<codeline lineno="2675"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>if<sp/>preemption<sp/>is<sp/>turned<sp/>off.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2676"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/><sp/>configUSE_PREEMPTION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Preemption<sp/>is<sp/>on,<sp/>but<sp/>a<sp/>context<sp/>switch<sp/>should<sp/>only<sp/>be</highlight></codeline>
<codeline lineno="2679"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>performed<sp/>if<sp/>the<sp/>unblocked<sp/>task<sp/>has<sp/>a<sp/>priority<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="2680"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>equal<sp/>to<sp/>or<sp/>higher<sp/>than<sp/>the<sp/>currently<sp/>executing<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&gt;<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="2682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pend<sp/>the<sp/>yield<sp/>to<sp/>be<sp/>performed<sp/>when<sp/>the<sp/>scheduler</highlight></codeline>
<codeline lineno="2684"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>unsuspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2692"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_PREEMPTION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="2697"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2698"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2699"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="2700"><highlight class="normal"></highlight></codeline>
<codeline lineno="2701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2702"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2703"><highlight class="normal"></highlight></codeline>
<codeline lineno="2704"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_xTaskAbortDelay<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2705"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2706" refid="task_8h_1a978e25460ac35706f9ad30b46d9403d8" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="2707"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="tasks_8c_1a54f31e9aef0eb7b87e48c7d68ecc84c1" kindref="member">xTaskIncrementTick</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2708"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2709"><highlight class="normal"><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/>pxTCB;</highlight></codeline>
<codeline lineno="2710"><highlight class="normal"><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xItemValue;</highlight></codeline>
<codeline lineno="2711"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xSwitchRequired<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="2712"><highlight class="normal"></highlight></codeline>
<codeline lineno="2713"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Called<sp/>by<sp/>the<sp/>portable<sp/>layer<sp/>each<sp/>time<sp/>a<sp/>tick<sp/>interrupt<sp/>occurs.</highlight></codeline>
<codeline lineno="2714"><highlight class="comment"><sp/><sp/>Increments<sp/>the<sp/>tick<sp/>then<sp/>checks<sp/>to<sp/>see<sp/>if<sp/>the<sp/>new<sp/>tick<sp/>value<sp/>will<sp/>cause<sp/>any</highlight></codeline>
<codeline lineno="2715"><highlight class="comment"><sp/><sp/>tasks<sp/>to<sp/>be<sp/>unblocked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2716"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1aeea8ada76999a73fd5ffcacd267d336d" kindref="member">traceTASK_INCREMENT_TICK</ref>(<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref><sp/>);</highlight></codeline>
<codeline lineno="2717"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2718"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2719"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Minor<sp/>optimisation.<sp/><sp/>The<sp/>tick<sp/>count<sp/>cannot<sp/>change<sp/>in<sp/>this</highlight></codeline>
<codeline lineno="2720"><highlight class="comment"><sp/><sp/><sp/><sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2721"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xConstTickCount<sp/>=<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref><sp/>+<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="2722"><highlight class="normal"></highlight></codeline>
<codeline lineno="2723"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Increment<sp/>the<sp/>RTOS<sp/>tick,<sp/>switching<sp/>the<sp/>delayed<sp/>and<sp/>overflowed</highlight></codeline>
<codeline lineno="2724"><highlight class="comment"><sp/><sp/><sp/><sp/>delayed<sp/>lists<sp/>if<sp/>it<sp/>wraps<sp/>to<sp/>0.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2725"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref><sp/>=<sp/>xConstTickCount;</highlight></codeline>
<codeline lineno="2726"><highlight class="normal"></highlight></codeline>
<codeline lineno="2727"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xConstTickCount<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0U<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e774<sp/>&apos;if&apos;<sp/>does<sp/>not<sp/>always<sp/>evaluate<sp/>to<sp/>false<sp/>as<sp/>it<sp/>is<sp/>looking<sp/>for<sp/>an<sp/>overflow.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2728"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1aa604b7713b82e63154a290e21ecf700c" kindref="member">taskSWITCH_DELAYED_LISTS</ref>();</highlight></codeline>
<codeline lineno="2730"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2731"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2732"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2734"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2735"><highlight class="normal"></highlight></codeline>
<codeline lineno="2736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>if<sp/>this<sp/>tick<sp/>has<sp/>made<sp/>a<sp/>timeout<sp/>expire.<sp/><sp/>Tasks<sp/>are<sp/>stored<sp/>in</highlight></codeline>
<codeline lineno="2737"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>queue<sp/>in<sp/>the<sp/>order<sp/>of<sp/>their<sp/>wake<sp/>time<sp/>-<sp/>meaning<sp/>once<sp/>one<sp/>task</highlight></codeline>
<codeline lineno="2738"><highlight class="comment"><sp/><sp/><sp/><sp/>has<sp/>been<sp/>found<sp/>whose<sp/>block<sp/>time<sp/>has<sp/>not<sp/>expired<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="2739"><highlight class="comment"><sp/><sp/><sp/><sp/>look<sp/>any<sp/>further<sp/>down<sp/>the<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xConstTickCount<sp/>&gt;=<sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>)</highlight></codeline>
<codeline lineno="2741"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;;<sp/>)</highlight></codeline>
<codeline lineno="2743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/><ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref><sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>delayed<sp/>list<sp/>is<sp/>empty.<sp/><sp/>Set<sp/>xNextTaskUnblockTime</highlight></codeline>
<codeline lineno="2747"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>the<sp/>maximum<sp/>possible<sp/>value<sp/>so<sp/>it<sp/>is<sp/>extremely</highlight></codeline>
<codeline lineno="2748"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unlikely<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="2749"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if(<sp/>xTickCount<sp/>&gt;=<sp/>xNextTaskUnblockTime<sp/>)<sp/>test<sp/>will<sp/>pass</highlight></codeline>
<codeline lineno="2750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>next<sp/>time<sp/>through.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>=<sp/><ref refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" kindref="member">portMAX_DELAY</ref>;<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="2753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>delayed<sp/>list<sp/>is<sp/>not<sp/>empty,<sp/>get<sp/>the<sp/>value<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="2757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>at<sp/>the<sp/>head<sp/>of<sp/>the<sp/>delayed<sp/>list.<sp/><sp/>This<sp/>is<sp/>the<sp/>time</highlight></codeline>
<codeline lineno="2758"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>at<sp/>which<sp/>the<sp/>task<sp/>at<sp/>the<sp/>head<sp/>of<sp/>the<sp/>delayed<sp/>list<sp/>must</highlight></codeline>
<codeline lineno="2759"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>removed<sp/>from<sp/>the<sp/>Blocked<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="list_8h_1a715561302af8cb5b74416b23ce4e999d" kindref="member">listGET_OWNER_OF_HEAD_ENTRY</ref>(<sp/><ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>void<sp/>*<sp/>is<sp/>used<sp/>as<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>with<sp/>timers<sp/>and<sp/>co-routines<sp/>too.<sp/><sp/>Alignment<sp/>is<sp/>known<sp/>to<sp/>be<sp/>fine<sp/>as<sp/>the<sp/>type<sp/>of<sp/>the<sp/>pointer<sp/>stored<sp/>and<sp/>retrieved<sp/>is<sp/>the<sp/>same.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xItemValue<sp/>=<sp/><ref refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" kindref="member">listGET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2762"><highlight class="normal"></highlight></codeline>
<codeline lineno="2763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xConstTickCount<sp/>&lt;<sp/>xItemValue<sp/>)</highlight></codeline>
<codeline lineno="2764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>not<sp/>time<sp/>to<sp/>unblock<sp/>this<sp/>item<sp/>yet,<sp/>but<sp/>the</highlight></codeline>
<codeline lineno="2766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>item<sp/>value<sp/>is<sp/>the<sp/>time<sp/>at<sp/>which<sp/>the<sp/>task<sp/>at<sp/>the<sp/>head</highlight></codeline>
<codeline lineno="2767"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>of<sp/>the<sp/>blocked<sp/>list<sp/>must<sp/>be<sp/>removed<sp/>from<sp/>the<sp/>Blocked</highlight></codeline>
<codeline lineno="2768"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state<sp/>-<sp/>so<sp/>record<sp/>the<sp/>item<sp/>value<sp/>in</highlight></codeline>
<codeline lineno="2769"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xNextTaskUnblockTime.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>=<sp/>xItemValue;</highlight></codeline>
<codeline lineno="2771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;<sp/></highlight><highlight class="comment">/*lint<sp/>!e9011<sp/>Code<sp/>structure<sp/>here<sp/>is<sp/>deedmed<sp/>easier<sp/>to<sp/>understand<sp/>with<sp/>multiple<sp/>breaks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2777"><highlight class="normal"></highlight></codeline>
<codeline lineno="2778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>time<sp/>to<sp/>remove<sp/>the<sp/>item<sp/>from<sp/>the<sp/>Blocked<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2780"><highlight class="normal"></highlight></codeline>
<codeline lineno="2781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Is<sp/>the<sp/>task<sp/>waiting<sp/>on<sp/>an<sp/>event<sp/>also?<sp/><sp/>If<sp/>so<sp/>remove</highlight></codeline>
<codeline lineno="2782"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>from<sp/>the<sp/>event<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a7c4dff11380cd843ed0b6a8dc065916b" kindref="member">listLIST_ITEM_CONTAINER</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="2786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2791"><highlight class="normal"></highlight></codeline>
<codeline lineno="2792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Place<sp/>the<sp/>unblocked<sp/>task<sp/>into<sp/>the<sp/>appropriate<sp/>ready</highlight></codeline>
<codeline lineno="2793"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="2795"><highlight class="normal"></highlight></codeline>
<codeline lineno="2796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>being<sp/>unblocked<sp/>cannot<sp/>cause<sp/>an<sp/>immediate</highlight></codeline>
<codeline lineno="2797"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>context<sp/>switch<sp/>if<sp/>preemption<sp/>is<sp/>turned<sp/>off.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2798"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/><sp/>configUSE_PREEMPTION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Preemption<sp/>is<sp/>on,<sp/>but<sp/>a<sp/>context<sp/>switch<sp/>should</highlight></codeline>
<codeline lineno="2801"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>only<sp/>be<sp/>performed<sp/>if<sp/>the<sp/>unblocked<sp/>task<sp/>has<sp/>a</highlight></codeline>
<codeline lineno="2802"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priority<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>or<sp/>higher<sp/>than<sp/>the</highlight></codeline>
<codeline lineno="2803"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>currently<sp/>executing<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&gt;=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="2805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSwitchRequired<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2813"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_PREEMPTION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2816"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2817"><highlight class="normal"></highlight></codeline>
<codeline lineno="2818"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Tasks<sp/>of<sp/>equal<sp/>priority<sp/>to<sp/>the<sp/>currently<sp/>running<sp/>task<sp/>will<sp/>share</highlight></codeline>
<codeline lineno="2819"><highlight class="comment"><sp/><sp/><sp/><sp/>processing<sp/>time<sp/>(time<sp/>slice)<sp/>if<sp/>preemption<sp/>is<sp/>on,<sp/>and<sp/>the<sp/>application</highlight></codeline>
<codeline lineno="2820"><highlight class="comment"><sp/><sp/><sp/><sp/>writer<sp/>has<sp/>not<sp/>explicitly<sp/>turned<sp/>time<sp/>slicing<sp/>off.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2821"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>(<sp/>configUSE_PREEMPTION<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configUSE_TIME_SLICING<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2822"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" kindref="member">listCURRENT_LIST_LENGTH</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>]<sp/>)<sp/>)<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="2824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSwitchRequired<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2831"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2832"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>(<sp/>configUSE_PREEMPTION<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configUSE_TIME_SLICING<sp/>==<sp/>1<sp/>)<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2833"><highlight class="normal"></highlight></codeline>
<codeline lineno="2834"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_TICK_HOOK<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2835"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2836"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Guard<sp/>against<sp/>the<sp/>tick<sp/>hook<sp/>being<sp/>called<sp/>when<sp/>the<sp/>pended<sp/>tick</highlight></codeline>
<codeline lineno="2837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>count<sp/>is<sp/>being<sp/>unwound<sp/>(when<sp/>the<sp/>scheduler<sp/>is<sp/>being<sp/>unlocked).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1aa7a2317195d855e6961dd8bcaab9496a" kindref="member">xPendedTicks</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="2839"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmsis__os2_8c_1a9ca051aa77e17583aa5a85d5de5c199a" kindref="member">vApplicationTickHook</ref>();</highlight></codeline>
<codeline lineno="2841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2842"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2844"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2847"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TICK_HOOK<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2848"><highlight class="normal"></highlight></codeline>
<codeline lineno="2849"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_PREEMPTION<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2850"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2851"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xSwitchRequired<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="2858"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2859"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2860"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_PREEMPTION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2861"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2862"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2863"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2864"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="tasks_8c_1aa7a2317195d855e6961dd8bcaab9496a" kindref="member">xPendedTicks</ref>;</highlight></codeline>
<codeline lineno="2865"><highlight class="normal"></highlight></codeline>
<codeline lineno="2866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>tick<sp/>hook<sp/>gets<sp/>called<sp/>at<sp/>regular<sp/>intervals,<sp/>even<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="2867"><highlight class="comment"><sp/><sp/><sp/><sp/>scheduler<sp/>is<sp/>locked.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2868"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_TICK_HOOK<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2869"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmsis__os2_8c_1a9ca051aa77e17583aa5a85d5de5c199a" kindref="member">vApplicationTickHook</ref>();</highlight></codeline>
<codeline lineno="2871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2872"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2873"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2874"><highlight class="normal"></highlight></codeline>
<codeline lineno="2875"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xSwitchRequired;</highlight></codeline>
<codeline lineno="2876"><highlight class="normal">}</highlight></codeline>
<codeline lineno="2877"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2878"><highlight class="normal"></highlight></codeline>
<codeline lineno="2879"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_APPLICATION_TASK_TAG<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2880"><highlight class="normal"></highlight></codeline>
<codeline lineno="2881"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vTaskSetApplicationTaskTag(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask,<sp/><ref refid="task_8h_1af984026250bf8fece2e0068874d4661d" kindref="member">TaskHookFunction_t</ref><sp/>pxHookFunction<sp/>)</highlight></codeline>
<codeline lineno="2882"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2883"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*xTCB;</highlight></codeline>
<codeline lineno="2884"><highlight class="normal"></highlight></codeline>
<codeline lineno="2885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>xTask<sp/>is<sp/>NULL<sp/>then<sp/>it<sp/>is<sp/>the<sp/>task<sp/>hook<sp/>of<sp/>the<sp/>calling<sp/>task<sp/>that<sp/>is</highlight></codeline>
<codeline lineno="2886"><highlight class="comment"><sp/><sp/><sp/><sp/>getting<sp/>set.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTask<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2888"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTCB<sp/>=<sp/>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/>)<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>;</highlight></codeline>
<codeline lineno="2890"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2891"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2892"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2893"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTCB<sp/>=<sp/>xTask;</highlight></codeline>
<codeline lineno="2894"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2895"><highlight class="normal"></highlight></codeline>
<codeline lineno="2896"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Save<sp/>the<sp/>hook<sp/>function<sp/>in<sp/>the<sp/>TCB.<sp/><sp/>A<sp/>critical<sp/>section<sp/>is<sp/>required<sp/>as</highlight></codeline>
<codeline lineno="2897"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>value<sp/>can<sp/>be<sp/>accessed<sp/>from<sp/>an<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2898"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2899"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTCB-&gt;pxTaskTag<sp/>=<sp/>pxHookFunction;</highlight></codeline>
<codeline lineno="2901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2902"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2903"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2904"><highlight class="normal"></highlight></codeline>
<codeline lineno="2905"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_APPLICATION_TASK_TAG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2906"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2907"><highlight class="normal"></highlight></codeline>
<codeline lineno="2908"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_APPLICATION_TASK_TAG<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2909"><highlight class="normal"></highlight></codeline>
<codeline lineno="2910"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1af984026250bf8fece2e0068874d4661d" kindref="member">TaskHookFunction_t</ref><sp/>xTaskGetApplicationTaskTag(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)</highlight></codeline>
<codeline lineno="2911"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2912"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="2913"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1af984026250bf8fece2e0068874d4661d" kindref="member">TaskHookFunction_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2914"><highlight class="normal"></highlight></codeline>
<codeline lineno="2915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>xTask<sp/>is<sp/>NULL<sp/>then<sp/>set<sp/>the<sp/>calling<sp/>task&apos;s<sp/>hook.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2916"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="2917"><highlight class="normal"></highlight></codeline>
<codeline lineno="2918"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Save<sp/>the<sp/>hook<sp/>function<sp/>in<sp/>the<sp/>TCB.<sp/><sp/>A<sp/>critical<sp/>section<sp/>is<sp/>required<sp/>as</highlight></codeline>
<codeline lineno="2919"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>value<sp/>can<sp/>be<sp/>accessed<sp/>from<sp/>an<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2920"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2921"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>pxTCB-&gt;pxTaskTag;</highlight></codeline>
<codeline lineno="2923"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="2925"><highlight class="normal"></highlight></codeline>
<codeline lineno="2926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2927"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2928"><highlight class="normal"></highlight></codeline>
<codeline lineno="2929"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_APPLICATION_TASK_TAG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2930"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2931"><highlight class="normal"></highlight></codeline>
<codeline lineno="2932"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_APPLICATION_TASK_TAG<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2933"><highlight class="normal"></highlight></codeline>
<codeline lineno="2934"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1af984026250bf8fece2e0068874d4661d" kindref="member">TaskHookFunction_t</ref><sp/>xTaskGetApplicationTaskTagFromISR(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)</highlight></codeline>
<codeline lineno="2935"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2936"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="2937"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1af984026250bf8fece2e0068874d4661d" kindref="member">TaskHookFunction_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2938"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="2939"><highlight class="normal"></highlight></codeline>
<codeline lineno="2940"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>xTask<sp/>is<sp/>NULL<sp/>then<sp/>set<sp/>the<sp/>calling<sp/>task&apos;s<sp/>hook.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2941"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="2942"><highlight class="normal"></highlight></codeline>
<codeline lineno="2943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Save<sp/>the<sp/>hook<sp/>function<sp/>in<sp/>the<sp/>TCB.<sp/><sp/>A<sp/>critical<sp/>section<sp/>is<sp/>required<sp/>as</highlight></codeline>
<codeline lineno="2944"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>value<sp/>can<sp/>be<sp/>accessed<sp/>from<sp/>an<sp/>interrupt.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2945"><highlight class="normal"><sp/><sp/><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="2946"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>pxTCB-&gt;pxTaskTag;</highlight></codeline>
<codeline lineno="2948"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2949"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="2950"><highlight class="normal"></highlight></codeline>
<codeline lineno="2951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2952"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2953"><highlight class="normal"></highlight></codeline>
<codeline lineno="2954"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_APPLICATION_TASK_TAG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2955"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2956"><highlight class="normal"></highlight></codeline>
<codeline lineno="2957"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_APPLICATION_TASK_TAG<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2958"><highlight class="normal"></highlight></codeline>
<codeline lineno="2959"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="task_8h_1ab6607e5d8a9664e3aa9fe16efa694e83" kindref="member">xTaskCallApplicationTaskHook</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvParameter<sp/>)</highlight></codeline>
<codeline lineno="2960"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2961"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*xTCB;</highlight></codeline>
<codeline lineno="2962"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="2963"><highlight class="normal"></highlight></codeline>
<codeline lineno="2964"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>xTask<sp/>is<sp/>NULL<sp/>then<sp/>we<sp/>are<sp/>calling<sp/>our<sp/>own<sp/>task<sp/>hook.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2965"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTask<sp/>==<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2966"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTCB<sp/>=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>;</highlight></codeline>
<codeline lineno="2968"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2969"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2970"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTCB<sp/>=<sp/>xTask;</highlight></codeline>
<codeline lineno="2972"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2973"><highlight class="normal"></highlight></codeline>
<codeline lineno="2974"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTCB-&gt;pxTaskTag<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="2975"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/>xTCB-&gt;pxTaskTag(<sp/>pvParameter<sp/>);</highlight></codeline>
<codeline lineno="2977"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2979"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="2980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="2981"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="2982"><highlight class="normal"></highlight></codeline>
<codeline lineno="2983"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="2984"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2985"><highlight class="normal"></highlight></codeline>
<codeline lineno="2986"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_APPLICATION_TASK_TAG<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2987"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2988" refid="task_8h_1a7a82c12c2407390ecbb70c123aa11e58" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="2989"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a9c86137bc3c1cbffc39fff22627cb885" kindref="member">vTaskSwitchContext</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="2990"><highlight class="normal">{</highlight></codeline>
<codeline lineno="2991"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>!=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="2992"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>scheduler<sp/>is<sp/>currently<sp/>suspended<sp/>-<sp/>do<sp/>not<sp/>allow<sp/>a<sp/>context</highlight></codeline>
<codeline lineno="2994"><highlight class="comment"><sp/><sp/><sp/><sp/>switch.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2995"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="2996"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="2997"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2998"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="2999"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="3000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a4b94b0d35e9a4ad783af7be32cabbdaa" kindref="member">traceTASK_SWITCHED_OUT</ref>();</highlight></codeline>
<codeline lineno="3001"><highlight class="normal"></highlight></codeline>
<codeline lineno="3002"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configGENERATE_RUN_TIME_STATS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3003"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3004"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>portALT_GET_RUN_TIME_COUNTER_VALUE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portALT_GET_RUN_TIME_COUNTER_VALUE(<sp/>ulTotalRunTime<sp/>);</highlight></codeline>
<codeline lineno="3006"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3007"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ulTotalRunTime<sp/>=<sp/>portGET_RUN_TIME_COUNTER_VALUE();</highlight></codeline>
<codeline lineno="3008"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3009"><highlight class="normal"></highlight></codeline>
<codeline lineno="3010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>amount<sp/>of<sp/>time<sp/>the<sp/>task<sp/>has<sp/>been<sp/>running<sp/>to<sp/>the</highlight></codeline>
<codeline lineno="3011"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>accumulated<sp/>time<sp/>so<sp/>far.<sp/><sp/>The<sp/>time<sp/>the<sp/>task<sp/>started<sp/>running<sp/>was</highlight></codeline>
<codeline lineno="3012"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>stored<sp/>in<sp/>ulTaskSwitchedInTime.<sp/><sp/>Note<sp/>that<sp/>there<sp/>is<sp/>no<sp/>overflow</highlight></codeline>
<codeline lineno="3013"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>protection<sp/>here<sp/>so<sp/>count<sp/>values<sp/>are<sp/>only<sp/>valid<sp/>until<sp/>the<sp/>timer</highlight></codeline>
<codeline lineno="3014"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>overflows.<sp/><sp/>The<sp/>guard<sp/>against<sp/>negative<sp/>values<sp/>is<sp/>to<sp/>protect</highlight></codeline>
<codeline lineno="3015"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>against<sp/>suspect<sp/>run<sp/>time<sp/>stat<sp/>counter<sp/>implementations<sp/>-<sp/>which</highlight></codeline>
<codeline lineno="3016"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>are<sp/>provided<sp/>by<sp/>the<sp/>application,<sp/>not<sp/>the<sp/>kernel.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3017"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ulTotalRunTime<sp/>&gt;<sp/>ulTaskSwitchedInTime<sp/>)</highlight></codeline>
<codeline lineno="3018"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3019"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ulRunTimeCounter<sp/>+=<sp/>(<sp/>ulTotalRunTime<sp/>-<sp/>ulTaskSwitchedInTime<sp/>);</highlight></codeline>
<codeline lineno="3020"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3021"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3022"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3023"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="3024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3025"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ulTaskSwitchedInTime<sp/>=<sp/>ulTotalRunTime;</highlight></codeline>
<codeline lineno="3026"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3027"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configGENERATE_RUN_TIME_STATS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3028"><highlight class="normal"></highlight></codeline>
<codeline lineno="3029"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>for<sp/>stack<sp/>overflow,<sp/>if<sp/>configured.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="stack__macros_8h_1a48d287f599f5c139ae0764f024368806" kindref="member">taskCHECK_FOR_STACK_OVERFLOW</ref>();</highlight></codeline>
<codeline lineno="3031"><highlight class="normal"></highlight></codeline>
<codeline lineno="3032"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Before<sp/>the<sp/>currently<sp/>running<sp/>task<sp/>is<sp/>switched<sp/>out,<sp/>save<sp/>its<sp/>errno.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3033"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>configUSE_POSIX_ERRNO<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3034"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;iTaskErrno<sp/>=<sp/>FreeRTOS_errno;</highlight></codeline>
<codeline lineno="3036"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3037"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3038"><highlight class="normal"></highlight></codeline>
<codeline lineno="3039"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Select<sp/>a<sp/>new<sp/>task<sp/>to<sp/>run<sp/>using<sp/>either<sp/>the<sp/>generic<sp/>C<sp/>or<sp/>port</highlight></codeline>
<codeline lineno="3040"><highlight class="comment"><sp/><sp/><sp/><sp/>optimised<sp/>asm<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3041"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1adace394d56a7fe7a8f8ee83edba3537c" kindref="member">taskSELECT_HIGHEST_PRIORITY_TASK</ref>();<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>void<sp/>*<sp/>is<sp/>used<sp/>as<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>with<sp/>timers<sp/>and<sp/>co-routines<sp/>too.<sp/><sp/>Alignment<sp/>is<sp/>known<sp/>to<sp/>be<sp/>fine<sp/>as<sp/>the<sp/>type<sp/>of<sp/>the<sp/>pointer<sp/>stored<sp/>and<sp/>retrieved<sp/>is<sp/>the<sp/>same.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3042"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2f813fe80d3519a396a9f2bb7cc7e820" kindref="member">traceTASK_SWITCHED_IN</ref>();</highlight></codeline>
<codeline lineno="3043"><highlight class="normal"></highlight></codeline>
<codeline lineno="3044"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>After<sp/>the<sp/>new<sp/>task<sp/>is<sp/>switched<sp/>in,<sp/>update<sp/>the<sp/>global<sp/>errno.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3045"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>configUSE_POSIX_ERRNO<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3046"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FreeRTOS_errno<sp/>=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;iTaskErrno;</highlight></codeline>
<codeline lineno="3048"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3049"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3050"><highlight class="normal"></highlight></codeline>
<codeline lineno="3051"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_NEWLIB_REENTRANT<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3052"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Switch<sp/>Newlib&apos;s<sp/>_impure_ptr<sp/>variable<sp/>to<sp/>point<sp/>to<sp/>the<sp/>_reent</highlight></codeline>
<codeline lineno="3054"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>structure<sp/>specific<sp/>to<sp/>this<sp/>task.</highlight></codeline>
<codeline lineno="3055"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>See<sp/>the<sp/>third<sp/>party<sp/>link<sp/>http://www.nadler.com/embedded/newlibAndFreeRTOS.html</highlight></codeline>
<codeline lineno="3056"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>for<sp/>additional<sp/>information.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_impure_ptr<sp/>=<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;xNewLib_reent<sp/>);</highlight></codeline>
<codeline lineno="3058"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3059"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_NEWLIB_REENTRANT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3060"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3061"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3062"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3063" refid="task_8h_1a56ae23bc0dece4522d666959902221ca" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="3064"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1adc9eb47ceecf7dd7ee325bebff9eafc5" kindref="member">vTaskPlaceOnEventList</ref>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxEventList,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="3065"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3066"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxEventList<sp/>);</highlight></codeline>
<codeline lineno="3067"><highlight class="normal"></highlight></codeline>
<codeline lineno="3068"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>BE<sp/>CALLED<sp/>WITH<sp/>EITHER<sp/>INTERRUPTS<sp/>DISABLED<sp/>OR<sp/>THE</highlight></codeline>
<codeline lineno="3069"><highlight class="comment"><sp/><sp/>SCHEDULER<sp/>SUSPENDED<sp/>AND<sp/>THE<sp/>QUEUE<sp/>BEING<sp/>ACCESSED<sp/>LOCKED.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3070"><highlight class="normal"></highlight></codeline>
<codeline lineno="3071"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Place<sp/>the<sp/>event<sp/>list<sp/>item<sp/>of<sp/>the<sp/>TCB<sp/>in<sp/>the<sp/>appropriate<sp/>event<sp/>list.</highlight></codeline>
<codeline lineno="3072"><highlight class="comment"><sp/><sp/>This<sp/>is<sp/>placed<sp/>in<sp/>the<sp/>list<sp/>in<sp/>priority<sp/>order<sp/>so<sp/>the<sp/>highest<sp/>priority<sp/>task</highlight></codeline>
<codeline lineno="3073"><highlight class="comment"><sp/><sp/>is<sp/>the<sp/>first<sp/>to<sp/>be<sp/>woken<sp/>by<sp/>the<sp/>event.<sp/><sp/>The<sp/>queue<sp/>that<sp/>contains<sp/>the<sp/>event</highlight></codeline>
<codeline lineno="3074"><highlight class="comment"><sp/><sp/>list<sp/>is<sp/>locked,<sp/>preventing<sp/>simultaneous<sp/>access<sp/>from<sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3075"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1aa129290da5cbda47dffb7bf877b2f02a" kindref="member">vListInsert</ref>(<sp/>pxEventList,<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3076"><highlight class="normal"></highlight></codeline>
<codeline lineno="3077"><highlight class="normal"><sp/><sp/><ref refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" kindref="member">prvAddCurrentTaskToDelayedList</ref>(<sp/>xTicksToWait,<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref><sp/>);</highlight></codeline>
<codeline lineno="3078"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3079"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3080" refid="task_8h_1a9d52fa7b60cc6a7b4fd0846700d7834c" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="3081"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a0896d9cd10d789ef8dbb95c4959c3ce5" kindref="member">vTaskPlaceOnUnorderedEventList</ref>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/>pxEventList,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xItemValue,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="3082"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3083"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxEventList<sp/>);</highlight></codeline>
<codeline lineno="3084"><highlight class="normal"></highlight></codeline>
<codeline lineno="3085"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>BE<sp/>CALLED<sp/>WITH<sp/>THE<sp/>SCHEDULER<sp/>SUSPENDED.<sp/><sp/>It<sp/>is<sp/>used<sp/>by</highlight></codeline>
<codeline lineno="3086"><highlight class="comment"><sp/><sp/>the<sp/>event<sp/>groups<sp/>implementation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3087"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>!=<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3088"><highlight class="normal"></highlight></codeline>
<codeline lineno="3089"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>item<sp/>value<sp/>in<sp/>the<sp/>event<sp/>list<sp/>item.<sp/><sp/>It<sp/>is<sp/>safe<sp/>to<sp/>access<sp/>the</highlight></codeline>
<codeline lineno="3090"><highlight class="comment"><sp/><sp/>event<sp/>list<sp/>item<sp/>here<sp/>as<sp/>interrupts<sp/>won&apos;t<sp/>access<sp/>the<sp/>event<sp/>list<sp/>item<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="3091"><highlight class="comment"><sp/><sp/>task<sp/>that<sp/>is<sp/>not<sp/>in<sp/>the<sp/>Blocked<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3092"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" kindref="member">listSET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>),<sp/>xItemValue<sp/>|<sp/><ref refid="tasks_8c_1a3e36f3eda563e810a24ab36ee7c978d4" kindref="member">taskEVENT_LIST_ITEM_VALUE_IN_USE</ref><sp/>);</highlight></codeline>
<codeline lineno="3093"><highlight class="normal"></highlight></codeline>
<codeline lineno="3094"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Place<sp/>the<sp/>event<sp/>list<sp/>item<sp/>of<sp/>the<sp/>TCB<sp/>at<sp/>the<sp/>end<sp/>of<sp/>the<sp/>appropriate<sp/>event</highlight></codeline>
<codeline lineno="3095"><highlight class="comment"><sp/><sp/>list.<sp/><sp/>It<sp/>is<sp/>safe<sp/>to<sp/>access<sp/>the<sp/>event<sp/>list<sp/>here<sp/>because<sp/>it<sp/>is<sp/>part<sp/>of<sp/>an</highlight></codeline>
<codeline lineno="3096"><highlight class="comment"><sp/><sp/>event<sp/>group<sp/>implementation<sp/>-<sp/>and<sp/>interrupts<sp/>don&apos;t<sp/>access<sp/>event<sp/>groups</highlight></codeline>
<codeline lineno="3097"><highlight class="comment"><sp/><sp/>directly<sp/>(instead<sp/>they<sp/>access<sp/>them<sp/>indirectly<sp/>by<sp/>pending<sp/>function<sp/>calls<sp/>to</highlight></codeline>
<codeline lineno="3098"><highlight class="comment"><sp/><sp/>the<sp/>task<sp/>level).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3099"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" kindref="member">vListInsertEnd</ref>(<sp/>pxEventList,<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3100"><highlight class="normal"></highlight></codeline>
<codeline lineno="3101"><highlight class="normal"><sp/><sp/><ref refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" kindref="member">prvAddCurrentTaskToDelayedList</ref>(<sp/>xTicksToWait,<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref><sp/>);</highlight></codeline>
<codeline lineno="3102"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3103"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3104"><highlight class="normal"></highlight></codeline>
<codeline lineno="3105"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3106"><highlight class="normal"></highlight></codeline>
<codeline lineno="3107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ada3eb00e16241f5b648184a406a6a6fd" kindref="member">vTaskPlaceOnEventListRestricted</ref>(<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxEventList,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xWaitIndefinitely<sp/>)</highlight></codeline>
<codeline lineno="3108"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3109"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxEventList<sp/>);</highlight></codeline>
<codeline lineno="3110"><highlight class="normal"></highlight></codeline>
<codeline lineno="3111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>should<sp/>not<sp/>be<sp/>called<sp/>by<sp/>application<sp/>code<sp/>hence<sp/>the</highlight></codeline>
<codeline lineno="3112"><highlight class="comment"><sp/><sp/><sp/><sp/>&apos;Restricted&apos;<sp/>in<sp/>its<sp/>name.<sp/><sp/>It<sp/>is<sp/>not<sp/>part<sp/>of<sp/>the<sp/>public<sp/>API.<sp/><sp/>It<sp/>is</highlight></codeline>
<codeline lineno="3113"><highlight class="comment"><sp/><sp/><sp/><sp/>designed<sp/>for<sp/>use<sp/>by<sp/>kernel<sp/>code,<sp/>and<sp/>has<sp/>special<sp/>calling<sp/>requirements<sp/>-</highlight></codeline>
<codeline lineno="3114"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>should<sp/>be<sp/>called<sp/>with<sp/>the<sp/>scheduler<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3115"><highlight class="normal"></highlight></codeline>
<codeline lineno="3116"><highlight class="normal"></highlight></codeline>
<codeline lineno="3117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Place<sp/>the<sp/>event<sp/>list<sp/>item<sp/>of<sp/>the<sp/>TCB<sp/>in<sp/>the<sp/>appropriate<sp/>event<sp/>list.</highlight></codeline>
<codeline lineno="3118"><highlight class="comment"><sp/><sp/><sp/><sp/>In<sp/>this<sp/>case<sp/>it<sp/>is<sp/>assume<sp/>that<sp/>this<sp/>is<sp/>the<sp/>only<sp/>task<sp/>that<sp/>is<sp/>going<sp/>to</highlight></codeline>
<codeline lineno="3119"><highlight class="comment"><sp/><sp/><sp/><sp/>be<sp/>waiting<sp/>on<sp/>this<sp/>event<sp/>list,<sp/>so<sp/>the<sp/>faster<sp/>vListInsertEnd()<sp/>function</highlight></codeline>
<codeline lineno="3120"><highlight class="comment"><sp/><sp/><sp/><sp/>can<sp/>be<sp/>used<sp/>in<sp/>place<sp/>of<sp/>vListInsert.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" kindref="member">vListInsertEnd</ref>(<sp/>pxEventList,<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3122"><highlight class="normal"></highlight></codeline>
<codeline lineno="3123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>task<sp/>should<sp/>block<sp/>indefinitely<sp/>then<sp/>set<sp/>the<sp/>block<sp/>time<sp/>to<sp/>a</highlight></codeline>
<codeline lineno="3124"><highlight class="comment"><sp/><sp/><sp/><sp/>value<sp/>that<sp/>will<sp/>be<sp/>recognised<sp/>as<sp/>an<sp/>indefinite<sp/>delay<sp/>inside<sp/>the</highlight></codeline>
<codeline lineno="3125"><highlight class="comment"><sp/><sp/><sp/><sp/>prvAddCurrentTaskToDelayedList()<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xWaitIndefinitely<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="3127"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTicksToWait<sp/>=<sp/><ref refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" kindref="member">portMAX_DELAY</ref>;</highlight></codeline>
<codeline lineno="3129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3130"><highlight class="normal"></highlight></codeline>
<codeline lineno="3131"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac7bba9e806376061522f5cb2eef261c4" kindref="member">traceTASK_DELAY_UNTIL</ref>(<sp/>(<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref><sp/>+<sp/>xTicksToWait<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3132"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" kindref="member">prvAddCurrentTaskToDelayedList</ref>(<sp/>xTicksToWait,<sp/>xWaitIndefinitely<sp/>);</highlight></codeline>
<codeline lineno="3133"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3134"><highlight class="normal"></highlight></codeline>
<codeline lineno="3135"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TIMERS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3136"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3137" refid="task_8h_1a14513b7dd36055f73fba3c5ebbdc1b06" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="3138"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="tasks_8c_1a6d21c9054b62d8bc1bfb2724e11578d9" kindref="member">xTaskRemoveFromEventList</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxEventList<sp/>)</highlight></codeline>
<codeline lineno="3139"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3140"><highlight class="normal"><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxUnblockedTCB;</highlight></codeline>
<codeline lineno="3141"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="3142"><highlight class="normal"></highlight></codeline>
<codeline lineno="3143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>BE<sp/>CALLED<sp/>FROM<sp/>A<sp/>CRITICAL<sp/>SECTION.<sp/><sp/>It<sp/>can<sp/>also<sp/>be</highlight></codeline>
<codeline lineno="3144"><highlight class="comment"><sp/><sp/>called<sp/>from<sp/>a<sp/>critical<sp/>section<sp/>within<sp/>an<sp/>ISR.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3145"><highlight class="normal"></highlight></codeline>
<codeline lineno="3146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>event<sp/>list<sp/>is<sp/>sorted<sp/>in<sp/>priority<sp/>order,<sp/>so<sp/>the<sp/>first<sp/>in<sp/>the<sp/>list<sp/>can</highlight></codeline>
<codeline lineno="3147"><highlight class="comment"><sp/><sp/>be<sp/>removed<sp/>as<sp/>it<sp/>is<sp/>known<sp/>to<sp/>be<sp/>the<sp/>highest<sp/>priority.<sp/><sp/>Remove<sp/>the<sp/>TCB<sp/>from</highlight></codeline>
<codeline lineno="3148"><highlight class="comment"><sp/><sp/>the<sp/>delayed<sp/>list,<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>ready<sp/>list.</highlight></codeline>
<codeline lineno="3149"><highlight class="comment"></highlight></codeline>
<codeline lineno="3150"><highlight class="comment"><sp/><sp/>If<sp/>an<sp/>event<sp/>is<sp/>for<sp/>a<sp/>queue<sp/>that<sp/>is<sp/>locked<sp/>then<sp/>this<sp/>function<sp/>will<sp/>never</highlight></codeline>
<codeline lineno="3151"><highlight class="comment"><sp/><sp/>get<sp/>called<sp/>-<sp/>the<sp/>lock<sp/>count<sp/>on<sp/>the<sp/>queue<sp/>will<sp/>get<sp/>modified<sp/>instead.<sp/><sp/>This</highlight></codeline>
<codeline lineno="3152"><highlight class="comment"><sp/><sp/>means<sp/>exclusive<sp/>access<sp/>to<sp/>the<sp/>event<sp/>list<sp/>is<sp/>guaranteed<sp/>here.</highlight></codeline>
<codeline lineno="3153"><highlight class="comment"></highlight></codeline>
<codeline lineno="3154"><highlight class="comment"><sp/><sp/>This<sp/>function<sp/>assumes<sp/>that<sp/>a<sp/>check<sp/>has<sp/>already<sp/>been<sp/>made<sp/>to<sp/>ensure<sp/>that</highlight></codeline>
<codeline lineno="3155"><highlight class="comment"><sp/><sp/>pxEventList<sp/>is<sp/>not<sp/>empty.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3156"><highlight class="normal"><sp/><sp/>pxUnblockedTCB<sp/>=<sp/><ref refid="list_8h_1a715561302af8cb5b74416b23ce4e999d" kindref="member">listGET_OWNER_OF_HEAD_ENTRY</ref>(<sp/>pxEventList<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>void<sp/>*<sp/>is<sp/>used<sp/>as<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>with<sp/>timers<sp/>and<sp/>co-routines<sp/>too.<sp/><sp/>Alignment<sp/>is<sp/>known<sp/>to<sp/>be<sp/>fine<sp/>as<sp/>the<sp/>type<sp/>of<sp/>the<sp/>pointer<sp/>stored<sp/>and<sp/>retrieved<sp/>is<sp/>the<sp/>same.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3157"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxUnblockedTCB<sp/>);</highlight></codeline>
<codeline lineno="3158"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxUnblockedTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3159"><highlight class="normal"></highlight></codeline>
<codeline lineno="3160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="3161"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3162"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxUnblockedTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxUnblockedTCB<sp/>);</highlight></codeline>
<codeline lineno="3164"><highlight class="normal"></highlight></codeline>
<codeline lineno="3165"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>configUSE_TICKLESS_IDLE<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3166"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>a<sp/>task<sp/>is<sp/>blocked<sp/>on<sp/>a<sp/>kernel<sp/>object<sp/>then<sp/>xNextTaskUnblockTime</highlight></codeline>
<codeline lineno="3168"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>might<sp/>be<sp/>set<sp/>to<sp/>the<sp/>blocked<sp/>task&apos;s<sp/>time<sp/>out<sp/>time.<sp/><sp/>If<sp/>the<sp/>task<sp/>is</highlight></codeline>
<codeline lineno="3169"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>unblocked<sp/>for<sp/>a<sp/>reason<sp/>other<sp/>than<sp/>a<sp/>timeout<sp/>xNextTaskUnblockTime<sp/>is</highlight></codeline>
<codeline lineno="3170"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>normally<sp/>left<sp/>unchanged,<sp/>because<sp/>it<sp/>is<sp/>automatically<sp/>reset<sp/>to<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="3171"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>when<sp/>the<sp/>tick<sp/>count<sp/>equals<sp/>xNextTaskUnblockTime.<sp/><sp/>However<sp/>if</highlight></codeline>
<codeline lineno="3172"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>tickless<sp/>idling<sp/>is<sp/>used<sp/>it<sp/>might<sp/>be<sp/>more<sp/>important<sp/>to<sp/>enter<sp/>sleep<sp/>mode</highlight></codeline>
<codeline lineno="3173"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>at<sp/>the<sp/>earliest<sp/>possible<sp/>time<sp/>-<sp/>so<sp/>reset<sp/>xNextTaskUnblockTime<sp/>here<sp/>to</highlight></codeline>
<codeline lineno="3174"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>ensure<sp/>it<sp/>is<sp/>updated<sp/>at<sp/>the<sp/>earliest<sp/>possible<sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" kindref="member">prvResetNextTaskUnblockTime</ref>();</highlight></codeline>
<codeline lineno="3176"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3177"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3180"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>delayed<sp/>and<sp/>ready<sp/>lists<sp/>cannot<sp/>be<sp/>accessed,<sp/>so<sp/>hold<sp/>this<sp/>task</highlight></codeline>
<codeline lineno="3182"><highlight class="comment"><sp/><sp/><sp/><sp/>pending<sp/>until<sp/>the<sp/>scheduler<sp/>is<sp/>resumed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3183"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" kindref="member">vListInsertEnd</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" kindref="member">xPendingReadyList</ref><sp/>),<sp/>&amp;(<sp/>pxUnblockedTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3185"><highlight class="normal"></highlight></codeline>
<codeline lineno="3186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxUnblockedTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&gt;<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="3187"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>true<sp/>if<sp/>the<sp/>task<sp/>removed<sp/>from<sp/>the<sp/>event<sp/>list<sp/>has<sp/>a<sp/>higher</highlight></codeline>
<codeline lineno="3189"><highlight class="comment"><sp/><sp/><sp/><sp/>priority<sp/>than<sp/>the<sp/>calling<sp/>task.<sp/><sp/>This<sp/>allows<sp/>the<sp/>calling<sp/>task<sp/>to<sp/>know<sp/>if</highlight></codeline>
<codeline lineno="3190"><highlight class="comment"><sp/><sp/><sp/><sp/>it<sp/>should<sp/>force<sp/>a<sp/>context<sp/>switch<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3191"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="3192"><highlight class="normal"></highlight></codeline>
<codeline lineno="3193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mark<sp/>that<sp/>a<sp/>yield<sp/>is<sp/>pending<sp/>in<sp/>case<sp/>the<sp/>user<sp/>is<sp/>not<sp/>using<sp/>the</highlight></codeline>
<codeline lineno="3194"><highlight class="comment"><sp/><sp/><sp/><sp/>&quot;xHigherPriorityTaskWoken&quot;<sp/>parameter<sp/>to<sp/>an<sp/>ISR<sp/>safe<sp/>FreeRTOS<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3195"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="3196"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3198"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3199"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="3200"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3201"><highlight class="normal"></highlight></codeline>
<codeline lineno="3202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="3203"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3204"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3205" refid="task_8h_1a340b9bc9f37c9d4d3fb6e303c3ef311b" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="3206"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a82d239ddcdd2d68abe14789b1257b11f" kindref="member">vTaskRemoveFromUnorderedEventList</ref>(<sp/><ref refid="structx_l_i_s_t___i_t_e_m" kindref="compound">ListItem_t</ref><sp/>*<sp/>pxEventListItem,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xItemValue<sp/>)</highlight></codeline>
<codeline lineno="3207"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3208"><highlight class="normal"><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxUnblockedTCB;</highlight></codeline>
<codeline lineno="3209"><highlight class="normal"></highlight></codeline>
<codeline lineno="3210"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>THIS<sp/>FUNCTION<sp/>MUST<sp/>BE<sp/>CALLED<sp/>WITH<sp/>THE<sp/>SCHEDULER<sp/>SUSPENDED.<sp/><sp/>It<sp/>is<sp/>used<sp/>by</highlight></codeline>
<codeline lineno="3211"><highlight class="comment"><sp/><sp/>the<sp/>event<sp/>flags<sp/>implementation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3212"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>);</highlight></codeline>
<codeline lineno="3213"><highlight class="normal"></highlight></codeline>
<codeline lineno="3214"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Store<sp/>the<sp/>new<sp/>item<sp/>value<sp/>in<sp/>the<sp/>event<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3215"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" kindref="member">listSET_LIST_ITEM_VALUE</ref>(<sp/>pxEventListItem,<sp/>xItemValue<sp/>|<sp/><ref refid="tasks_8c_1a3e36f3eda563e810a24ab36ee7c978d4" kindref="member">taskEVENT_LIST_ITEM_VALUE_IN_USE</ref><sp/>);</highlight></codeline>
<codeline lineno="3216"><highlight class="normal"></highlight></codeline>
<codeline lineno="3217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>the<sp/>event<sp/>list<sp/>form<sp/>the<sp/>event<sp/>flag.<sp/><sp/>Interrupts<sp/>do<sp/>not<sp/>access</highlight></codeline>
<codeline lineno="3218"><highlight class="comment"><sp/><sp/>event<sp/>flags.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3219"><highlight class="normal"><sp/><sp/>pxUnblockedTCB<sp/>=<sp/><ref refid="list_8h_1aa9469bd061a44b4f75d30c6175f66d5c" kindref="member">listGET_LIST_ITEM_OWNER</ref>(<sp/>pxEventListItem<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>void<sp/>*<sp/>is<sp/>used<sp/>as<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>with<sp/>timers<sp/>and<sp/>co-routines<sp/>too.<sp/><sp/>Alignment<sp/>is<sp/>known<sp/>to<sp/>be<sp/>fine<sp/>as<sp/>the<sp/>type<sp/>of<sp/>the<sp/>pointer<sp/>stored<sp/>and<sp/>retrieved<sp/>is<sp/>the<sp/>same.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3220"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxUnblockedTCB<sp/>);</highlight></codeline>
<codeline lineno="3221"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>pxEventListItem<sp/>);</highlight></codeline>
<codeline lineno="3222"><highlight class="normal"></highlight></codeline>
<codeline lineno="3223"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>configUSE_TICKLESS_IDLE<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3224"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>a<sp/>task<sp/>is<sp/>blocked<sp/>on<sp/>a<sp/>kernel<sp/>object<sp/>then<sp/>xNextTaskUnblockTime</highlight></codeline>
<codeline lineno="3226"><highlight class="comment"><sp/><sp/><sp/><sp/>might<sp/>be<sp/>set<sp/>to<sp/>the<sp/>blocked<sp/>task&apos;s<sp/>time<sp/>out<sp/>time.<sp/><sp/>If<sp/>the<sp/>task<sp/>is</highlight></codeline>
<codeline lineno="3227"><highlight class="comment"><sp/><sp/><sp/><sp/>unblocked<sp/>for<sp/>a<sp/>reason<sp/>other<sp/>than<sp/>a<sp/>timeout<sp/>xNextTaskUnblockTime<sp/>is</highlight></codeline>
<codeline lineno="3228"><highlight class="comment"><sp/><sp/><sp/><sp/>normally<sp/>left<sp/>unchanged,<sp/>because<sp/>it<sp/>is<sp/>automatically<sp/>reset<sp/>to<sp/>a<sp/>new</highlight></codeline>
<codeline lineno="3229"><highlight class="comment"><sp/><sp/><sp/><sp/>value<sp/>when<sp/>the<sp/>tick<sp/>count<sp/>equals<sp/>xNextTaskUnblockTime.<sp/><sp/>However<sp/>if</highlight></codeline>
<codeline lineno="3230"><highlight class="comment"><sp/><sp/><sp/><sp/>tickless<sp/>idling<sp/>is<sp/>used<sp/>it<sp/>might<sp/>be<sp/>more<sp/>important<sp/>to<sp/>enter<sp/>sleep<sp/>mode</highlight></codeline>
<codeline lineno="3231"><highlight class="comment"><sp/><sp/><sp/><sp/>at<sp/>the<sp/>earliest<sp/>possible<sp/>time<sp/>-<sp/>so<sp/>reset<sp/>xNextTaskUnblockTime<sp/>here<sp/>to</highlight></codeline>
<codeline lineno="3232"><highlight class="comment"><sp/><sp/><sp/><sp/>ensure<sp/>it<sp/>is<sp/>updated<sp/>at<sp/>the<sp/>earliest<sp/>possible<sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" kindref="member">prvResetNextTaskUnblockTime</ref>();</highlight></codeline>
<codeline lineno="3234"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3235"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3236"><highlight class="normal"></highlight></codeline>
<codeline lineno="3237"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>the<sp/>task<sp/>from<sp/>the<sp/>delayed<sp/>list<sp/>and<sp/>add<sp/>it<sp/>to<sp/>the<sp/>ready<sp/>list.<sp/><sp/>The</highlight></codeline>
<codeline lineno="3238"><highlight class="comment"><sp/><sp/>scheduler<sp/>is<sp/>suspended<sp/>so<sp/>interrupts<sp/>will<sp/>not<sp/>be<sp/>accessing<sp/>the<sp/>ready</highlight></codeline>
<codeline lineno="3239"><highlight class="comment"><sp/><sp/>lists.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3240"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxUnblockedTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3241"><highlight class="normal"><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxUnblockedTCB<sp/>);</highlight></codeline>
<codeline lineno="3242"><highlight class="normal"></highlight></codeline>
<codeline lineno="3243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxUnblockedTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&gt;<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="3244"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>unblocked<sp/>task<sp/>has<sp/>a<sp/>priority<sp/>above<sp/>that<sp/>of<sp/>the<sp/>calling<sp/>task,<sp/>so</highlight></codeline>
<codeline lineno="3246"><highlight class="comment"><sp/><sp/><sp/><sp/>a<sp/>context<sp/>switch<sp/>is<sp/>required.<sp/><sp/>This<sp/>function<sp/>is<sp/>called<sp/>with<sp/>the</highlight></codeline>
<codeline lineno="3247"><highlight class="comment"><sp/><sp/><sp/><sp/>scheduler<sp/>suspended<sp/>so<sp/>xYieldPending<sp/>is<sp/>set<sp/>so<sp/>the<sp/>context<sp/>switch</highlight></codeline>
<codeline lineno="3248"><highlight class="comment"><sp/><sp/><sp/><sp/>occurs<sp/>immediately<sp/>that<sp/>the<sp/>scheduler<sp/>is<sp/>resumed<sp/>(unsuspended).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="3250"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3252"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3253" refid="task_8h_1a67155ad4ea2482b5f4597a69f2152be0" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="3254"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a5dfb2b9e41fb002318d9c55452a91c83" kindref="member">vTaskSetTimeOutState</ref>(<sp/><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">TimeOut_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTimeOut<sp/>)</highlight></codeline>
<codeline lineno="3255"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3256"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTimeOut<sp/>);</highlight></codeline>
<codeline lineno="3257"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="3258"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3259"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTimeOut-&gt;<ref refid="structx_t_i_m_e___o_u_t_1a9289c6f97096a9b3e3fc705d0bc5a160" kindref="member">xOverflowCount</ref><sp/>=<sp/><ref refid="tasks_8c_1aba03b8cb535f03f1921f11868c98b0ef" kindref="member">xNumOfOverflows</ref>;</highlight></codeline>
<codeline lineno="3260"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTimeOut-&gt;<ref refid="structx_t_i_m_e___o_u_t_1a3464939ca050f7bcc6ffe0d8d3766337" kindref="member">xTimeOnEntering</ref><sp/>=<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref>;</highlight></codeline>
<codeline lineno="3261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3262"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="3263"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3264"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3265" refid="task_8h_1a9bff8681d5ed262e71b92805ca0da909" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="3266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a91fbc7c4b65e32fae51b7d43ebdcb131" kindref="member">vTaskInternalSetTimeOutState</ref>(<sp/><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">TimeOut_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTimeOut<sp/>)</highlight></codeline>
<codeline lineno="3267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3268"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>internal<sp/>use<sp/>only<sp/>as<sp/>it<sp/>does<sp/>not<sp/>use<sp/>a<sp/>critical<sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3269"><highlight class="normal"><sp/><sp/>pxTimeOut-&gt;<ref refid="structx_t_i_m_e___o_u_t_1a9289c6f97096a9b3e3fc705d0bc5a160" kindref="member">xOverflowCount</ref><sp/>=<sp/><ref refid="tasks_8c_1aba03b8cb535f03f1921f11868c98b0ef" kindref="member">xNumOfOverflows</ref>;</highlight></codeline>
<codeline lineno="3270"><highlight class="normal"><sp/><sp/>pxTimeOut-&gt;<ref refid="structx_t_i_m_e___o_u_t_1a3464939ca050f7bcc6ffe0d8d3766337" kindref="member">xTimeOnEntering</ref><sp/>=<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref>;</highlight></codeline>
<codeline lineno="3271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3272"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3273" refid="task_8h_1a3b018a85d339e536a6c05748dd666a3a" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="3274"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="tasks_8c_1acfc8de487c86355713d0e8546506d9e4" kindref="member">xTaskCheckForTimeOut</ref>(<sp/><ref refid="structx_t_i_m_e___o_u_t" kindref="compound">TimeOut_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTimeOut,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="3275"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3276"><highlight class="normal"><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="3277"><highlight class="normal"></highlight></codeline>
<codeline lineno="3278"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTimeOut<sp/>);</highlight></codeline>
<codeline lineno="3279"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTicksToWait<sp/>);</highlight></codeline>
<codeline lineno="3280"><highlight class="normal"></highlight></codeline>
<codeline lineno="3281"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="3282"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Minor<sp/>optimisation.<sp/><sp/>The<sp/>tick<sp/>count<sp/>cannot<sp/>change<sp/>in<sp/>this<sp/>block.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xConstTickCount<sp/>=<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref>;</highlight></codeline>
<codeline lineno="3285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xElapsedTime<sp/>=<sp/>xConstTickCount<sp/>-<sp/>pxTimeOut-&gt;<ref refid="structx_t_i_m_e___o_u_t_1a3464939ca050f7bcc6ffe0d8d3766337" kindref="member">xTimeOnEntering</ref>;</highlight></codeline>
<codeline lineno="3286"><highlight class="normal"></highlight></codeline>
<codeline lineno="3287"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>INCLUDE_xTaskAbortDelay<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ucDelayAborted<sp/>!=<sp/>(<sp/>uint8_t<sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="3289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>delay<sp/>was<sp/>aborted,<sp/>which<sp/>is<sp/>not<sp/>the<sp/>same<sp/>as<sp/>a<sp/>time<sp/>out,</highlight></codeline>
<codeline lineno="3291"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>but<sp/>has<sp/>the<sp/>same<sp/>result.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ucDelayAborted<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="3293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="3294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3296"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3297"><highlight class="normal"></highlight></codeline>
<codeline lineno="3298"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>*pxTicksToWait<sp/>==<sp/><ref refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" kindref="member">portMAX_DELAY</ref><sp/>)</highlight></codeline>
<codeline lineno="3300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>INCLUDE_vTaskSuspend<sp/>is<sp/>set<sp/>to<sp/>1<sp/>and<sp/>the<sp/>block<sp/>time</highlight></codeline>
<codeline lineno="3302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>specified<sp/>is<sp/>the<sp/>maximum<sp/>block<sp/>time<sp/>then<sp/>the<sp/>task<sp/>should<sp/>block</highlight></codeline>
<codeline lineno="3303"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indefinitely,<sp/>and<sp/>therefore<sp/>never<sp/>time<sp/>out.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="3305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3307"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3308"><highlight class="normal"></highlight></codeline>
<codeline lineno="3309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/><ref refid="tasks_8c_1aba03b8cb535f03f1921f11868c98b0ef" kindref="member">xNumOfOverflows</ref><sp/>!=<sp/>pxTimeOut-&gt;<ref refid="structx_t_i_m_e___o_u_t_1a9289c6f97096a9b3e3fc705d0bc5a160" kindref="member">xOverflowCount</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>xConstTickCount<sp/>&gt;=<sp/>pxTimeOut-&gt;<ref refid="structx_t_i_m_e___o_u_t_1a3464939ca050f7bcc6ffe0d8d3766337" kindref="member">xTimeOnEntering</ref><sp/>)<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e525<sp/>Indentation<sp/>preferred<sp/>as<sp/>is<sp/>to<sp/>make<sp/>code<sp/>within<sp/>pre-processor<sp/>directives<sp/>clearer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3310"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>tick<sp/>count<sp/>is<sp/>greater<sp/>than<sp/>the<sp/>time<sp/>at<sp/>which</highlight></codeline>
<codeline lineno="3312"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>vTaskSetTimeout()<sp/>was<sp/>called,<sp/>but<sp/>has<sp/>also<sp/>overflowed<sp/>since</highlight></codeline>
<codeline lineno="3313"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>vTaskSetTimeOut()<sp/>was<sp/>called.<sp/><sp/>It<sp/>must<sp/>have<sp/>wrapped<sp/>all<sp/>the<sp/>way</highlight></codeline>
<codeline lineno="3314"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>around<sp/>and<sp/>gone<sp/>past<sp/>again.<sp/>This<sp/>passed<sp/>since<sp/>vTaskSetTimeout()</highlight></codeline>
<codeline lineno="3315"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>was<sp/>called.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="3317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xElapsedTime<sp/>&lt;<sp/>*pxTicksToWait<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>Explicit<sp/>casting<sp/>is<sp/>only<sp/>redundant<sp/>with<sp/>some<sp/>compilers,<sp/>whereas<sp/>others<sp/>require<sp/>it<sp/>to<sp/>prevent<sp/>integer<sp/>conversion<sp/>errors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3319"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Not<sp/>a<sp/>genuine<sp/>timeout.<sp/>Adjust<sp/>parameters<sp/>for<sp/>time<sp/>remaining.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pxTicksToWait<sp/>-=<sp/>xElapsedTime;</highlight></codeline>
<codeline lineno="3322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a91fbc7c4b65e32fae51b7d43ebdcb131" kindref="member">vTaskInternalSetTimeOutState</ref>(<sp/>pxTimeOut<sp/>);</highlight></codeline>
<codeline lineno="3323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="3324"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3326"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*pxTicksToWait<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="3329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3331"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="3332"><highlight class="normal"></highlight></codeline>
<codeline lineno="3333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="3334"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3335"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3336" refid="task_8h_1a998c69e37431a3a32c637b31ff60089a" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="3337"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a33c369f5f08ab96659f94093fdb985af" kindref="member">vTaskMissedYield</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3338"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3339"><highlight class="normal"><sp/><sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="3340"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3341"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3342"><highlight class="normal"></highlight></codeline>
<codeline lineno="3343"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3344"><highlight class="normal"></highlight></codeline>
<codeline lineno="3345"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="task_8h_1ad8bb91e2267905f0069918802fa7f8b8" kindref="member">uxTaskGetTaskNumber</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)</highlight></codeline>
<codeline lineno="3346"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3347"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxReturn;</highlight></codeline>
<codeline lineno="3348"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="3349"><highlight class="normal"></highlight></codeline>
<codeline lineno="3350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTask<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="3351"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/>xTask;</highlight></codeline>
<codeline lineno="3353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>pxTCB-&gt;uxTaskNumber;</highlight></codeline>
<codeline lineno="3354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3356"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="3358"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3359"><highlight class="normal"></highlight></codeline>
<codeline lineno="3360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="3361"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3362"><highlight class="normal"></highlight></codeline>
<codeline lineno="3363"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3364"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3365"><highlight class="normal"></highlight></codeline>
<codeline lineno="3366"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3367"><highlight class="normal"></highlight></codeline>
<codeline lineno="3368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae48f006277815cb1c534284e29ca8f82" kindref="member">vTaskSetTaskNumber</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxHandle<sp/>)</highlight></codeline>
<codeline lineno="3369"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3370"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/>pxTCB;</highlight></codeline>
<codeline lineno="3371"><highlight class="normal"></highlight></codeline>
<codeline lineno="3372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTask<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="3373"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/>xTask;</highlight></codeline>
<codeline lineno="3375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;uxTaskNumber<sp/>=<sp/>uxHandle;</highlight></codeline>
<codeline lineno="3376"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3377"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3378"><highlight class="normal"></highlight></codeline>
<codeline lineno="3379"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3380"><highlight class="normal"></highlight></codeline>
<codeline lineno="3381"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3382"><highlight class="comment"><sp/>*<sp/>-----------------------------------------------------------</highlight></codeline>
<codeline lineno="3383"><highlight class="comment"><sp/>*<sp/>The<sp/>Idle<sp/>task.</highlight></codeline>
<codeline lineno="3384"><highlight class="comment"><sp/>*<sp/>----------------------------------------------------------</highlight></codeline>
<codeline lineno="3385"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3386"><highlight class="comment"><sp/>*<sp/>The<sp/>portTASK_FUNCTION()<sp/>macro<sp/>is<sp/>used<sp/>to<sp/>allow<sp/>port/compiler<sp/>specific</highlight></codeline>
<codeline lineno="3387"><highlight class="comment"><sp/>*<sp/>language<sp/>extensions.<sp/><sp/>The<sp/>equivalent<sp/>prototype<sp/>for<sp/>this<sp/>function<sp/>is:</highlight></codeline>
<codeline lineno="3388"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3389"><highlight class="comment"><sp/>*<sp/>void<sp/>prvIdleTask(<sp/>void<sp/>*pvParameters<sp/>);</highlight></codeline>
<codeline lineno="3390"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="3391" refid="tasks_8c_1a36c7cc58985d41c2cb1b263563dbbaa1" refkind="member"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3392"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a3a289793652f505c538abea27045ccdf" kindref="member">portTASK_FUNCTION</ref>(<sp/>prvIdleTask,<sp/>pvParameters<sp/>)</highlight></codeline>
<codeline lineno="3393"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3394"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Stop<sp/>warnings.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3395"><highlight class="normal"><sp/><sp/>(<sp/>void<sp/>)<sp/>pvParameters;</highlight></codeline>
<codeline lineno="3396"><highlight class="normal"></highlight></codeline>
<codeline lineno="3400"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>In<sp/>case<sp/>a<sp/>task<sp/>that<sp/>has<sp/>a<sp/>secure<sp/>context<sp/>deletes<sp/>itself,<sp/>in<sp/>which<sp/>case</highlight></codeline>
<codeline lineno="3401"><highlight class="comment"><sp/><sp/>the<sp/>idle<sp/>task<sp/>is<sp/>responsible<sp/>for<sp/>deleting<sp/>the<sp/>task&apos;s<sp/>secure<sp/>context,<sp/>if</highlight></codeline>
<codeline lineno="3402"><highlight class="comment"><sp/><sp/>any.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3403"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2e0da07097a35cd3cd7788917fab3f53" kindref="member">portALLOCATE_SECURE_CONTEXT</ref>(<sp/>configMINIMAL_SECURE_STACK_SIZE<sp/>);</highlight></codeline>
<codeline lineno="3404"><highlight class="normal"></highlight></codeline>
<codeline lineno="3405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>;;<sp/>)</highlight></codeline>
<codeline lineno="3406"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>See<sp/>if<sp/>any<sp/>tasks<sp/>have<sp/>deleted<sp/>themselves<sp/>-<sp/>if<sp/>so<sp/>then<sp/>the<sp/>idle<sp/>task</highlight></codeline>
<codeline lineno="3408"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>responsible<sp/>for<sp/>freeing<sp/>the<sp/>deleted<sp/>task&apos;s<sp/>TCB<sp/>and<sp/>stack.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3409"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a903096c962a2bc907f4b902a7d42302a" kindref="member">prvCheckTasksWaitingTermination</ref>();</highlight></codeline>
<codeline lineno="3410"><highlight class="normal"></highlight></codeline>
<codeline lineno="3411"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_PREEMPTION<sp/>==<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3412"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>we<sp/>are<sp/>not<sp/>using<sp/>preemption<sp/>we<sp/>keep<sp/>forcing<sp/>a<sp/>task<sp/>switch<sp/>to</highlight></codeline>
<codeline lineno="3414"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>see<sp/>if<sp/>any<sp/>other<sp/>task<sp/>has<sp/>become<sp/>available.<sp/><sp/>If<sp/>we<sp/>are<sp/>using</highlight></codeline>
<codeline lineno="3415"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>preemption<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>this<sp/>as<sp/>any<sp/>task<sp/>becoming<sp/>available</highlight></codeline>
<codeline lineno="3416"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>will<sp/>automatically<sp/>get<sp/>the<sp/>processor<sp/>anyway.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a767e474430db1e60056e9678763f9202" kindref="member">taskYIELD</ref>();</highlight></codeline>
<codeline lineno="3418"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3419"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_PREEMPTION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3420"><highlight class="normal"></highlight></codeline>
<codeline lineno="3421"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>(<sp/>configUSE_PREEMPTION<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configIDLE_SHOULD_YIELD<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3422"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>When<sp/>using<sp/>preemption<sp/>tasks<sp/>of<sp/>equal<sp/>priority<sp/>will<sp/>be</highlight></codeline>
<codeline lineno="3424"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>timesliced.<sp/><sp/>If<sp/>a<sp/>task<sp/>that<sp/>is<sp/>sharing<sp/>the<sp/>idle<sp/>priority<sp/>is<sp/>ready</highlight></codeline>
<codeline lineno="3425"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>run<sp/>then<sp/>the<sp/>idle<sp/>task<sp/>should<sp/>yield<sp/>before<sp/>the<sp/>end<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="3426"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>timeslice.</highlight></codeline>
<codeline lineno="3427"><highlight class="comment"></highlight></codeline>
<codeline lineno="3428"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>A<sp/>critical<sp/>region<sp/>is<sp/>not<sp/>required<sp/>here<sp/>as<sp/>we<sp/>are<sp/>just<sp/>reading<sp/>from</highlight></codeline>
<codeline lineno="3429"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>list,<sp/>and<sp/>an<sp/>occasional<sp/>incorrect<sp/>value<sp/>will<sp/>not<sp/>matter.<sp/><sp/>If</highlight></codeline>
<codeline lineno="3430"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>ready<sp/>list<sp/>at<sp/>the<sp/>idle<sp/>priority<sp/>contains<sp/>more<sp/>than<sp/>one<sp/>task</highlight></codeline>
<codeline lineno="3431"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>a<sp/>task<sp/>other<sp/>than<sp/>the<sp/>idle<sp/>task<sp/>is<sp/>ready<sp/>to<sp/>execute.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" kindref="member">listCURRENT_LIST_LENGTH</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[<sp/><ref refid="task_8h_1a94ed0b9b3b4e8ccc859c322f18583e67" kindref="member">tskIDLE_PRIORITY</ref><sp/>]<sp/>)<sp/>)<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="3433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1a767e474430db1e60056e9678763f9202" kindref="member">taskYIELD</ref>();</highlight></codeline>
<codeline lineno="3435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="3439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3440"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3441"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>(<sp/>configUSE_PREEMPTION<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configIDLE_SHOULD_YIELD<sp/>==<sp/>1<sp/>)<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3442"><highlight class="normal"></highlight></codeline>
<codeline lineno="3443"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_IDLE_HOOK<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3444"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="cmsis__os2_8c_1a97fd430f36f8b065226e2bff9bad1de5" kindref="member">vApplicationIdleHook</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="3446"><highlight class="normal"></highlight></codeline>
<codeline lineno="3447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Call<sp/>the<sp/>user<sp/>defined<sp/>function<sp/>from<sp/>within<sp/>the<sp/>idle<sp/>task.<sp/><sp/>This</highlight></codeline>
<codeline lineno="3448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>allows<sp/>the<sp/>application<sp/>designer<sp/>to<sp/>add<sp/>background<sp/>functionality</highlight></codeline>
<codeline lineno="3449"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>without<sp/>the<sp/>overhead<sp/>of<sp/>a<sp/>separate<sp/>task.</highlight></codeline>
<codeline lineno="3450"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>NOTE:<sp/>vApplicationIdleHook()<sp/>MUST<sp/>NOT,<sp/>UNDER<sp/>ANY<sp/>CIRCUMSTANCES,</highlight></codeline>
<codeline lineno="3451"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>CALL<sp/>A<sp/>FUNCTION<sp/>THAT<sp/>MIGHT<sp/>BLOCK.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="cmsis__os2_8c_1a97fd430f36f8b065226e2bff9bad1de5" kindref="member">vApplicationIdleHook</ref>();</highlight></codeline>
<codeline lineno="3453"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3454"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_IDLE_HOOK<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3455"><highlight class="normal"></highlight></codeline>
<codeline lineno="3456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>conditional<sp/>compilation<sp/>should<sp/>use<sp/>inequality<sp/>to<sp/>0,<sp/>not<sp/>equality</highlight></codeline>
<codeline lineno="3457"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>1.<sp/><sp/>This<sp/>is<sp/>to<sp/>ensure<sp/>portSUPPRESS_TICKS_AND_SLEEP()<sp/>is<sp/>called<sp/>when</highlight></codeline>
<codeline lineno="3458"><highlight class="comment"><sp/><sp/><sp/><sp/>user<sp/>defined<sp/>low<sp/>power<sp/>mode<sp/>implementations<sp/>require</highlight></codeline>
<codeline lineno="3459"><highlight class="comment"><sp/><sp/><sp/><sp/>configUSE_TICKLESS_IDLE<sp/>to<sp/>be<sp/>set<sp/>to<sp/>a<sp/>value<sp/>other<sp/>than<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3460"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_TICKLESS_IDLE<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3461"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3462"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xExpectedIdleTime;</highlight></codeline>
<codeline lineno="3463"><highlight class="normal"></highlight></codeline>
<codeline lineno="3464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>not<sp/>desirable<sp/>to<sp/>suspend<sp/>then<sp/>resume<sp/>the<sp/>scheduler<sp/>on</highlight></codeline>
<codeline lineno="3465"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>each<sp/>iteration<sp/>of<sp/>the<sp/>idle<sp/>task.<sp/><sp/>Therefore,<sp/>a<sp/>preliminary</highlight></codeline>
<codeline lineno="3466"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>test<sp/>of<sp/>the<sp/>expected<sp/>idle<sp/>time<sp/>is<sp/>performed<sp/>without<sp/>the</highlight></codeline>
<codeline lineno="3467"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>scheduler<sp/>suspended.<sp/><sp/>The<sp/>result<sp/>here<sp/>is<sp/>not<sp/>necessarily</highlight></codeline>
<codeline lineno="3468"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>valid.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xExpectedIdleTime<sp/>=<sp/>prvGetExpectedIdleTime();</highlight></codeline>
<codeline lineno="3470"><highlight class="normal"></highlight></codeline>
<codeline lineno="3471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xExpectedIdleTime<sp/>&gt;=<sp/><ref refid="_free_r_t_o_s_8h_1aff3d7f6e5b38283f5214880d8086bb57" kindref="member">configEXPECTED_IDLE_TIME_BEFORE_SLEEP</ref><sp/>)</highlight></codeline>
<codeline lineno="3472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a084d232640bd1d04bcac0b8784417015" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="3474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Now<sp/>the<sp/>scheduler<sp/>is<sp/>suspended,<sp/>the<sp/>expected<sp/>idle</highlight></codeline>
<codeline lineno="3476"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>time<sp/>can<sp/>be<sp/>sampled<sp/>again,<sp/>and<sp/>this<sp/>time<sp/>its<sp/>value<sp/>can</highlight></codeline>
<codeline lineno="3477"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>&gt;=<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref><sp/>);</highlight></codeline>
<codeline lineno="3479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xExpectedIdleTime<sp/>=<sp/>prvGetExpectedIdleTime();</highlight></codeline>
<codeline lineno="3480"><highlight class="normal"></highlight></codeline>
<codeline lineno="3481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Define<sp/>the<sp/>following<sp/>macro<sp/>to<sp/>set<sp/>xExpectedIdleTime<sp/>to<sp/>0</highlight></codeline>
<codeline lineno="3482"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>the<sp/>application<sp/>does<sp/>not<sp/>want</highlight></codeline>
<codeline lineno="3483"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portSUPPRESS_TICKS_AND_SLEEP()<sp/>to<sp/>be<sp/>called.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a506860f45e7b8f14ee85c09db15eed7a" kindref="member">configPRE_SUPPRESS_TICKS_AND_SLEEP_PROCESSING</ref>(<sp/>xExpectedIdleTime<sp/>);</highlight></codeline>
<codeline lineno="3485"><highlight class="normal"></highlight></codeline>
<codeline lineno="3486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xExpectedIdleTime<sp/>&gt;=<sp/><ref refid="_free_r_t_o_s_8h_1aff3d7f6e5b38283f5214880d8086bb57" kindref="member">configEXPECTED_IDLE_TIME_BEFORE_SLEEP</ref><sp/>)</highlight></codeline>
<codeline lineno="3487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1acc1364ea0a06d6395232d57708e4987c" kindref="member">traceLOW_POWER_IDLE_BEGIN</ref>();</highlight></codeline>
<codeline lineno="3489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a1dcf4bd9c1ad4fe16a71391dd95cf585" kindref="member">portSUPPRESS_TICKS_AND_SLEEP</ref>(<sp/>xExpectedIdleTime<sp/>);</highlight></codeline>
<codeline lineno="3490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1aa5471ee0f56cb504d9aaba9cb3b7750e" kindref="member">traceLOW_POWER_IDLE_END</ref>();</highlight></codeline>
<codeline lineno="3491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="3495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="3498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="3502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3503"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3504"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TICKLESS_IDLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3505"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3506"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3507"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3508"><highlight class="normal"></highlight></codeline>
<codeline lineno="3509"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TICKLESS_IDLE<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3510"><highlight class="normal"></highlight></codeline>
<codeline lineno="3511"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178e" kindref="member">eSleepModeStatus</ref><sp/><ref refid="task_8h_1ad185d5a451380c4040888620d9a92ec6" kindref="member">eTaskConfirmSleepModeStatus</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3512"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3513"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>idle<sp/>task<sp/>exists<sp/>in<sp/>addition<sp/>to<sp/>the<sp/>application<sp/>tasks.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3514"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxNonApplicationTasks<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="3515"><highlight class="normal"><sp/><sp/><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178e" kindref="member">eSleepModeStatus</ref><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178ea2c539add8104402c6336bc33a660d1d1" kindref="member">eStandardSleep</ref>;</highlight></codeline>
<codeline lineno="3516"><highlight class="normal"></highlight></codeline>
<codeline lineno="3517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>function<sp/>must<sp/>be<sp/>called<sp/>from<sp/>a<sp/>critical<sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3518"><highlight class="normal"></highlight></codeline>
<codeline lineno="3519"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" kindref="member">listCURRENT_LIST_LENGTH</ref>(<sp/>&amp;<ref refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" kindref="member">xPendingReadyList</ref><sp/>)<sp/>!=<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="3520"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>was<sp/>made<sp/>ready<sp/>while<sp/>the<sp/>scheduler<sp/>was<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178eaba7b1a394c63faa14a85dbb191f1c6f9" kindref="member">eAbortSleep</ref>;</highlight></codeline>
<codeline lineno="3523"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3524"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="3525"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>yield<sp/>was<sp/>pended<sp/>while<sp/>the<sp/>scheduler<sp/>was<sp/>suspended.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178eaba7b1a394c63faa14a85dbb191f1c6f9" kindref="member">eAbortSleep</ref>;</highlight></codeline>
<codeline lineno="3528"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3530"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>all<sp/>the<sp/>tasks<sp/>are<sp/>in<sp/>the<sp/>suspended<sp/>list<sp/>(which<sp/>might<sp/>mean<sp/>they</highlight></codeline>
<codeline lineno="3532"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>an<sp/>infinite<sp/>block<sp/>time<sp/>rather<sp/>than<sp/>actually<sp/>being<sp/>suspended)</highlight></codeline>
<codeline lineno="3533"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>it<sp/>is<sp/>safe<sp/>to<sp/>turn<sp/>all<sp/>clocks<sp/>off<sp/>and<sp/>just<sp/>wait<sp/>for<sp/>external</highlight></codeline>
<codeline lineno="3534"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>interrupts.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" kindref="member">listCURRENT_LIST_LENGTH</ref>(<sp/>&amp;xSuspendedTaskList<sp/>)<sp/>==<sp/>(<sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref><sp/>-<sp/>uxNonApplicationTasks<sp/>)<sp/>)</highlight></codeline>
<codeline lineno="3536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eReturn<sp/>=<sp/><ref refid="task_8h_1afd168a210ae0f2fb0fca242860a8178ea004c4d9f1a2619193750d0e2f18f6046" kindref="member">eNoTasksWaitingTimeout</ref>;</highlight></codeline>
<codeline lineno="3538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="3542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3543"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3544"><highlight class="normal"></highlight></codeline>
<codeline lineno="3545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>eReturn;</highlight></codeline>
<codeline lineno="3546"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3547"><highlight class="normal"></highlight></codeline>
<codeline lineno="3548"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TICKLESS_IDLE<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3549"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3550"><highlight class="normal"></highlight></codeline>
<codeline lineno="3551"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configNUM_THREAD_LOCAL_STORAGE_POINTERS<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3552"><highlight class="normal"></highlight></codeline>
<codeline lineno="3553"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vTaskSetThreadLocalStoragePointer(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskToSet,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xIndex,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvValue<sp/>)</highlight></codeline>
<codeline lineno="3554"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3555"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="3556"><highlight class="normal"></highlight></codeline>
<codeline lineno="3557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xIndex<sp/>&lt;<sp/><ref refid="_free_r_t_o_s_8h_1a8d32b5f74e55dfd12c5aa3415e16d75e" kindref="member">configNUM_THREAD_LOCAL_STORAGE_POINTERS</ref><sp/>)</highlight></codeline>
<codeline lineno="3558"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTaskToSet<sp/>);</highlight></codeline>
<codeline lineno="3560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTCB<sp/>!=<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="3561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;pvThreadLocalStoragePointers[<sp/>xIndex<sp/>]<sp/>=<sp/>pvValue;</highlight></codeline>
<codeline lineno="3562"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3563"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3564"><highlight class="normal"></highlight></codeline>
<codeline lineno="3565"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configNUM_THREAD_LOCAL_STORAGE_POINTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3566"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3567"><highlight class="normal"></highlight></codeline>
<codeline lineno="3568"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configNUM_THREAD_LOCAL_STORAGE_POINTERS<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3569"><highlight class="normal"></highlight></codeline>
<codeline lineno="3570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvTaskGetThreadLocalStoragePointer(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskToQuery,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xIndex<sp/>)</highlight></codeline>
<codeline lineno="3571"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3572"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*pvReturn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3573"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="3574"><highlight class="normal"></highlight></codeline>
<codeline lineno="3575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xIndex<sp/>&lt;<sp/><ref refid="_free_r_t_o_s_8h_1a8d32b5f74e55dfd12c5aa3415e16d75e" kindref="member">configNUM_THREAD_LOCAL_STORAGE_POINTERS</ref><sp/>)</highlight></codeline>
<codeline lineno="3576"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTaskToQuery<sp/>);</highlight></codeline>
<codeline lineno="3578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pvReturn<sp/>=<sp/>pxTCB-&gt;pvThreadLocalStoragePointers[<sp/>xIndex<sp/>];</highlight></codeline>
<codeline lineno="3579"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3581"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pvReturn<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="3583"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3584"><highlight class="normal"></highlight></codeline>
<codeline lineno="3585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pvReturn;</highlight></codeline>
<codeline lineno="3586"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3587"><highlight class="normal"></highlight></codeline>
<codeline lineno="3588"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configNUM_THREAD_LOCAL_STORAGE_POINTERS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3589"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3590"><highlight class="normal"></highlight></codeline>
<codeline lineno="3591"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3592"><highlight class="normal"></highlight></codeline>
<codeline lineno="3593"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ad889595baff9faf9efe02f3696825409" kindref="member">vTaskAllocateMPURegions</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskToModify,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structx_m_e_m_o_r_y___r_e_g_i_o_n" kindref="compound">MemoryRegion_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>xRegions<sp/>)</highlight></codeline>
<codeline lineno="3594"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3595"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="3596"><highlight class="normal"></highlight></codeline>
<codeline lineno="3597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>null<sp/>is<sp/>passed<sp/>in<sp/>here<sp/>then<sp/>we<sp/>are<sp/>modifying<sp/>the<sp/>MPU<sp/>settings<sp/>of</highlight></codeline>
<codeline lineno="3598"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>calling<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3599"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTaskToModify<sp/>);</highlight></codeline>
<codeline lineno="3600"><highlight class="normal"></highlight></codeline>
<codeline lineno="3601"><highlight class="normal"><sp/><sp/><sp/><sp/>vPortStoreTaskMPUSettings(<sp/>&amp;(<sp/>pxTCB-&gt;xMPUSettings<sp/>),<sp/>xRegions,<sp/>NULL,<sp/>0<sp/>);</highlight></codeline>
<codeline lineno="3602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3603"><highlight class="normal"></highlight></codeline>
<codeline lineno="3604"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>portUSING_MPU_WRAPPERS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3605"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3606" refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="3607"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1af4a1bd397cb871d893fc24e5f86e4f19" kindref="member">prvInitialiseTaskLists</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3608"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3609"><highlight class="normal"><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxPriority;</highlight></codeline>
<codeline lineno="3610"><highlight class="normal"></highlight></codeline>
<codeline lineno="3611"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>uxPriority<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U;<sp/>uxPriority<sp/>&lt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref>;<sp/>uxPriority++<sp/>)</highlight></codeline>
<codeline lineno="3612"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3613"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" kindref="member">vListInitialise</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[<sp/>uxPriority<sp/>]<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3614"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3615"><highlight class="normal"></highlight></codeline>
<codeline lineno="3616"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" kindref="member">vListInitialise</ref>(<sp/>&amp;<ref refid="tasks_8c_1aa632b40f050382cce625ffb3c2ea8c7a" kindref="member">xDelayedTaskList1</ref><sp/>);</highlight></codeline>
<codeline lineno="3617"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" kindref="member">vListInitialise</ref>(<sp/>&amp;<ref refid="tasks_8c_1a52144ecca109402fbab49fa548175f82" kindref="member">xDelayedTaskList2</ref><sp/>);</highlight></codeline>
<codeline lineno="3618"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" kindref="member">vListInitialise</ref>(<sp/>&amp;<ref refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" kindref="member">xPendingReadyList</ref><sp/>);</highlight></codeline>
<codeline lineno="3619"><highlight class="normal"></highlight></codeline>
<codeline lineno="3620"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>INCLUDE_vTaskDelete<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3621"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3622"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" kindref="member">vListInitialise</ref>(<sp/>&amp;xTasksWaitingTermination<sp/>);</highlight></codeline>
<codeline lineno="3623"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3624"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskDelete<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3625"><highlight class="normal"></highlight></codeline>
<codeline lineno="3626"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3627"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3628"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="list_8h_1adeef7734d7d6d9a3eea642a70c106919" kindref="member">vListInitialise</ref>(<sp/>&amp;xSuspendedTaskList<sp/>);</highlight></codeline>
<codeline lineno="3629"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3630"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskSuspend<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3631"><highlight class="normal"></highlight></codeline>
<codeline lineno="3632"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>with<sp/>pxDelayedTaskList<sp/>using<sp/>list1<sp/>and<sp/>the<sp/>pxOverflowDelayedTaskList</highlight></codeline>
<codeline lineno="3633"><highlight class="comment"><sp/><sp/>using<sp/>list2.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3634"><highlight class="normal"><sp/><sp/><ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref><sp/>=<sp/>&amp;<ref refid="tasks_8c_1aa632b40f050382cce625ffb3c2ea8c7a" kindref="member">xDelayedTaskList1</ref>;</highlight></codeline>
<codeline lineno="3635"><highlight class="normal"><sp/><sp/><ref refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" kindref="member">pxOverflowDelayedTaskList</ref><sp/>=<sp/>&amp;<ref refid="tasks_8c_1a52144ecca109402fbab49fa548175f82" kindref="member">xDelayedTaskList2</ref>;</highlight></codeline>
<codeline lineno="3636"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3637"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3638" refid="tasks_8c_1a903096c962a2bc907f4b902a7d42302a" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="3639"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1a903096c962a2bc907f4b902a7d42302a" kindref="member">prvCheckTasksWaitingTermination</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3640"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3641"><highlight class="normal"></highlight></codeline>
<codeline lineno="3644"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>INCLUDE_vTaskDelete<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3645"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3646"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="3647"><highlight class="normal"></highlight></codeline>
<codeline lineno="3648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>uxDeletedTasksWaitingCleanUp<sp/>is<sp/>used<sp/>to<sp/>prevent<sp/>taskENTER_CRITICAL()</highlight></codeline>
<codeline lineno="3649"><highlight class="comment"><sp/><sp/><sp/><sp/>being<sp/>called<sp/>too<sp/>often<sp/>in<sp/>the<sp/>idle<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>uxDeletedTasksWaitingCleanUp<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0U<sp/>)</highlight></codeline>
<codeline lineno="3651"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="3653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="list_8h_1a715561302af8cb5b74416b23ce4e999d" kindref="member">listGET_OWNER_OF_HEAD_ENTRY</ref>(<sp/>(<sp/>&amp;xTasksWaitingTermination<sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>void<sp/>*<sp/>is<sp/>used<sp/>as<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>with<sp/>timers<sp/>and<sp/>co-routines<sp/>too.<sp/><sp/>Alignment<sp/>is<sp/>known<sp/>to<sp/>be<sp/>fine<sp/>as<sp/>the<sp/>type<sp/>of<sp/>the<sp/>pointer<sp/>stored<sp/>and<sp/>retrieved<sp/>is<sp/>the<sp/>same.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--<ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref>;</highlight></codeline>
<codeline lineno="3657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>--uxDeletedTasksWaitingCleanUp;</highlight></codeline>
<codeline lineno="3658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="3660"><highlight class="normal"></highlight></codeline>
<codeline lineno="3661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>prvDeleteTCB(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="3662"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3663"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3664"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskDelete<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3666"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3667"><highlight class="normal"></highlight></codeline>
<codeline lineno="3668"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3669"><highlight class="normal"></highlight></codeline>
<codeline lineno="3670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ac08c26d037d0dc685740eec9b2028715" kindref="member">vTaskGetInfo</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask,<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">TaskStatus_t</ref><sp/>*pxTaskStatus,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xGetFreeStackSpace,<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892c" kindref="member">eTaskState</ref><sp/>eState<sp/>)</highlight></codeline>
<codeline lineno="3671"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3672"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="3673"><highlight class="normal"></highlight></codeline>
<codeline lineno="3674"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>xTask<sp/>is<sp/>NULL<sp/>then<sp/>get<sp/>the<sp/>state<sp/>of<sp/>the<sp/>calling<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3675"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="3676"><highlight class="normal"></highlight></codeline>
<codeline lineno="3677"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1ac57f825f365c3c64bba827285fe3c2a0" kindref="member">xHandle</ref><sp/>=<sp/>(<sp/><ref refid="task_8h_1a25b35e6e19ecf894173e7ff95edb96ef" kindref="member">TaskHandle_t</ref><sp/>)<sp/>pxTCB;</highlight></codeline>
<codeline lineno="3678"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1ad272663e2560bd9ea088384a39ba6192" kindref="member">pcTaskName</ref><sp/>=<sp/>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>)<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a67d61291794f38afb5be5132078bc24f" kindref="member">pcTaskName</ref><sp/>[<sp/>0<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="3679"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a39df647234fc0d6de5852042a2741a94" kindref="member">uxCurrentPriority</ref><sp/>=<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>;</highlight></codeline>
<codeline lineno="3680"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a0ee59674d2cc57d3a5a29c777d5452ed" kindref="member">pxStackBase</ref><sp/>=<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref>;</highlight></codeline>
<codeline lineno="3681"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1acd44468ba37270b04f83d0833c098057" kindref="member">xTaskNumber</ref><sp/>=<sp/>pxTCB-&gt;uxTCBNumber;</highlight></codeline>
<codeline lineno="3682"><highlight class="normal"></highlight></codeline>
<codeline lineno="3683"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3684"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a692f4c8957b7270f1579cdee63ff287e" kindref="member">uxBasePriority</ref><sp/>=<sp/>pxTCB-&gt;uxBasePriority;</highlight></codeline>
<codeline lineno="3686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3687"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3688"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a692f4c8957b7270f1579cdee63ff287e" kindref="member">uxBasePriority</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3690"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3691"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3692"><highlight class="normal"></highlight></codeline>
<codeline lineno="3693"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configGENERATE_RUN_TIME_STATS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3694"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a92ab83f4f376c255dedf8e06a78261f7" kindref="member">ulRunTimeCounter</ref><sp/>=<sp/>pxTCB-&gt;ulRunTimeCounter;</highlight></codeline>
<codeline lineno="3696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3697"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3698"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a92ab83f4f376c255dedf8e06a78261f7" kindref="member">ulRunTimeCounter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3700"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3701"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3702"><highlight class="normal"></highlight></codeline>
<codeline lineno="3703"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Obtaining<sp/>the<sp/>task<sp/>state<sp/>is<sp/>a<sp/>little<sp/>fiddly,<sp/>so<sp/>is<sp/>only<sp/>done<sp/>if<sp/>the</highlight></codeline>
<codeline lineno="3704"><highlight class="comment"><sp/><sp/><sp/><sp/>value<sp/>of<sp/>eState<sp/>passed<sp/>into<sp/>this<sp/>function<sp/>is<sp/>eInvalid<sp/>-<sp/>otherwise<sp/>the</highlight></codeline>
<codeline lineno="3705"><highlight class="comment"><sp/><sp/><sp/><sp/>state<sp/>is<sp/>just<sp/>set<sp/>to<sp/>whatever<sp/>is<sp/>passed<sp/>in.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3706"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>eState<sp/>!=<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cab32c771bb60dc8b502f65b81eef3bd86" kindref="member">eInvalid</ref><sp/>)</highlight></codeline>
<codeline lineno="3707"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB<sp/>==<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>)</highlight></codeline>
<codeline lineno="3709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a727e904e3afe49472b0fc6a4e96439cb" kindref="member">eCurrentState</ref><sp/>=<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892ca83318c0d58e6b2bafaefa1be597fb8b6" kindref="member">eRunning</ref>;</highlight></codeline>
<codeline lineno="3711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a727e904e3afe49472b0fc6a4e96439cb" kindref="member">eCurrentState</ref><sp/>=<sp/>eState;</highlight></codeline>
<codeline lineno="3715"><highlight class="normal"></highlight></codeline>
<codeline lineno="3716"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>task<sp/>is<sp/>in<sp/>the<sp/>suspended<sp/>list<sp/>then<sp/>there<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="3719"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>chance<sp/>it<sp/>is<sp/>actually<sp/>just<sp/>blocked<sp/>indefinitely<sp/>-<sp/>so<sp/>really</highlight></codeline>
<codeline lineno="3720"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>should<sp/>be<sp/>reported<sp/>as<sp/>being<sp/>in<sp/>the<sp/>Blocked<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>eState<sp/>==<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892caf35a900d49fdfc2502eefc68fdb70f72" kindref="member">eSuspended</ref><sp/>)</highlight></codeline>
<codeline lineno="3722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a084d232640bd1d04bcac0b8784417015" kindref="member">vTaskSuspendAll</ref>();</highlight></codeline>
<codeline lineno="3724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a7c4dff11380cd843ed0b6a8dc065916b" kindref="member">listLIST_ITEM_CONTAINER</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="3726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3727"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a727e904e3afe49472b0fc6a4e96439cb" kindref="member">eCurrentState</ref><sp/>=<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af" kindref="member">eBlocked</ref>;</highlight></codeline>
<codeline lineno="3728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="tasks_8c_1adf830ea0f150fcdfdaa944667137f080" kindref="member">xTaskResumeAll</ref>();</highlight></codeline>
<codeline lineno="3731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3733"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskSuspend<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3735"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3737"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a727e904e3afe49472b0fc6a4e96439cb" kindref="member">eCurrentState</ref><sp/>=<sp/><ref refid="task_8h_1a954df77397d616484edb7c58c7760b10" kindref="member">eTaskGetState</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="3739"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3740"><highlight class="normal"></highlight></codeline>
<codeline lineno="3741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Obtaining<sp/>the<sp/>stack<sp/>space<sp/>takes<sp/>some<sp/>time,<sp/>so<sp/>the<sp/>xGetFreeStackSpace</highlight></codeline>
<codeline lineno="3742"><highlight class="comment"><sp/><sp/><sp/><sp/>parameter<sp/>is<sp/>provided<sp/>to<sp/>allow<sp/>it<sp/>to<sp/>be<sp/>skipped.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xGetFreeStackSpace<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="3744"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3745"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>portSTACK_GROWTH<sp/>&gt;<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3746"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1aaad57afd4a629d2404e1cff97891c571" kindref="member">usStackHighWaterMark</ref><sp/>=<sp/>prvTaskCheckFreeStackSpace(<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxTCB-&gt;pxEndOfStack<sp/>);</highlight></codeline>
<codeline lineno="3748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3749"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1aaad57afd4a629d2404e1cff97891c571" kindref="member">usStackHighWaterMark</ref><sp/>=<sp/>prvTaskCheckFreeStackSpace(<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref><sp/>);</highlight></codeline>
<codeline lineno="3752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3753"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3754"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3756"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatus-&gt;<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1aaad57afd4a629d2404e1cff97891c571" kindref="member">usStackHighWaterMark</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3758"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3759"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3760"><highlight class="normal"></highlight></codeline>
<codeline lineno="3761"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3762"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3763"><highlight class="normal"></highlight></codeline>
<codeline lineno="3764"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3765"><highlight class="normal"></highlight></codeline>
<codeline lineno="3766"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>prvListTasksWithinSingleList(<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">TaskStatus_t</ref><sp/>*pxTaskStatusArray,<sp/><ref refid="structx_l_i_s_t" kindref="compound">List_t</ref><sp/>*pxList,<sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892c" kindref="member">eTaskState</ref><sp/>eState<sp/>)</highlight></codeline>
<codeline lineno="3767"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3768"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a2d5de557c5561c8980d1bf51d87d8cba" kindref="member">configLIST_VOLATILE</ref><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxNextTCB,<sp/>*pxFirstTCB;</highlight></codeline>
<codeline lineno="3769"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxTask<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="3770"><highlight class="normal"></highlight></codeline>
<codeline lineno="3771"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a18b4aded515bdc512017ea6e677a13bb" kindref="member">listCURRENT_LIST_LENGTH</ref>(<sp/>pxList<sp/>)<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="3772"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a275d9855e9b71652e2b8f6e2ed62aadd" kindref="member">listGET_OWNER_OF_NEXT_ENTRY</ref>(<sp/>pxFirstTCB,<sp/>pxList<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>void<sp/>*<sp/>is<sp/>used<sp/>as<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>with<sp/>timers<sp/>and<sp/>co-routines<sp/>too.<sp/><sp/>Alignment<sp/>is<sp/>known<sp/>to<sp/>be<sp/>fine<sp/>as<sp/>the<sp/>type<sp/>of<sp/>the<sp/>pointer<sp/>stored<sp/>and<sp/>retrieved<sp/>is<sp/>the<sp/>same.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3774"><highlight class="normal"></highlight></codeline>
<codeline lineno="3775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Populate<sp/>an<sp/>TaskStatus_t<sp/>structure<sp/>within<sp/>the</highlight></codeline>
<codeline lineno="3776"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>pxTaskStatusArray<sp/>array<sp/>for<sp/>each<sp/>task<sp/>that<sp/>is<sp/>referenced<sp/>from</highlight></codeline>
<codeline lineno="3777"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>pxList.<sp/><sp/>See<sp/>the<sp/>definition<sp/>of<sp/>TaskStatus_t<sp/>in<sp/>task.h<sp/>for<sp/>the</highlight></codeline>
<codeline lineno="3778"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>meaning<sp/>of<sp/>each<sp/>TaskStatus_t<sp/>structure<sp/>member.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">do</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a275d9855e9b71652e2b8f6e2ed62aadd" kindref="member">listGET_OWNER_OF_NEXT_ENTRY</ref>(<sp/>pxNextTCB,<sp/>pxList<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>void<sp/>*<sp/>is<sp/>used<sp/>as<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>with<sp/>timers<sp/>and<sp/>co-routines<sp/>too.<sp/><sp/>Alignment<sp/>is<sp/>known<sp/>to<sp/>be<sp/>fine<sp/>as<sp/>the<sp/>type<sp/>of<sp/>the<sp/>pointer<sp/>stored<sp/>and<sp/>retrieved<sp/>is<sp/>the<sp/>same.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="task_8h_1ac08c26d037d0dc685740eec9b2028715" kindref="member">vTaskGetInfo</ref>(<sp/>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>)<sp/>pxNextTCB,<sp/>&amp;(<sp/>pxTaskStatusArray[<sp/>uxTask<sp/>]<sp/>),<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>,<sp/>eState<sp/>);</highlight></codeline>
<codeline lineno="3783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxTask++;</highlight></codeline>
<codeline lineno="3784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>pxNextTCB<sp/>!=<sp/>pxFirstTCB<sp/>);</highlight></codeline>
<codeline lineno="3785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3787"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="3789"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3790"><highlight class="normal"></highlight></codeline>
<codeline lineno="3791"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxTask;</highlight></codeline>
<codeline lineno="3792"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3793"><highlight class="normal"></highlight></codeline>
<codeline lineno="3794"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TRACE_FACILITY<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3795"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3796"><highlight class="normal"></highlight></codeline>
<codeline lineno="3797"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>INCLUDE_uxTaskGetStackHighWaterMark<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>INCLUDE_uxTaskGetStackHighWaterMark2<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3798"><highlight class="normal"></highlight></codeline>
<codeline lineno="3799"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="_free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a" kindref="member">configSTACK_DEPTH_TYPE</ref><sp/>prvTaskCheckFreeStackSpace(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*<sp/>pucStackByte<sp/>)</highlight></codeline>
<codeline lineno="3800"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3801"><highlight class="normal"><sp/><sp/>uint32_t<sp/>ulCount<sp/>=<sp/>0U;</highlight></codeline>
<codeline lineno="3802"><highlight class="normal"></highlight></codeline>
<codeline lineno="3803"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<sp/>*pucStackByte<sp/>==<sp/>(<sp/>uint8_t<sp/>)<sp/><ref refid="tasks_8c_1ad3b1c99066f14855be098ccca1685fac" kindref="member">tskSTACK_FILL_BYTE</ref><sp/>)</highlight></codeline>
<codeline lineno="3804"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pucStackByte<sp/>-=<sp/><ref refid="portmacro_8h_1a21adaab1601f6a0f35ba550a43060830" kindref="member">portSTACK_GROWTH</ref>;</highlight></codeline>
<codeline lineno="3806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ulCount++;</highlight></codeline>
<codeline lineno="3807"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3808"><highlight class="normal"></highlight></codeline>
<codeline lineno="3809"><highlight class="normal"><sp/><sp/><sp/><sp/>ulCount<sp/>/=<sp/>(<sp/>uint32_t<sp/>)<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="portmacro_8h_1aa73b01e0200940d619095fb74fb3030b" kindref="member">StackType_t</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>Casting<sp/>is<sp/>not<sp/>redundant<sp/>on<sp/>smaller<sp/>architectures.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3810"><highlight class="normal"></highlight></codeline>
<codeline lineno="3811"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<sp/><ref refid="_free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a" kindref="member">configSTACK_DEPTH_TYPE</ref><sp/>)<sp/>ulCount;</highlight></codeline>
<codeline lineno="3812"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3813"><highlight class="normal"></highlight></codeline>
<codeline lineno="3814"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>INCLUDE_uxTaskGetStackHighWaterMark<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>INCLUDE_uxTaskGetStackHighWaterMark2<sp/>==<sp/>1<sp/>)<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3815"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3816"><highlight class="normal"></highlight></codeline>
<codeline lineno="3817"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_uxTaskGetStackHighWaterMark2<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3818"><highlight class="normal"></highlight></codeline>
<codeline lineno="3819"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>uxTaskGetStackHighWaterMark()<sp/>and<sp/>uxTaskGetStackHighWaterMark2()<sp/>are<sp/>the</highlight></codeline>
<codeline lineno="3820"><highlight class="comment"><sp/><sp/>same<sp/>except<sp/>for<sp/>their<sp/>return<sp/>type.<sp/><sp/>Using<sp/>configSTACK_DEPTH_TYPE<sp/>allows<sp/>the</highlight></codeline>
<codeline lineno="3821"><highlight class="comment"><sp/><sp/>user<sp/>to<sp/>determine<sp/>the<sp/>return<sp/>type.<sp/><sp/>It<sp/>gets<sp/>around<sp/>the<sp/>problem<sp/>of<sp/>the<sp/>value</highlight></codeline>
<codeline lineno="3822"><highlight class="comment"><sp/><sp/>overflowing<sp/>on<sp/>8-bit<sp/>types<sp/>without<sp/>breaking<sp/>backward<sp/>compatibility<sp/>for</highlight></codeline>
<codeline lineno="3823"><highlight class="comment"><sp/><sp/>applications<sp/>that<sp/>expect<sp/>an<sp/>8-bit<sp/>return<sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3824"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a" kindref="member">configSTACK_DEPTH_TYPE</ref><sp/><ref refid="task_8h_1a7fd88fa038a89eb539bd41ce64a93744" kindref="member">uxTaskGetStackHighWaterMark2</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)</highlight></codeline>
<codeline lineno="3825"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3826"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="3827"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*pucEndOfStack;</highlight></codeline>
<codeline lineno="3828"><highlight class="normal"><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ae4e85bffd36d76cf2796092f0ccd784a" kindref="member">configSTACK_DEPTH_TYPE</ref><sp/>uxReturn;</highlight></codeline>
<codeline lineno="3829"><highlight class="normal"></highlight></codeline>
<codeline lineno="3830"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>uxTaskGetStackHighWaterMark()<sp/>and<sp/>uxTaskGetStackHighWaterMark2()<sp/>are</highlight></codeline>
<codeline lineno="3831"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>same<sp/>except<sp/>for<sp/>their<sp/>return<sp/>type.<sp/><sp/>Using<sp/>configSTACK_DEPTH_TYPE</highlight></codeline>
<codeline lineno="3832"><highlight class="comment"><sp/><sp/><sp/><sp/>allows<sp/>the<sp/>user<sp/>to<sp/>determine<sp/>the<sp/>return<sp/>type.<sp/><sp/>It<sp/>gets<sp/>around<sp/>the</highlight></codeline>
<codeline lineno="3833"><highlight class="comment"><sp/><sp/><sp/><sp/>problem<sp/>of<sp/>the<sp/>value<sp/>overflowing<sp/>on<sp/>8-bit<sp/>types<sp/>without<sp/>breaking</highlight></codeline>
<codeline lineno="3834"><highlight class="comment"><sp/><sp/><sp/><sp/>backward<sp/>compatibility<sp/>for<sp/>applications<sp/>that<sp/>expect<sp/>an<sp/>8-bit<sp/>return</highlight></codeline>
<codeline lineno="3835"><highlight class="comment"><sp/><sp/><sp/><sp/>type.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3836"><highlight class="normal"></highlight></codeline>
<codeline lineno="3837"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="3838"><highlight class="normal"></highlight></codeline>
<codeline lineno="3839"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>portSTACK_GROWTH<sp/>&lt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3840"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pucEndOfStack<sp/>=<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref>;</highlight></codeline>
<codeline lineno="3842"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3843"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3844"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pucEndOfStack<sp/>=<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxTCB-&gt;pxEndOfStack;</highlight></codeline>
<codeline lineno="3846"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3847"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3848"><highlight class="normal"></highlight></codeline>
<codeline lineno="3849"><highlight class="normal"><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>prvTaskCheckFreeStackSpace(<sp/>pucEndOfStack<sp/>);</highlight></codeline>
<codeline lineno="3850"><highlight class="normal"></highlight></codeline>
<codeline lineno="3851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="3852"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3853"><highlight class="normal"></highlight></codeline>
<codeline lineno="3854"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_uxTaskGetStackHighWaterMark2<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3855"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3856"><highlight class="normal"></highlight></codeline>
<codeline lineno="3857"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_uxTaskGetStackHighWaterMark<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3858"><highlight class="normal"></highlight></codeline>
<codeline lineno="3859"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/><ref refid="task_8h_1a799967af01d328132cde814e47733437" kindref="member">uxTaskGetStackHighWaterMark</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)</highlight></codeline>
<codeline lineno="3860"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3861"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="3862"><highlight class="normal"><sp/><sp/>uint8_t<sp/>*pucEndOfStack;</highlight></codeline>
<codeline lineno="3863"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxReturn;</highlight></codeline>
<codeline lineno="3864"><highlight class="normal"></highlight></codeline>
<codeline lineno="3865"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="3866"><highlight class="normal"></highlight></codeline>
<codeline lineno="3867"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>portSTACK_GROWTH<sp/>&lt;<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3868"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pucEndOfStack<sp/>=<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref>;</highlight></codeline>
<codeline lineno="3870"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3871"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3872"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pucEndOfStack<sp/>=<sp/>(<sp/>uint8_t<sp/>*<sp/>)<sp/>pxTCB-&gt;pxEndOfStack;</highlight></codeline>
<codeline lineno="3874"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3875"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3876"><highlight class="normal"></highlight></codeline>
<codeline lineno="3877"><highlight class="normal"><sp/><sp/><sp/><sp/>uxReturn<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>prvTaskCheckFreeStackSpace(<sp/>pucEndOfStack<sp/>);</highlight></codeline>
<codeline lineno="3878"><highlight class="normal"></highlight></codeline>
<codeline lineno="3879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="3880"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3881"><highlight class="normal"></highlight></codeline>
<codeline lineno="3882"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_uxTaskGetStackHighWaterMark<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3883"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3884"><highlight class="normal"></highlight></codeline>
<codeline lineno="3885"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>INCLUDE_vTaskDelete<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3886"><highlight class="normal"></highlight></codeline>
<codeline lineno="3887"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>prvDeleteTCB(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB<sp/>)</highlight></codeline>
<codeline lineno="3888"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>call<sp/>is<sp/>required<sp/>specifically<sp/>for<sp/>the<sp/>TriCore<sp/>port.<sp/><sp/>It<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="3890"><highlight class="comment"><sp/><sp/><sp/><sp/>above<sp/>the<sp/>vPortFree()<sp/>calls.<sp/><sp/>The<sp/>call<sp/>is<sp/>also<sp/>used<sp/>by<sp/>ports/demos<sp/>that</highlight></codeline>
<codeline lineno="3891"><highlight class="comment"><sp/><sp/><sp/><sp/>want<sp/>to<sp/>allocate<sp/>and<sp/>clean<sp/>RAM<sp/>statically.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3892"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a3c506bf351102047fb5a75491287fe69" kindref="member">portCLEAN_UP_TCB</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="3893"><highlight class="normal"></highlight></codeline>
<codeline lineno="3894"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>up<sp/>the<sp/>memory<sp/>allocated<sp/>by<sp/>the<sp/>scheduler<sp/>for<sp/>the<sp/>task.<sp/><sp/>It<sp/>is<sp/>up</highlight></codeline>
<codeline lineno="3895"><highlight class="comment"><sp/><sp/><sp/><sp/>to<sp/>the<sp/>task<sp/>to<sp/>free<sp/>any<sp/>memory<sp/>allocated<sp/>at<sp/>the<sp/>application<sp/>level.</highlight></codeline>
<codeline lineno="3896"><highlight class="comment"><sp/><sp/><sp/><sp/>See<sp/>the<sp/>third<sp/>party<sp/>link<sp/>http://www.nadler.com/embedded/newlibAndFreeRTOS.html</highlight></codeline>
<codeline lineno="3897"><highlight class="comment"><sp/><sp/><sp/><sp/>for<sp/>additional<sp/>information.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3898"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if<sp/>(<sp/>configUSE_NEWLIB_REENTRANT<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3899"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>_reclaim_reent(<sp/>&amp;(<sp/>pxTCB-&gt;xNewLib_reent<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3901"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3902"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_NEWLIB_REENTRANT<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3903"><highlight class="normal"></highlight></codeline>
<codeline lineno="3904"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>portUSING_MPU_WRAPPERS<sp/>==<sp/>0<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3905"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>can<sp/>only<sp/>have<sp/>been<sp/>allocated<sp/>dynamically<sp/>-<sp/>free<sp/>both</highlight></codeline>
<codeline lineno="3907"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>stack<sp/>and<sp/>TCB.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref><sp/>);</highlight></codeline>
<codeline lineno="3909"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="3910"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3911"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#elif(<sp/>tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE<sp/>!=<sp/>0<sp/>)<sp/></highlight><highlight class="comment">/*lint<sp/>!e731<sp/>!e9029<sp/>Macro<sp/>has<sp/>been<sp/>consolidated<sp/>for<sp/>readability<sp/>reasons.<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3912"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3913"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>could<sp/>have<sp/>been<sp/>allocated<sp/>statically<sp/>or<sp/>dynamically,<sp/>so</highlight></codeline>
<codeline lineno="3914"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>check<sp/>what<sp/>was<sp/>statically<sp/>allocated<sp/>before<sp/>trying<sp/>to<sp/>free<sp/>the</highlight></codeline>
<codeline lineno="3915"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>memory.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;ucStaticallyAllocated<sp/>==<sp/><ref refid="tasks_8c_1af06a1633d2fb92f67712e62f3d1c3777" kindref="member">tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB</ref><sp/>)</highlight></codeline>
<codeline lineno="3917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3918"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Both<sp/>the<sp/>stack<sp/>and<sp/>TCB<sp/>were<sp/>allocated<sp/>dynamically,<sp/>so<sp/>both</highlight></codeline>
<codeline lineno="3919"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>must<sp/>be<sp/>freed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3920"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a9a0d71a9f95dd0609f9911d9efd79134" kindref="member">pxStack</ref><sp/>);</highlight></codeline>
<codeline lineno="3921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="3922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;ucStaticallyAllocated<sp/>==<sp/><ref refid="tasks_8c_1ad65be2320d426aca4e0e72d29ccd04de" kindref="member">tskSTATICALLY_ALLOCATED_STACK_ONLY</ref><sp/>)</highlight></codeline>
<codeline lineno="3924"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3925"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>the<sp/>stack<sp/>was<sp/>statically<sp/>allocated,<sp/>so<sp/>the<sp/>TCB<sp/>is<sp/>the</highlight></codeline>
<codeline lineno="3926"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>only<sp/>memory<sp/>that<sp/>must<sp/>be<sp/>freed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="3928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Neither<sp/>the<sp/>stack<sp/>nor<sp/>the<sp/>TCB<sp/>were<sp/>allocated<sp/>dynamically,<sp/>so</highlight></codeline>
<codeline lineno="3932"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nothing<sp/>needs<sp/>to<sp/>be<sp/>freed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTCB-&gt;ucStaticallyAllocated<sp/>==<sp/><ref refid="tasks_8c_1a9851e50775136d536fed623e1ac598aa" kindref="member">tskSTATICALLY_ALLOCATED_STACK_AND_TCB</ref><sp/>);</highlight></codeline>
<codeline lineno="3934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="3935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3936"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3937"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3938"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3939"><highlight class="normal"></highlight></codeline>
<codeline lineno="3940"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskDelete<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3941"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3942" refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="3943"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" kindref="member">prvResetNextTaskUnblockTime</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3944"><highlight class="normal">{</highlight></codeline>
<codeline lineno="3945"><highlight class="normal"><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="3946"><highlight class="normal"></highlight></codeline>
<codeline lineno="3947"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1aaba6eb05d67ebc8026bea29193eca28f" kindref="member">listLIST_IS_EMPTY</ref>(<sp/><ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref><sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="3948"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3949"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>new<sp/>current<sp/>delayed<sp/>list<sp/>is<sp/>empty.<sp/><sp/>Set<sp/>xNextTaskUnblockTime<sp/>to</highlight></codeline>
<codeline lineno="3950"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>maximum<sp/>possible<sp/>value<sp/>so<sp/>it<sp/>is<sp/>extremely<sp/>unlikely<sp/>that<sp/>the</highlight></codeline>
<codeline lineno="3951"><highlight class="comment"><sp/><sp/><sp/><sp/>if(<sp/>xTickCount<sp/>&gt;=<sp/>xNextTaskUnblockTime<sp/>)<sp/>test<sp/>will<sp/>pass<sp/>until</highlight></codeline>
<codeline lineno="3952"><highlight class="comment"><sp/><sp/><sp/><sp/>there<sp/>is<sp/>an<sp/>item<sp/>in<sp/>the<sp/>delayed<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3953"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>=<sp/><ref refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" kindref="member">portMAX_DELAY</ref>;</highlight></codeline>
<codeline lineno="3954"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3955"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3956"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3957"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>new<sp/>current<sp/>delayed<sp/>list<sp/>is<sp/>not<sp/>empty,<sp/>get<sp/>the<sp/>value<sp/>of</highlight></codeline>
<codeline lineno="3958"><highlight class="comment"><sp/><sp/><sp/><sp/>the<sp/>item<sp/>at<sp/>the<sp/>head<sp/>of<sp/>the<sp/>delayed<sp/>list.<sp/><sp/>This<sp/>is<sp/>the<sp/>time<sp/>at</highlight></codeline>
<codeline lineno="3959"><highlight class="comment"><sp/><sp/><sp/><sp/>which<sp/>the<sp/>task<sp/>at<sp/>the<sp/>head<sp/>of<sp/>the<sp/>delayed<sp/>list<sp/>should<sp/>be<sp/>removed</highlight></codeline>
<codeline lineno="3960"><highlight class="comment"><sp/><sp/><sp/><sp/>from<sp/>the<sp/>Blocked<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3961"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>pxTCB<sp/>)<sp/>=<sp/><ref refid="list_8h_1a715561302af8cb5b74416b23ce4e999d" kindref="member">listGET_OWNER_OF_HEAD_ENTRY</ref>(<sp/><ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>void<sp/>*<sp/>is<sp/>used<sp/>as<sp/>this<sp/>macro<sp/>is<sp/>used<sp/>with<sp/>timers<sp/>and<sp/>co-routines<sp/>too.<sp/><sp/>Alignment<sp/>is<sp/>known<sp/>to<sp/>be<sp/>fine<sp/>as<sp/>the<sp/>type<sp/>of<sp/>the<sp/>pointer<sp/>stored<sp/>and<sp/>retrieved<sp/>is<sp/>the<sp/>same.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3962"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>=<sp/><ref refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" kindref="member">listGET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/>(<sp/>pxTCB<sp/>)-&gt;xStateListItem<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="3963"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3964"><highlight class="normal">}</highlight></codeline>
<codeline lineno="3965"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3966"><highlight class="normal"></highlight></codeline>
<codeline lineno="3967"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>INCLUDE_xTaskGetCurrentTaskHandle<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3968"><highlight class="normal"></highlight></codeline>
<codeline lineno="3969"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/><ref refid="task_8h_1a85a0f9c9f817b18686efbf8f37c72dfc" kindref="member">xTaskGetCurrentTaskHandle</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3970"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3971"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="3972"><highlight class="normal"></highlight></codeline>
<codeline lineno="3973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>critical<sp/>section<sp/>is<sp/>not<sp/>required<sp/>as<sp/>this<sp/>is<sp/>not<sp/>called<sp/>from</highlight></codeline>
<codeline lineno="3974"><highlight class="comment"><sp/><sp/><sp/><sp/>an<sp/>interrupt<sp/>and<sp/>the<sp/>current<sp/>TCB<sp/>will<sp/>always<sp/>be<sp/>the<sp/>same<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="3975"><highlight class="comment"><sp/><sp/><sp/><sp/>individual<sp/>execution<sp/>thread.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3976"><highlight class="normal"><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>;</highlight></codeline>
<codeline lineno="3977"><highlight class="normal"></highlight></codeline>
<codeline lineno="3978"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="3979"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="3980"><highlight class="normal"></highlight></codeline>
<codeline lineno="3981"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>(<sp/>INCLUDE_xTaskGetCurrentTaskHandle<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3982"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3983"><highlight class="normal"></highlight></codeline>
<codeline lineno="3984"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>INCLUDE_xTaskGetSchedulerState<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3985"><highlight class="normal"></highlight></codeline>
<codeline lineno="3986"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="task_8h_1a0241000e08a261372186d34825a35979" kindref="member">xTaskGetSchedulerState</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="3987"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="3988"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="3989"><highlight class="normal"></highlight></codeline>
<codeline lineno="3990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" kindref="member">xSchedulerRunning</ref><sp/>==<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="3991"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="task_8h_1a0923fdaae1bfe42ac5cccd9e9ddca9ed" kindref="member">taskSCHEDULER_NOT_STARTED</ref>;</highlight></codeline>
<codeline lineno="3993"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="3994"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3995"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="3997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="3998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="task_8h_1acbb675035741787d29da475b5a887545" kindref="member">taskSCHEDULER_RUNNING</ref>;</highlight></codeline>
<codeline lineno="3999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="task_8h_1a0cad071ca127a35df93166e9ed5b6ada" kindref="member">taskSCHEDULER_SUSPENDED</ref>;</highlight></codeline>
<codeline lineno="4003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4004"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4005"><highlight class="normal"></highlight></codeline>
<codeline lineno="4006"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="4007"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4008"><highlight class="normal"></highlight></codeline>
<codeline lineno="4009"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>(<sp/>INCLUDE_xTaskGetSchedulerState<sp/>==<sp/>1<sp/>)<sp/>||<sp/>(<sp/>configUSE_TIMERS<sp/>==<sp/>1<sp/>)<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4010"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4011"><highlight class="normal"></highlight></codeline>
<codeline lineno="4012"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4013"><highlight class="normal"></highlight></codeline>
<codeline lineno="4014"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="task_8h_1aa715a488a6014df5a9393ca38c5938c0" kindref="member">xTaskPriorityInherit</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxMutexHolder<sp/>)</highlight></codeline>
<codeline lineno="4015"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4016"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxMutexHolderTCB<sp/>=<sp/>pxMutexHolder;</highlight></codeline>
<codeline lineno="4017"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="4018"><highlight class="normal"></highlight></codeline>
<codeline lineno="4019"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>mutex<sp/>was<sp/>given<sp/>back<sp/>by<sp/>an<sp/>interrupt<sp/>while<sp/>the<sp/>queue<sp/>was</highlight></codeline>
<codeline lineno="4020"><highlight class="comment"><sp/><sp/><sp/><sp/>locked<sp/>then<sp/>the<sp/>mutex<sp/>holder<sp/>might<sp/>now<sp/>be<sp/>NULL.<sp/><sp/>_RB_<sp/>Is<sp/>this<sp/>still</highlight></codeline>
<codeline lineno="4021"><highlight class="comment"><sp/><sp/><sp/><sp/>needed<sp/>as<sp/>interrupts<sp/>can<sp/>no<sp/>longer<sp/>use<sp/>mutexes?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4022"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxMutexHolder<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="4023"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4024"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>holder<sp/>of<sp/>the<sp/>mutex<sp/>has<sp/>a<sp/>priority<sp/>below<sp/>the<sp/>priority<sp/>of</highlight></codeline>
<codeline lineno="4025"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>task<sp/>attempting<sp/>to<sp/>obtain<sp/>the<sp/>mutex<sp/>then<sp/>it<sp/>will<sp/>temporarily</highlight></codeline>
<codeline lineno="4026"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>inherit<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>task<sp/>attempting<sp/>to<sp/>obtain<sp/>the<sp/>mutex.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4027"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxMutexHolderTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&lt;<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="4028"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Adjust<sp/>the<sp/>mutex<sp/>holder<sp/>state<sp/>to<sp/>account<sp/>for<sp/>its<sp/>new</highlight></codeline>
<codeline lineno="4030"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priority.<sp/><sp/>Only<sp/>reset<sp/>the<sp/>event<sp/>list<sp/>item<sp/>value<sp/>if<sp/>the<sp/>value<sp/>is</highlight></codeline>
<codeline lineno="4031"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>being<sp/>used<sp/>for<sp/>anything<sp/>else.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4032"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/><ref refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" kindref="member">listGET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/>pxMutexHolderTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>&amp;<sp/><ref refid="tasks_8c_1a3e36f3eda563e810a24ab36ee7c978d4" kindref="member">taskEVENT_LIST_ITEM_VALUE_IN_USE</ref><sp/>)<sp/>==<sp/>0UL<sp/>)</highlight></codeline>
<codeline lineno="4033"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4034"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" kindref="member">listSET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/>pxMutexHolderTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>),<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4035"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4036"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4037"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4038"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4039"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4040"><highlight class="normal"></highlight></codeline>
<codeline lineno="4041"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>task<sp/>being<sp/>modified<sp/>is<sp/>in<sp/>the<sp/>ready<sp/>state<sp/>it<sp/>will<sp/>need</highlight></codeline>
<codeline lineno="4042"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>be<sp/>moved<sp/>into<sp/>a<sp/>new<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4043"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a60302b468d21f8c53d13987372acb8fa" kindref="member">listIS_CONTAINED_WITHIN</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[<sp/>pxMutexHolderTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>]<sp/>),<sp/>&amp;(<sp/>pxMutexHolderTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="4044"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4045"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxMutexHolderTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>)<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="4046"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4047"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>known<sp/>that<sp/>the<sp/>task<sp/>is<sp/>in<sp/>its<sp/>ready<sp/>list<sp/>so</highlight></codeline>
<codeline lineno="4048"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>check<sp/>again<sp/>and<sp/>the<sp/>port<sp/>level</highlight></codeline>
<codeline lineno="4049"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset<sp/>macro<sp/>can<sp/>be<sp/>called<sp/>directly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a27f854590fc6fcb8b4c7955b5f13b98e" kindref="member">portRESET_READY_PRIORITY</ref>(<sp/>pxMutexHolderTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>,<sp/><ref refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" kindref="member">uxTopReadyPriority</ref><sp/>);</highlight></codeline>
<codeline lineno="4051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4055"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4056"><highlight class="normal"></highlight></codeline>
<codeline lineno="4057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Inherit<sp/>the<sp/>priority<sp/>before<sp/>being<sp/>moved<sp/>into<sp/>the<sp/>new<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4058"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxMutexHolderTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>;</highlight></codeline>
<codeline lineno="4059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxMutexHolderTCB<sp/>);</highlight></codeline>
<codeline lineno="4060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Just<sp/>inherit<sp/>the<sp/>priority.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxMutexHolderTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>;</highlight></codeline>
<codeline lineno="4065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4066"><highlight class="normal"></highlight></codeline>
<codeline lineno="4067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a4149bb2def17cb85a356c17fa6331c79" kindref="member">traceTASK_PRIORITY_INHERIT</ref>(<sp/>pxMutexHolderTCB,<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>);</highlight></codeline>
<codeline lineno="4068"><highlight class="normal"></highlight></codeline>
<codeline lineno="4069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Inheritance<sp/>occurred.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="4071"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxMutexHolderTCB-&gt;uxBasePriority<sp/>&lt;<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="4075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>base<sp/>priority<sp/>of<sp/>the<sp/>mutex<sp/>holder<sp/>is<sp/>lower<sp/>than<sp/>the</highlight></codeline>
<codeline lineno="4077"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priority<sp/>of<sp/>the<sp/>task<sp/>attempting<sp/>to<sp/>take<sp/>the<sp/>mutex,<sp/>but<sp/>the</highlight></codeline>
<codeline lineno="4078"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current<sp/>priority<sp/>of<sp/>the<sp/>mutex<sp/>holder<sp/>is<sp/>not<sp/>lower<sp/>than<sp/>the</highlight></codeline>
<codeline lineno="4079"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priority<sp/>of<sp/>the<sp/>task<sp/>attempting<sp/>to<sp/>take<sp/>the<sp/>mutex.</highlight></codeline>
<codeline lineno="4080"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Therefore<sp/>the<sp/>mutex<sp/>holder<sp/>must<sp/>have<sp/>already<sp/>inherited<sp/>a</highlight></codeline>
<codeline lineno="4081"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priority,<sp/>but<sp/>inheritance<sp/>would<sp/>have<sp/>occurred<sp/>if<sp/>that<sp/>had</highlight></codeline>
<codeline lineno="4082"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>not<sp/>been<sp/>the<sp/>case.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="4084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4087"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4090"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4091"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4092"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4094"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4095"><highlight class="normal"></highlight></codeline>
<codeline lineno="4096"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="4097"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4098"><highlight class="normal"></highlight></codeline>
<codeline lineno="4099"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4100"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4101"><highlight class="normal"></highlight></codeline>
<codeline lineno="4102"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4103"><highlight class="normal"></highlight></codeline>
<codeline lineno="4104"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="task_8h_1a02fe2e1419fd6c35f75a1357c5e5ce22" kindref="member">xTaskPriorityDisinherit</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxMutexHolder<sp/>)</highlight></codeline>
<codeline lineno="4105"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4106"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTCB<sp/>=<sp/>pxMutexHolder;</highlight></codeline>
<codeline lineno="4107"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="4108"><highlight class="normal"></highlight></codeline>
<codeline lineno="4109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxMutexHolder<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="4110"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>can<sp/>only<sp/>have<sp/>an<sp/>inherited<sp/>priority<sp/>if<sp/>it<sp/>holds<sp/>the<sp/>mutex.</highlight></codeline>
<codeline lineno="4112"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>the<sp/>mutex<sp/>is<sp/>held<sp/>by<sp/>a<sp/>task<sp/>then<sp/>it<sp/>cannot<sp/>be<sp/>given<sp/>from<sp/>an</highlight></codeline>
<codeline lineno="4113"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>interrupt,<sp/>and<sp/>if<sp/>a<sp/>mutex<sp/>is<sp/>given<sp/>by<sp/>the<sp/>holding<sp/>task<sp/>then<sp/>it<sp/>must</highlight></codeline>
<codeline lineno="4114"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>be<sp/>the<sp/>running<sp/>state<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTCB<sp/>==<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>);</highlight></codeline>
<codeline lineno="4116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTCB-&gt;uxMutexesHeld<sp/>);</highlight></codeline>
<codeline lineno="4117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxTCB-&gt;uxMutexesHeld<sp/>)--;</highlight></codeline>
<codeline lineno="4118"><highlight class="normal"></highlight></codeline>
<codeline lineno="4119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Has<sp/>the<sp/>holder<sp/>of<sp/>the<sp/>mutex<sp/>inherited<sp/>the<sp/>priority<sp/>of<sp/>another</highlight></codeline>
<codeline lineno="4120"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>task?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>!=<sp/>pxTCB-&gt;uxBasePriority<sp/>)</highlight></codeline>
<codeline lineno="4122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>disinherit<sp/>if<sp/>no<sp/>other<sp/>mutexes<sp/>are<sp/>held.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;uxMutexesHeld<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="4125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>task<sp/>can<sp/>only<sp/>have<sp/>an<sp/>inherited<sp/>priority<sp/>if<sp/>it<sp/>holds</highlight></codeline>
<codeline lineno="4127"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>mutex.<sp/><sp/>If<sp/>the<sp/>mutex<sp/>is<sp/>held<sp/>by<sp/>a<sp/>task<sp/>then<sp/>it<sp/>cannot<sp/>be</highlight></codeline>
<codeline lineno="4128"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>given<sp/>from<sp/>an<sp/>interrupt,<sp/>and<sp/>if<sp/>a<sp/>mutex<sp/>is<sp/>given<sp/>by<sp/>the</highlight></codeline>
<codeline lineno="4129"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>holding<sp/>task<sp/>then<sp/>it<sp/>must<sp/>be<sp/>the<sp/>running<sp/>state<sp/>task.<sp/><sp/>Remove</highlight></codeline>
<codeline lineno="4130"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>holding<sp/>task<sp/>from<sp/>the<sp/>ready/delayed<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>)<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="4132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a9517fc40d713aff9dd8182223948f9c8" kindref="member">taskRESET_READY_PRIORITY</ref>(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>);</highlight></codeline>
<codeline lineno="4134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4139"><highlight class="normal"></highlight></codeline>
<codeline lineno="4140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disinherit<sp/>the<sp/>priority<sp/>before<sp/>adding<sp/>the<sp/>task<sp/>into<sp/>the</highlight></codeline>
<codeline lineno="4141"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>new<sp/>ready<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1aeef741f693914ccacb456313d613c810" kindref="member">traceTASK_PRIORITY_DISINHERIT</ref>(<sp/>pxTCB,<sp/>pxTCB-&gt;uxBasePriority<sp/>);</highlight></codeline>
<codeline lineno="4143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>=<sp/>pxTCB-&gt;uxBasePriority;</highlight></codeline>
<codeline lineno="4144"><highlight class="normal"></highlight></codeline>
<codeline lineno="4145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>event<sp/>list<sp/>item<sp/>value.<sp/><sp/>It<sp/>cannot<sp/>be<sp/>in<sp/>use<sp/>for</highlight></codeline>
<codeline lineno="4146"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>any<sp/>other<sp/>purpose<sp/>if<sp/>this<sp/>task<sp/>is<sp/>running,<sp/>and<sp/>it<sp/>must<sp/>be</highlight></codeline>
<codeline lineno="4147"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>running<sp/>to<sp/>give<sp/>back<sp/>the<sp/>mutex.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" kindref="member">listSET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>),<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="4150"><highlight class="normal"></highlight></codeline>
<codeline lineno="4151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>true<sp/>to<sp/>indicate<sp/>that<sp/>a<sp/>context<sp/>switch<sp/>is<sp/>required.</highlight></codeline>
<codeline lineno="4152"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>is<sp/>only<sp/>actually<sp/>required<sp/>in<sp/>the<sp/>corner<sp/>case<sp/>whereby</highlight></codeline>
<codeline lineno="4153"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>multiple<sp/>mutexes<sp/>were<sp/>held<sp/>and<sp/>the<sp/>mutexes<sp/>were<sp/>given<sp/>back</highlight></codeline>
<codeline lineno="4154"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>in<sp/>an<sp/>order<sp/>different<sp/>to<sp/>that<sp/>in<sp/>which<sp/>they<sp/>were<sp/>taken.</highlight></codeline>
<codeline lineno="4155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>If<sp/>a<sp/>context<sp/>switch<sp/>did<sp/>not<sp/>occur<sp/>when<sp/>the<sp/>first<sp/>mutex<sp/>was</highlight></codeline>
<codeline lineno="4156"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>returned,<sp/>even<sp/>if<sp/>a<sp/>task<sp/>was<sp/>waiting<sp/>on<sp/>it,<sp/>then<sp/>a<sp/>context</highlight></codeline>
<codeline lineno="4157"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>switch<sp/>should<sp/>occur<sp/>when<sp/>the<sp/>last<sp/>mutex<sp/>is<sp/>returned<sp/>whether</highlight></codeline>
<codeline lineno="4158"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>task<sp/>is<sp/>waiting<sp/>on<sp/>it<sp/>or<sp/>not.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="4160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4170"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4172"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4174"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4175"><highlight class="normal"></highlight></codeline>
<codeline lineno="4176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="4177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4178"><highlight class="normal"></highlight></codeline>
<codeline lineno="4179"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4180"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4181"><highlight class="normal"></highlight></codeline>
<codeline lineno="4182"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4183"><highlight class="normal"></highlight></codeline>
<codeline lineno="4184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1aa11e6a58d2534fe91ed8ee3a02c9b5e0" kindref="member">vTaskPriorityDisinheritAfterTimeout</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxMutexHolder,<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxHighestPriorityWaitingTask<sp/>)</highlight></codeline>
<codeline lineno="4185"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4186"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>pxTCB<sp/>=<sp/>pxMutexHolder;</highlight></codeline>
<codeline lineno="4187"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxPriorityUsedOnEntry,<sp/>uxPriorityToUse;</highlight></codeline>
<codeline lineno="4188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxOnlyOneMutexHeld<sp/>=<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="4189"><highlight class="normal"></highlight></codeline>
<codeline lineno="4190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxMutexHolder<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="4191"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>pxMutexHolder<sp/>is<sp/>not<sp/>NULL<sp/>then<sp/>the<sp/>holder<sp/>must<sp/>hold<sp/>at<sp/>least</highlight></codeline>
<codeline lineno="4193"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>one<sp/>mutex.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTCB-&gt;uxMutexesHeld<sp/>);</highlight></codeline>
<codeline lineno="4195"><highlight class="normal"></highlight></codeline>
<codeline lineno="4196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Determine<sp/>the<sp/>priority<sp/>to<sp/>which<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>task<sp/>that</highlight></codeline>
<codeline lineno="4197"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>holds<sp/>the<sp/>mutex<sp/>should<sp/>be<sp/>set.<sp/><sp/>This<sp/>will<sp/>be<sp/>the<sp/>greater<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="4198"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>holding<sp/>task&apos;s<sp/>base<sp/>priority<sp/>and<sp/>the<sp/>priority<sp/>of<sp/>the<sp/>highest</highlight></codeline>
<codeline lineno="4199"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>priority<sp/>task<sp/>that<sp/>is<sp/>waiting<sp/>to<sp/>obtain<sp/>the<sp/>mutex.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;uxBasePriority<sp/>&lt;<sp/>uxHighestPriorityWaitingTask<sp/>)</highlight></codeline>
<codeline lineno="4201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxPriorityToUse<sp/>=<sp/>uxHighestPriorityWaitingTask;</highlight></codeline>
<codeline lineno="4203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxPriorityToUse<sp/>=<sp/>pxTCB-&gt;uxBasePriority;</highlight></codeline>
<codeline lineno="4207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4208"><highlight class="normal"></highlight></codeline>
<codeline lineno="4209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Does<sp/>the<sp/>priority<sp/>need<sp/>to<sp/>change?<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>!=<sp/>uxPriorityToUse<sp/>)</highlight></codeline>
<codeline lineno="4211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>disinherit<sp/>if<sp/>no<sp/>other<sp/>mutexes<sp/>are<sp/>held.<sp/><sp/>This<sp/>is<sp/>a</highlight></codeline>
<codeline lineno="4213"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>simplification<sp/>in<sp/>the<sp/>priority<sp/>inheritance<sp/>implementation.<sp/><sp/>If</highlight></codeline>
<codeline lineno="4214"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>task<sp/>that<sp/>holds<sp/>the<sp/>mutex<sp/>is<sp/>also<sp/>holding<sp/>other<sp/>mutexes<sp/>then</highlight></codeline>
<codeline lineno="4215"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>other<sp/>mutexes<sp/>may<sp/>have<sp/>caused<sp/>the<sp/>priority<sp/>inheritance.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;uxMutexesHeld<sp/>==<sp/>uxOnlyOneMutexHeld<sp/>)</highlight></codeline>
<codeline lineno="4217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>a<sp/>task<sp/>has<sp/>timed<sp/>out<sp/>because<sp/>it<sp/>already<sp/>holds<sp/>the</highlight></codeline>
<codeline lineno="4219"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mutex<sp/>it<sp/>was<sp/>trying<sp/>to<sp/>obtain<sp/>then<sp/>it<sp/>cannot<sp/>of<sp/>inherited</highlight></codeline>
<codeline lineno="4220"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>its<sp/>own<sp/>priority.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTCB<sp/>!=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>);</highlight></codeline>
<codeline lineno="4222"><highlight class="normal"></highlight></codeline>
<codeline lineno="4223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Disinherit<sp/>the<sp/>priority,<sp/>remembering<sp/>the<sp/>previous</highlight></codeline>
<codeline lineno="4224"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>priority<sp/>to<sp/>facilitate<sp/>determining<sp/>the<sp/>subject<sp/>task&apos;s</highlight></codeline>
<codeline lineno="4225"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1aeef741f693914ccacb456313d613c810" kindref="member">traceTASK_PRIORITY_DISINHERIT</ref>(<sp/>pxTCB,<sp/>pxTCB-&gt;uxBasePriority<sp/>);</highlight></codeline>
<codeline lineno="4227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uxPriorityUsedOnEntry<sp/>=<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>;</highlight></codeline>
<codeline lineno="4228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>=<sp/>uxPriorityToUse;</highlight></codeline>
<codeline lineno="4229"><highlight class="normal"></highlight></codeline>
<codeline lineno="4230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>reset<sp/>the<sp/>event<sp/>list<sp/>item<sp/>value<sp/>if<sp/>the<sp/>value<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="4231"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>being<sp/>used<sp/>for<sp/>anything<sp/>else.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/><ref refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" kindref="member">listGET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>&amp;<sp/><ref refid="tasks_8c_1a3e36f3eda563e810a24ab36ee7c978d4" kindref="member">taskEVENT_LIST_ITEM_VALUE_IN_USE</ref><sp/>)<sp/>==<sp/>0UL<sp/>)</highlight></codeline>
<codeline lineno="4233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" kindref="member">listSET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>),<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>uxPriorityToUse<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4240"><highlight class="normal"></highlight></codeline>
<codeline lineno="4241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>running<sp/>task<sp/>is<sp/>not<sp/>the<sp/>task<sp/>that<sp/>holds<sp/>the<sp/>mutex</highlight></codeline>
<codeline lineno="4242"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>the<sp/>task<sp/>that<sp/>holds<sp/>the<sp/>mutex<sp/>could<sp/>be<sp/>in<sp/>either<sp/>the</highlight></codeline>
<codeline lineno="4243"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ready,<sp/>Blocked<sp/>or<sp/>Suspended<sp/>states.<sp/><sp/>Only<sp/>remove<sp/>the<sp/>task</highlight></codeline>
<codeline lineno="4244"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>from<sp/>its<sp/>current<sp/>state<sp/>list<sp/>if<sp/>it<sp/>is<sp/>in<sp/>the<sp/>Ready<sp/>state<sp/>as</highlight></codeline>
<codeline lineno="4245"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>task&apos;s<sp/>priority<sp/>is<sp/>going<sp/>to<sp/>change<sp/>and<sp/>there<sp/>is<sp/>one</highlight></codeline>
<codeline lineno="4246"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ready<sp/>list<sp/>per<sp/>priority.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a60302b468d21f8c53d13987372acb8fa" kindref="member">listIS_CONTAINED_WITHIN</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1a7c4a2488f96216742ad8ffff360a98e6" kindref="member">pxReadyTasksLists</ref>[<sp/>uxPriorityUsedOnEntry<sp/>]<sp/>),<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>)<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="4248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>)<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="4250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>It<sp/>is<sp/>known<sp/>that<sp/>the<sp/>task<sp/>is<sp/>in<sp/>its<sp/>ready<sp/>list<sp/>so</highlight></codeline>
<codeline lineno="4252"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>there<sp/>is<sp/>no<sp/>need<sp/>to<sp/>check<sp/>again<sp/>and<sp/>the<sp/>port<sp/>level</highlight></codeline>
<codeline lineno="4253"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reset<sp/>macro<sp/>can<sp/>be<sp/>called<sp/>directly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a27f854590fc6fcb8b4c7955b5f13b98e" kindref="member">portRESET_READY_PRIORITY</ref>(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>,<sp/><ref refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" kindref="member">uxTopReadyPriority</ref><sp/>);</highlight></codeline>
<codeline lineno="4255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4260"><highlight class="normal"></highlight></codeline>
<codeline lineno="4261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="4262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4277"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4279"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4281"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4283"><highlight class="normal"></highlight></codeline>
<codeline lineno="4284"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4285"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4286"><highlight class="normal"></highlight></codeline>
<codeline lineno="4287"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>portCRITICAL_NESTING_IN_TCB<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4288"><highlight class="normal"></highlight></codeline>
<codeline lineno="4289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vTaskEnterCritical(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="4290"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4291"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1a6e3d10ee1a0734a647ca192523c2cfc1" kindref="member">portDISABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="4292"><highlight class="normal"></highlight></codeline>
<codeline lineno="4293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" kindref="member">xSchedulerRunning</ref><sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="4294"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;uxCriticalNesting<sp/>)++;</highlight></codeline>
<codeline lineno="4296"><highlight class="normal"></highlight></codeline>
<codeline lineno="4297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>not<sp/>the<sp/>interrupt<sp/>safe<sp/>version<sp/>of<sp/>the<sp/>enter<sp/>critical</highlight></codeline>
<codeline lineno="4298"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>so<sp/>assert()<sp/>if<sp/>it<sp/>is<sp/>being<sp/>called<sp/>from<sp/>an<sp/>interrupt</highlight></codeline>
<codeline lineno="4299"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>context.<sp/><sp/>Only<sp/>API<sp/>functions<sp/>that<sp/>end<sp/>in<sp/>&quot;FromISR&quot;<sp/>can<sp/>be<sp/>used<sp/>in<sp/>an</highlight></codeline>
<codeline lineno="4300"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>interrupt.<sp/><sp/>Only<sp/>assert<sp/>if<sp/>the<sp/>critical<sp/>nesting<sp/>count<sp/>is<sp/>1<sp/>to</highlight></codeline>
<codeline lineno="4301"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>protect<sp/>against<sp/>recursive<sp/>calls<sp/>if<sp/>the<sp/>assert<sp/>function<sp/>also<sp/>uses<sp/>a</highlight></codeline>
<codeline lineno="4302"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>critical<sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;uxCriticalNesting<sp/>==<sp/>1<sp/>)</highlight></codeline>
<codeline lineno="4304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a24a48f166f347e5201a72efcc73d0202" kindref="member">portASSERT_IF_IN_ISR</ref>();</highlight></codeline>
<codeline lineno="4306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4311"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4313"><highlight class="normal"></highlight></codeline>
<codeline lineno="4314"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>portCRITICAL_NESTING_IN_TCB<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4315"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4316"><highlight class="normal"></highlight></codeline>
<codeline lineno="4317"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>portCRITICAL_NESTING_IN_TCB<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4318"><highlight class="normal"></highlight></codeline>
<codeline lineno="4319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>vTaskExitCritical(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="4320"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1adc51acc8c40b26506a2a05aae91593fd" kindref="member">xSchedulerRunning</ref><sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="4322"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;uxCriticalNesting<sp/>&gt;<sp/>0U<sp/>)</highlight></codeline>
<codeline lineno="4324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;uxCriticalNesting<sp/>)--;</highlight></codeline>
<codeline lineno="4326"><highlight class="normal"></highlight></codeline>
<codeline lineno="4327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;uxCriticalNesting<sp/>==<sp/>0U<sp/>)</highlight></codeline>
<codeline lineno="4328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portmacro_8h_1abc47e85a6befbb47961ad5ee7aa57173" kindref="member">portENABLE_INTERRUPTS</ref>();</highlight></codeline>
<codeline lineno="4330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4340"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4344"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4345"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4346"><highlight class="normal"></highlight></codeline>
<codeline lineno="4347"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>portCRITICAL_NESTING_IN_TCB<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4348"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4349"><highlight class="normal"></highlight></codeline>
<codeline lineno="4350"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configUSE_STATS_FORMATTING_FUNCTIONS<sp/>&gt;<sp/>0<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4351"><highlight class="normal"></highlight></codeline>
<codeline lineno="4352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*prvWriteNameToBuffer(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcBuffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcTaskName<sp/>)</highlight></codeline>
<codeline lineno="4353"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="4355"><highlight class="normal"></highlight></codeline>
<codeline lineno="4356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Start<sp/>by<sp/>copying<sp/>the<sp/>entire<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4357"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(<sp/>pcBuffer,<sp/>pcTaskName<sp/>);</highlight></codeline>
<codeline lineno="4358"><highlight class="normal"></highlight></codeline>
<codeline lineno="4359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Pad<sp/>the<sp/>end<sp/>of<sp/>the<sp/>string<sp/>with<sp/>spaces<sp/>to<sp/>ensure<sp/>columns<sp/>line<sp/>up<sp/>when</highlight></codeline>
<codeline lineno="4360"><highlight class="comment"><sp/><sp/><sp/><sp/>printed<sp/>out.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>x<sp/>=<sp/>strlen(<sp/>pcBuffer<sp/>);<sp/>x<sp/>&lt;<sp/>(<sp/>size_t<sp/>)<sp/>(<sp/><ref refid="_free_r_t_o_s_config_8h_1ac388dc4041aab6997348828eb27fc1a8" kindref="member">configMAX_TASK_NAME_LEN</ref><sp/>-<sp/>1<sp/>);<sp/>x++<sp/>)</highlight></codeline>
<codeline lineno="4362"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pcBuffer[<sp/>x<sp/>]<sp/>=<sp/></highlight><highlight class="charliteral">&apos;<sp/>&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4365"><highlight class="normal"></highlight></codeline>
<codeline lineno="4366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Terminate.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4367"><highlight class="normal"><sp/><sp/><sp/><sp/>pcBuffer[<sp/>x<sp/>]<sp/>=<sp/>(<sp/>char<sp/>)<sp/>0x00;</highlight></codeline>
<codeline lineno="4368"><highlight class="normal"></highlight></codeline>
<codeline lineno="4369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>new<sp/>end<sp/>of<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>&amp;(<sp/>pcBuffer[<sp/>x<sp/>]<sp/>);</highlight></codeline>
<codeline lineno="4371"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4372"><highlight class="normal"></highlight></codeline>
<codeline lineno="4373"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configUSE_STATS_FORMATTING_FUNCTIONS<sp/>&gt;<sp/>0<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4374"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4375"><highlight class="normal"></highlight></codeline>
<codeline lineno="4376"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configUSE_STATS_FORMATTING_FUNCTIONS<sp/>&gt;<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4377"><highlight class="normal"></highlight></codeline>
<codeline lineno="4378"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ab87abc717f34ddced76802d12588a93d" kindref="member">vTaskList</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>pcWriteBuffer<sp/>)</highlight></codeline>
<codeline lineno="4379"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4380"><highlight class="normal"><sp/><sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">TaskStatus_t</ref><sp/>*pxTaskStatusArray;</highlight></codeline>
<codeline lineno="4381"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxArraySize,<sp/>x;</highlight></codeline>
<codeline lineno="4382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>cStatus;</highlight></codeline>
<codeline lineno="4383"><highlight class="normal"></highlight></codeline>
<codeline lineno="4384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4385"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>PLEASE<sp/>NOTE:</highlight></codeline>
<codeline lineno="4386"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4387"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>is<sp/>provided<sp/>for<sp/>convenience<sp/>only,<sp/>and<sp/>is<sp/>used<sp/>by<sp/>many</highlight></codeline>
<codeline lineno="4388"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>demo<sp/>applications.<sp/><sp/>Do<sp/>not<sp/>consider<sp/>it<sp/>to<sp/>be<sp/>part<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="4389"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>scheduler.</highlight></codeline>
<codeline lineno="4390"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4391"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>vTaskList()<sp/>calls<sp/>uxTaskGetSystemState(),<sp/>then<sp/>formats<sp/>part<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="4392"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>uxTaskGetSystemState()<sp/>output<sp/>into<sp/>a<sp/>human<sp/>readable<sp/>table<sp/>that</highlight></codeline>
<codeline lineno="4393"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>displays<sp/>task<sp/>names,<sp/>states<sp/>and<sp/>stack<sp/>usage.</highlight></codeline>
<codeline lineno="4394"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4395"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>vTaskList()<sp/>has<sp/>a<sp/>dependency<sp/>on<sp/>the<sp/>sprintf()<sp/>C<sp/>library<sp/>function<sp/>that</highlight></codeline>
<codeline lineno="4396"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>might<sp/>bloat<sp/>the<sp/>code<sp/>size,<sp/>use<sp/>a<sp/>lot<sp/>of<sp/>stack,<sp/>and<sp/>provide<sp/>different</highlight></codeline>
<codeline lineno="4397"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>results<sp/>on<sp/>different<sp/>platforms.<sp/><sp/>An<sp/>alternative,<sp/>tiny,<sp/>third<sp/>party,</highlight></codeline>
<codeline lineno="4398"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>and<sp/>limited<sp/>functionality<sp/>implementation<sp/>of<sp/>sprintf()<sp/>is<sp/>provided<sp/>in</highlight></codeline>
<codeline lineno="4399"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>many<sp/>of<sp/>the<sp/>FreeRTOS/Demo<sp/>sub-directories<sp/>in<sp/>a<sp/>file<sp/>called</highlight></codeline>
<codeline lineno="4400"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>printf-stdarg.c<sp/>(note<sp/>printf-stdarg.c<sp/>does<sp/>not<sp/>provide<sp/>a<sp/>full</highlight></codeline>
<codeline lineno="4401"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>snprintf()<sp/>implementation!).</highlight></codeline>
<codeline lineno="4402"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4403"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>is<sp/>recommended<sp/>that<sp/>production<sp/>systems<sp/>call<sp/>uxTaskGetSystemState()</highlight></codeline>
<codeline lineno="4404"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>directly<sp/>to<sp/>get<sp/>access<sp/>to<sp/>raw<sp/>stats<sp/>data,<sp/>rather<sp/>than<sp/>indirectly</highlight></codeline>
<codeline lineno="4405"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>through<sp/>a<sp/>call<sp/>to<sp/>vTaskList().</highlight></codeline>
<codeline lineno="4406"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4407"><highlight class="normal"></highlight></codeline>
<codeline lineno="4408"><highlight class="normal"></highlight></codeline>
<codeline lineno="4409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>the<sp/>write<sp/>buffer<sp/>does<sp/>not<sp/>contain<sp/>a<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4410"><highlight class="normal"><sp/><sp/><sp/><sp/>*pcWriteBuffer<sp/>=<sp/>(<sp/>char<sp/>)<sp/>0x00;</highlight></codeline>
<codeline lineno="4411"><highlight class="normal"></highlight></codeline>
<codeline lineno="4412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Take<sp/>a<sp/>snapshot<sp/>of<sp/>the<sp/>number<sp/>of<sp/>tasks<sp/>in<sp/>case<sp/>it<sp/>changes<sp/>while<sp/>this</highlight></codeline>
<codeline lineno="4413"><highlight class="comment"><sp/><sp/><sp/><sp/>function<sp/>is<sp/>executing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4414"><highlight class="normal"><sp/><sp/><sp/><sp/>uxArraySize<sp/>=<sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref>;</highlight></codeline>
<codeline lineno="4415"><highlight class="normal"></highlight></codeline>
<codeline lineno="4416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>an<sp/>array<sp/>index<sp/>for<sp/>each<sp/>task.<sp/><sp/>NOTE!<sp/><sp/>if</highlight></codeline>
<codeline lineno="4417"><highlight class="comment"><sp/><sp/><sp/><sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>is<sp/>set<sp/>to<sp/>0<sp/>then<sp/>pvPortMalloc()<sp/>will</highlight></codeline>
<codeline lineno="4418"><highlight class="comment"><sp/><sp/><sp/><sp/>equate<sp/>to<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4419"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTaskStatusArray<sp/>=<sp/><ref refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" kindref="member">pvPortMalloc</ref>(<sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">TaskStatus_t</ref><sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>All<sp/>values<sp/>returned<sp/>by<sp/>pvPortMalloc()<sp/>have<sp/>at<sp/>least<sp/>the<sp/>alignment<sp/>required<sp/>by<sp/>the<sp/>MCU&apos;s<sp/>stack<sp/>and<sp/>this<sp/>allocation<sp/>allocates<sp/>a<sp/>struct<sp/>that<sp/>has<sp/>the<sp/>alignment<sp/>requirements<sp/>of<sp/>a<sp/>pointer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4420"><highlight class="normal"></highlight></codeline>
<codeline lineno="4421"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTaskStatusArray<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="4422"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>the<sp/>(binary)<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxArraySize<sp/>=<sp/><ref refid="task_8h_1aa4603f3de3d809e9beb18d10fbac005d" kindref="member">uxTaskGetSystemState</ref>(<sp/>pxTaskStatusArray,<sp/>uxArraySize,<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="4425"><highlight class="normal"></highlight></codeline>
<codeline lineno="4426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>human<sp/>readable<sp/>table<sp/>from<sp/>the<sp/>binary<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>uxArraySize;<sp/>x++<sp/>)</highlight></codeline>
<codeline lineno="4428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>pxTaskStatusArray[<sp/>x<sp/>].eCurrentState<sp/>)</highlight></codeline>
<codeline lineno="4430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892ca83318c0d58e6b2bafaefa1be597fb8b6" kindref="member">eRunning</ref>:<sp/><sp/><sp/><sp/>cStatus<sp/>=<sp/><ref refid="tasks_8c_1a13f2f32dab5dee7a9b2c848c88ef9bcc" kindref="member">tskRUNNING_CHAR</ref>;</highlight></codeline>
<codeline lineno="4432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4433"><highlight class="normal"></highlight></codeline>
<codeline lineno="4434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892ca8570b65f331057b2cf92c504f0a2bc83" kindref="member">eReady</ref>:<sp/><sp/><sp/><sp/>cStatus<sp/>=<sp/><ref refid="tasks_8c_1a2fd6c7a58ad28dd1f2c1e322b1ab3fcb" kindref="member">tskREADY_CHAR</ref>;</highlight></codeline>
<codeline lineno="4435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4436"><highlight class="normal"></highlight></codeline>
<codeline lineno="4437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cad23d72c68f43b6fff4962ad4154766af" kindref="member">eBlocked</ref>:<sp/><sp/><sp/><sp/>cStatus<sp/>=<sp/><ref refid="tasks_8c_1a4cd87df39bdffff557d06f4ff15a30b0" kindref="member">tskBLOCKED_CHAR</ref>;</highlight></codeline>
<codeline lineno="4438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4439"><highlight class="normal"></highlight></codeline>
<codeline lineno="4440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892caf35a900d49fdfc2502eefc68fdb70f72" kindref="member">eSuspended</ref>:<sp/><sp/>cStatus<sp/>=<sp/><ref refid="tasks_8c_1a3613b4b66406c8f6cc73e5c3e9f208db" kindref="member">tskSUSPENDED_CHAR</ref>;</highlight></codeline>
<codeline lineno="4441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4442"><highlight class="normal"></highlight></codeline>
<codeline lineno="4443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cacef5c6e771d3a07f656e07a13a20ba35" kindref="member">eDeleted</ref>:<sp/><sp/><sp/><sp/>cStatus<sp/>=<sp/><ref refid="tasks_8c_1a9aba572191d065741f5a3e94c416d455" kindref="member">tskDELETED_CHAR</ref>;</highlight></codeline>
<codeline lineno="4444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4445"><highlight class="normal"></highlight></codeline>
<codeline lineno="4446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a1749369458e2282a22e862a619a3892cab32c771bb60dc8b502f65b81eef3bd86" kindref="member">eInvalid</ref>:<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fall<sp/>through.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>not<sp/>get<sp/>here,<sp/>but<sp/>it<sp/>is<sp/>included</highlight></codeline>
<codeline lineno="4448"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to<sp/>prevent<sp/>static<sp/>checking<sp/>errors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cStatus<sp/>=<sp/>(<sp/>char<sp/>)<sp/>0x00;</highlight></codeline>
<codeline lineno="4450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4452"><highlight class="normal"></highlight></codeline>
<codeline lineno="4453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>the<sp/>task<sp/>name<sp/>to<sp/>the<sp/>string,<sp/>padding<sp/>with<sp/>spaces<sp/>so<sp/>it</highlight></codeline>
<codeline lineno="4454"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>can<sp/>be<sp/>printed<sp/>in<sp/>tabular<sp/>form<sp/>more<sp/>easily.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcWriteBuffer<sp/>=<sp/>prvWriteNameToBuffer(<sp/>pcWriteBuffer,<sp/>pxTaskStatusArray[<sp/>x<sp/>].pcTaskName<sp/>);</highlight></codeline>
<codeline lineno="4456"><highlight class="normal"></highlight></codeline>
<codeline lineno="4457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>the<sp/>rest<sp/>of<sp/>the<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>pcWriteBuffer,<sp/></highlight><highlight class="stringliteral">&quot;\t%c\t%u\t%u\t%u\r\n&quot;</highlight><highlight class="normal">,<sp/>cStatus,<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>pxTaskStatusArray[<sp/>x<sp/>].uxCurrentPriority,<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>pxTaskStatusArray[<sp/>x<sp/>].usStackHighWaterMark,<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>pxTaskStatusArray[<sp/>x<sp/>].xTaskNumber<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e586<sp/>sprintf()<sp/>allowed<sp/>as<sp/>this<sp/>is<sp/>compiled<sp/>with<sp/>many<sp/>compilers<sp/>and<sp/>this<sp/>is<sp/>a<sp/>utility<sp/>function<sp/>only<sp/>-<sp/>not<sp/>part<sp/>of<sp/>the<sp/>core<sp/>kernel<sp/>implementation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcWriteBuffer<sp/>+=<sp/>strlen(<sp/>pcWriteBuffer<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9016<sp/>Pointer<sp/>arithmetic<sp/>ok<sp/>on<sp/>char<sp/>pointers<sp/>especially<sp/>as<sp/>in<sp/>this<sp/>case<sp/>where<sp/>it<sp/>best<sp/>denotes<sp/>the<sp/>intent<sp/>of<sp/>the<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4461"><highlight class="normal"></highlight></codeline>
<codeline lineno="4462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>the<sp/>array<sp/>again.<sp/><sp/>NOTE!<sp/><sp/>If<sp/>configSUPPORT_DYNAMIC_ALLOCATION</highlight></codeline>
<codeline lineno="4463"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>0<sp/>then<sp/>vPortFree()<sp/>will<sp/>be<sp/>#defined<sp/>to<sp/>nothing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxTaskStatusArray<sp/>);</highlight></codeline>
<codeline lineno="4465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4467"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4469"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4471"><highlight class="normal"></highlight></codeline>
<codeline lineno="4472"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>(<sp/>configUSE_TRACE_FACILITY<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configUSE_STATS_FORMATTING_FUNCTIONS<sp/>&gt;<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4473"><highlight class="normal"></highlight><highlight class="comment">/*----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4474"><highlight class="normal"></highlight></codeline>
<codeline lineno="4475"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>(<sp/>configGENERATE_RUN_TIME_STATS<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configUSE_STATS_FORMATTING_FUNCTIONS<sp/>&gt;<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4476"><highlight class="normal"></highlight></codeline>
<codeline lineno="4477"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a52da9b427041a48dc9f6802e10f151d4" kindref="member">vTaskGetRunTimeStats</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*pcWriteBuffer<sp/>)</highlight></codeline>
<codeline lineno="4478"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4479"><highlight class="normal"><sp/><sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">TaskStatus_t</ref><sp/>*pxTaskStatusArray;</highlight></codeline>
<codeline lineno="4480"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxArraySize,<sp/>x;</highlight></codeline>
<codeline lineno="4481"><highlight class="normal"><sp/><sp/>uint32_t<sp/>ulTotalTime,<sp/>ulStatsAsPercentage;</highlight></codeline>
<codeline lineno="4482"><highlight class="normal"></highlight></codeline>
<codeline lineno="4483"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#if(<sp/>configUSE_TRACE_FACILITY<sp/>!=<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4484"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4485"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#error<sp/>configUSE_TRACE_FACILITY<sp/>must<sp/>also<sp/>be<sp/>set<sp/>to<sp/>1<sp/>in<sp/>FreeRTOSConfig.h<sp/>to<sp/>use<sp/>vTaskGetRunTimeStats().</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4487"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4488"><highlight class="normal"></highlight></codeline>
<codeline lineno="4489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="4490"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>PLEASE<sp/>NOTE:</highlight></codeline>
<codeline lineno="4491"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4492"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>This<sp/>function<sp/>is<sp/>provided<sp/>for<sp/>convenience<sp/>only,<sp/>and<sp/>is<sp/>used<sp/>by<sp/>many</highlight></codeline>
<codeline lineno="4493"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>demo<sp/>applications.<sp/><sp/>Do<sp/>not<sp/>consider<sp/>it<sp/>to<sp/>be<sp/>part<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="4494"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>scheduler.</highlight></codeline>
<codeline lineno="4495"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4496"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>vTaskGetRunTimeStats()<sp/>calls<sp/>uxTaskGetSystemState(),<sp/>then<sp/>formats<sp/>part</highlight></codeline>
<codeline lineno="4497"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>of<sp/>the<sp/>uxTaskGetSystemState()<sp/>output<sp/>into<sp/>a<sp/>human<sp/>readable<sp/>table<sp/>that</highlight></codeline>
<codeline lineno="4498"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>displays<sp/>the<sp/>amount<sp/>of<sp/>time<sp/>each<sp/>task<sp/>has<sp/>spent<sp/>in<sp/>the<sp/>Running<sp/>state</highlight></codeline>
<codeline lineno="4499"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>in<sp/>both<sp/>absolute<sp/>and<sp/>percentage<sp/>terms.</highlight></codeline>
<codeline lineno="4500"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4501"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>vTaskGetRunTimeStats()<sp/>has<sp/>a<sp/>dependency<sp/>on<sp/>the<sp/>sprintf()<sp/>C<sp/>library</highlight></codeline>
<codeline lineno="4502"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>function<sp/>that<sp/>might<sp/>bloat<sp/>the<sp/>code<sp/>size,<sp/>use<sp/>a<sp/>lot<sp/>of<sp/>stack,<sp/>and</highlight></codeline>
<codeline lineno="4503"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>provide<sp/>different<sp/>results<sp/>on<sp/>different<sp/>platforms.<sp/><sp/>An<sp/>alternative,</highlight></codeline>
<codeline lineno="4504"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>tiny,<sp/>third<sp/>party,<sp/>and<sp/>limited<sp/>functionality<sp/>implementation<sp/>of</highlight></codeline>
<codeline lineno="4505"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>sprintf()<sp/>is<sp/>provided<sp/>in<sp/>many<sp/>of<sp/>the<sp/>FreeRTOS/Demo<sp/>sub-directories<sp/>in</highlight></codeline>
<codeline lineno="4506"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>file<sp/>called<sp/>printf-stdarg.c<sp/>(note<sp/>printf-stdarg.c<sp/>does<sp/>not<sp/>provide</highlight></codeline>
<codeline lineno="4507"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>a<sp/>full<sp/>snprintf()<sp/>implementation!).</highlight></codeline>
<codeline lineno="4508"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4509"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>It<sp/>is<sp/>recommended<sp/>that<sp/>production<sp/>systems<sp/>call<sp/>uxTaskGetSystemState()</highlight></codeline>
<codeline lineno="4510"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>directly<sp/>to<sp/>get<sp/>access<sp/>to<sp/>raw<sp/>stats<sp/>data,<sp/>rather<sp/>than<sp/>indirectly</highlight></codeline>
<codeline lineno="4511"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*<sp/>through<sp/>a<sp/>call<sp/>to<sp/>vTaskGetRunTimeStats().</highlight></codeline>
<codeline lineno="4512"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4513"><highlight class="normal"></highlight></codeline>
<codeline lineno="4514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Make<sp/>sure<sp/>the<sp/>write<sp/>buffer<sp/>does<sp/>not<sp/>contain<sp/>a<sp/>string.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4515"><highlight class="normal"><sp/><sp/><sp/><sp/>*pcWriteBuffer<sp/>=<sp/>(<sp/>char<sp/>)<sp/>0x00;</highlight></codeline>
<codeline lineno="4516"><highlight class="normal"></highlight></codeline>
<codeline lineno="4517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Take<sp/>a<sp/>snapshot<sp/>of<sp/>the<sp/>number<sp/>of<sp/>tasks<sp/>in<sp/>case<sp/>it<sp/>changes<sp/>while<sp/>this</highlight></codeline>
<codeline lineno="4518"><highlight class="comment"><sp/><sp/><sp/><sp/>function<sp/>is<sp/>executing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4519"><highlight class="normal"><sp/><sp/><sp/><sp/>uxArraySize<sp/>=<sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref>;</highlight></codeline>
<codeline lineno="4520"><highlight class="normal"></highlight></codeline>
<codeline lineno="4521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Allocate<sp/>an<sp/>array<sp/>index<sp/>for<sp/>each<sp/>task.<sp/><sp/>NOTE!<sp/><sp/>If</highlight></codeline>
<codeline lineno="4522"><highlight class="comment"><sp/><sp/><sp/><sp/>configSUPPORT_DYNAMIC_ALLOCATION<sp/>is<sp/>set<sp/>to<sp/>0<sp/>then<sp/>pvPortMalloc()<sp/>will</highlight></codeline>
<codeline lineno="4523"><highlight class="comment"><sp/><sp/><sp/><sp/>equate<sp/>to<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4524"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTaskStatusArray<sp/>=<sp/><ref refid="portable_8h_1ac59aab2e8ca1f2585bc5a650a14b02b8" kindref="member">pvPortMalloc</ref>(<sp/><ref refid="tasks_8c_1adb7afbe7f26cb6bef5c4e367d5a6550c" kindref="member">uxCurrentNumberOfTasks</ref><sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<sp/><ref refid="structx_t_a_s_k___s_t_a_t_u_s" kindref="compound">TaskStatus_t</ref><sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9079<sp/>All<sp/>values<sp/>returned<sp/>by<sp/>pvPortMalloc()<sp/>have<sp/>at<sp/>least<sp/>the<sp/>alignment<sp/>required<sp/>by<sp/>the<sp/>MCU&apos;s<sp/>stack<sp/>and<sp/>this<sp/>allocation<sp/>allocates<sp/>a<sp/>struct<sp/>that<sp/>has<sp/>the<sp/>alignment<sp/>requirements<sp/>of<sp/>a<sp/>pointer.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4525"><highlight class="normal"></highlight></codeline>
<codeline lineno="4526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTaskStatusArray<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="4527"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Generate<sp/>the<sp/>(binary)<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uxArraySize<sp/>=<sp/><ref refid="task_8h_1aa4603f3de3d809e9beb18d10fbac005d" kindref="member">uxTaskGetSystemState</ref>(<sp/>pxTaskStatusArray,<sp/>uxArraySize,<sp/>&amp;ulTotalTime<sp/>);</highlight></codeline>
<codeline lineno="4530"><highlight class="normal"></highlight></codeline>
<codeline lineno="4531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>For<sp/>percentage<sp/>calculations.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ulTotalTime<sp/>/=<sp/>100UL;</highlight></codeline>
<codeline lineno="4533"><highlight class="normal"></highlight></codeline>
<codeline lineno="4534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Avoid<sp/>divide<sp/>by<sp/>zero<sp/>errors.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ulTotalTime<sp/>&gt;<sp/>0UL<sp/>)</highlight></codeline>
<codeline lineno="4536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>a<sp/>human<sp/>readable<sp/>table<sp/>from<sp/>the<sp/>binary<sp/>data.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(<sp/>x<sp/>=<sp/>0;<sp/>x<sp/>&lt;<sp/>uxArraySize;<sp/>x++<sp/>)</highlight></codeline>
<codeline lineno="4539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>What<sp/>percentage<sp/>of<sp/>the<sp/>total<sp/>run<sp/>time<sp/>has<sp/>the<sp/>task<sp/>used?</highlight></codeline>
<codeline lineno="4541"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>This<sp/>will<sp/>always<sp/>be<sp/>rounded<sp/>down<sp/>to<sp/>the<sp/>nearest<sp/>integer.</highlight></codeline>
<codeline lineno="4542"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ulTotalRunTimeDiv100<sp/>has<sp/>already<sp/>been<sp/>divided<sp/>by<sp/>100.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ulStatsAsPercentage<sp/>=<sp/>pxTaskStatusArray[<sp/>x<sp/>].<ref refid="structx_t_a_s_k___s_t_a_t_u_s_1a92ab83f4f376c255dedf8e06a78261f7" kindref="member">ulRunTimeCounter</ref><sp/>/<sp/>ulTotalTime;</highlight></codeline>
<codeline lineno="4544"><highlight class="normal"></highlight></codeline>
<codeline lineno="4545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Write<sp/>the<sp/>task<sp/>name<sp/>to<sp/>the<sp/>string,<sp/>padding<sp/>with</highlight></codeline>
<codeline lineno="4546"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spaces<sp/>so<sp/>it<sp/>can<sp/>be<sp/>printed<sp/>in<sp/>tabular<sp/>form<sp/>more</highlight></codeline>
<codeline lineno="4547"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>easily.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcWriteBuffer<sp/>=<sp/>prvWriteNameToBuffer(<sp/>pcWriteBuffer,<sp/>pxTaskStatusArray[<sp/>x<sp/>].pcTaskName<sp/>);</highlight></codeline>
<codeline lineno="4549"><highlight class="normal"></highlight></codeline>
<codeline lineno="4550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ulStatsAsPercentage<sp/>&gt;<sp/>0UL<sp/>)</highlight></codeline>
<codeline lineno="4551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4552"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>portLU_PRINTF_SPECIFIER_REQUIRED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>pcWriteBuffer,<sp/></highlight><highlight class="stringliteral">&quot;\t%lu\t\t%lu%%\r\n&quot;</highlight><highlight class="normal">,<sp/>pxTaskStatusArray[<sp/>x<sp/>].ulRunTimeCounter,<sp/>ulStatsAsPercentage<sp/>);</highlight></codeline>
<codeline lineno="4555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4556"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sizeof(<sp/>int<sp/>)<sp/>==<sp/>sizeof(<sp/>long<sp/>)<sp/>so<sp/>a<sp/>smaller</highlight></codeline>
<codeline lineno="4559"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf()<sp/>library<sp/>can<sp/>be<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>pcWriteBuffer,<sp/></highlight><highlight class="stringliteral">&quot;\t%u\t\t%u%%\r\n&quot;</highlight><highlight class="normal">,<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>pxTaskStatusArray[<sp/>x<sp/>].ulRunTimeCounter,<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>ulStatsAsPercentage<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e586<sp/>sprintf()<sp/>allowed<sp/>as<sp/>this<sp/>is<sp/>compiled<sp/>with<sp/>many<sp/>compilers<sp/>and<sp/>this<sp/>is<sp/>a<sp/>utility<sp/>function<sp/>only<sp/>-<sp/>not<sp/>part<sp/>of<sp/>the<sp/>core<sp/>kernel<sp/>implementation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4562"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4564"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4565"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4566"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>percentage<sp/>is<sp/>zero<sp/>here<sp/>then<sp/>the<sp/>task<sp/>has</highlight></codeline>
<codeline lineno="4567"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>consumed<sp/>less<sp/>than<sp/>1%<sp/>of<sp/>the<sp/>total<sp/>run<sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4568"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#ifdef<sp/>portLU_PRINTF_SPECIFIER_REQUIRED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>pcWriteBuffer,<sp/></highlight><highlight class="stringliteral">&quot;\t%lu\t\t&lt;1%%\r\n&quot;</highlight><highlight class="normal">,<sp/>pxTaskStatusArray[<sp/>x<sp/>].ulRunTimeCounter<sp/>);</highlight></codeline>
<codeline lineno="4571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4572"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>sizeof(<sp/>int<sp/>)<sp/>==<sp/>sizeof(<sp/>long<sp/>)<sp/>so<sp/>a<sp/>smaller</highlight></codeline>
<codeline lineno="4575"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>printf()<sp/>library<sp/>can<sp/>be<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sprintf(<sp/>pcWriteBuffer,<sp/></highlight><highlight class="stringliteral">&quot;\t%u\t\t&lt;1%%\r\n&quot;</highlight><highlight class="normal">,<sp/>(<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>)<sp/>pxTaskStatusArray[<sp/>x<sp/>].ulRunTimeCounter<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e586<sp/>sprintf()<sp/>allowed<sp/>as<sp/>this<sp/>is<sp/>compiled<sp/>with<sp/>many<sp/>compilers<sp/>and<sp/>this<sp/>is<sp/>a<sp/>utility<sp/>function<sp/>only<sp/>-<sp/>not<sp/>part<sp/>of<sp/>the<sp/>core<sp/>kernel<sp/>implementation.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4578"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4580"><highlight class="normal"></highlight></codeline>
<codeline lineno="4581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pcWriteBuffer<sp/>+=<sp/>strlen(<sp/>pcWriteBuffer<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e9016<sp/>Pointer<sp/>arithmetic<sp/>ok<sp/>on<sp/>char<sp/>pointers<sp/>especially<sp/>as<sp/>in<sp/>this<sp/>case<sp/>where<sp/>it<sp/>best<sp/>denotes<sp/>the<sp/>intent<sp/>of<sp/>the<sp/>code.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4582"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4585"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4588"><highlight class="normal"></highlight></codeline>
<codeline lineno="4589"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Free<sp/>the<sp/>array<sp/>again.<sp/><sp/>NOTE!<sp/><sp/>If<sp/>configSUPPORT_DYNAMIC_ALLOCATION</highlight></codeline>
<codeline lineno="4590"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>0<sp/>then<sp/>vPortFree()<sp/>will<sp/>be<sp/>#defined<sp/>to<sp/>nothing.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="portable_8h_1a1e7cea2fd1bc894ea3b5f5e8179d259b" kindref="member">vPortFree</ref>(<sp/>pxTaskStatusArray<sp/>);</highlight></codeline>
<codeline lineno="4592"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4593"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4594"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4597"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4598"><highlight class="normal"></highlight></codeline>
<codeline lineno="4599"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>(<sp/>(<sp/>configGENERATE_RUN_TIME_STATS<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configUSE_STATS_FORMATTING_FUNCTIONS<sp/>&gt;<sp/>0<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>configSUPPORT_STATIC_ALLOCATION<sp/>==<sp/>1<sp/>)<sp/>)<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4600"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4601" refid="task_8h_1a7793b4bbe45c10d4c5104c126b89e87c" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="4602"><highlight class="normal"><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/><ref refid="tasks_8c_1a7ffe39eff8b9037b2de04f15a10ba717" kindref="member">uxTaskResetEventItemValue</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="4603"><highlight class="normal">{</highlight></codeline>
<codeline lineno="4604"><highlight class="normal"><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>uxReturn;</highlight></codeline>
<codeline lineno="4605"><highlight class="normal"></highlight></codeline>
<codeline lineno="4606"><highlight class="normal"><sp/><sp/>uxReturn<sp/>=<sp/><ref refid="list_8h_1aa50d09950abc602741d7ebe8387f4e1a" kindref="member">listGET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4607"><highlight class="normal"></highlight></codeline>
<codeline lineno="4608"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Reset<sp/>the<sp/>event<sp/>list<sp/>item<sp/>to<sp/>its<sp/>normal<sp/>value<sp/>-<sp/>so<sp/>it<sp/>can<sp/>be<sp/>used<sp/>with</highlight></codeline>
<codeline lineno="4609"><highlight class="comment"><sp/><sp/>queues<sp/>and<sp/>semaphores.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4610"><highlight class="normal"><sp/><sp/><ref refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" kindref="member">listSET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>),<sp/>(<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/><ref refid="_free_r_t_o_s_config_8h_1a9a78f5ac61e6cb172dadf2a51f11db38" kindref="member">configMAX_PRIORITIES</ref><sp/>-<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)<sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e961<sp/>MISRA<sp/>exception<sp/>as<sp/>the<sp/>casts<sp/>are<sp/>only<sp/>redundant<sp/>for<sp/>some<sp/>ports.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4611"><highlight class="normal"></highlight></codeline>
<codeline lineno="4612"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>uxReturn;</highlight></codeline>
<codeline lineno="4613"><highlight class="normal">}</highlight></codeline>
<codeline lineno="4614"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4615"><highlight class="normal"></highlight></codeline>
<codeline lineno="4616"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>(<sp/>configUSE_MUTEXES<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4617"><highlight class="normal"></highlight></codeline>
<codeline lineno="4618"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/><ref refid="task_8h_1a54430b124666d513049dcbf888e6935f" kindref="member">pvTaskIncrementMutexHeldCount</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="4619"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>xSemaphoreCreateMutex()<sp/>is<sp/>called<sp/>before<sp/>any<sp/>tasks<sp/>have<sp/>been<sp/>created</highlight></codeline>
<codeline lineno="4621"><highlight class="comment"><sp/><sp/><sp/><sp/>then<sp/>pxCurrentTCB<sp/>will<sp/>be<sp/>NULL.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4622"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref><sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="4623"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;uxMutexesHeld<sp/>)++;</highlight></codeline>
<codeline lineno="4625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4626"><highlight class="normal"></highlight></codeline>
<codeline lineno="4627"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>;</highlight></codeline>
<codeline lineno="4628"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4629"><highlight class="normal"></highlight></codeline>
<codeline lineno="4630"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_MUTEXES<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4631"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4632"><highlight class="normal"></highlight></codeline>
<codeline lineno="4633"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4634"><highlight class="normal"></highlight></codeline>
<codeline lineno="4635"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="task_8h_1a66540bef602522a01a519f776e4c07d8" kindref="member">ulTaskNotifyTake</ref>(<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xClearCountOnExit,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="4636"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4637"><highlight class="normal"><sp/><sp/>uint32_t<sp/>ulReturn;</highlight></codeline>
<codeline lineno="4638"><highlight class="normal"></highlight></codeline>
<codeline lineno="4639"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="4640"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>block<sp/>if<sp/>the<sp/>notification<sp/>count<sp/>is<sp/>not<sp/>already<sp/>non-zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ulNotifiedValue<sp/>==<sp/>0UL<sp/>)</highlight></codeline>
<codeline lineno="4643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mark<sp/>this<sp/>task<sp/>as<sp/>waiting<sp/>for<sp/>a<sp/>notification.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ucNotifyState<sp/>=<sp/><ref refid="tasks_8c_1acee66205293e253c13626e74798a0cf0" kindref="member">taskWAITING_NOTIFICATION</ref>;</highlight></codeline>
<codeline lineno="4646"><highlight class="normal"></highlight></codeline>
<codeline lineno="4647"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="4648"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" kindref="member">prvAddCurrentTaskToDelayedList</ref>(<sp/>xTicksToWait,<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref><sp/>);</highlight></codeline>
<codeline lineno="4650"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af6c636f9baf2eb594ffb0b6689d1b729" kindref="member">traceTASK_NOTIFY_TAKE_BLOCK</ref>();</highlight></codeline>
<codeline lineno="4651"><highlight class="normal"></highlight></codeline>
<codeline lineno="4652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>All<sp/>ports<sp/>are<sp/>written<sp/>to<sp/>allow<sp/>a<sp/>yield<sp/>in<sp/>a<sp/>critical</highlight></codeline>
<codeline lineno="4653"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>section<sp/>(some<sp/>will<sp/>yield<sp/>immediately,<sp/>others<sp/>wait<sp/>until<sp/>the</highlight></codeline>
<codeline lineno="4654"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>critical<sp/>section<sp/>exits)<sp/>-<sp/>but<sp/>it<sp/>is<sp/>not<sp/>something<sp/>that</highlight></codeline>
<codeline lineno="4655"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>application<sp/>code<sp/>should<sp/>ever<sp/>do.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="4657"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4659"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4660"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4667"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4668"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="4669"><highlight class="normal"></highlight></codeline>
<codeline lineno="4670"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="4671"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ab60d0210392d54bc0539de67c8bb3bf6" kindref="member">traceTASK_NOTIFY_TAKE</ref>();</highlight></codeline>
<codeline lineno="4673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ulReturn<sp/>=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ulNotifiedValue;</highlight></codeline>
<codeline lineno="4674"><highlight class="normal"></highlight></codeline>
<codeline lineno="4675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ulReturn<sp/>!=<sp/>0UL<sp/>)</highlight></codeline>
<codeline lineno="4676"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4677"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xClearCountOnExit<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="4678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ulNotifiedValue<sp/>=<sp/>0UL;</highlight></codeline>
<codeline lineno="4680"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4681"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ulNotifiedValue<sp/>=<sp/>ulReturn<sp/>-<sp/>(<sp/>uint32_t<sp/>)<sp/>1;</highlight></codeline>
<codeline lineno="4684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4690"><highlight class="normal"></highlight></codeline>
<codeline lineno="4691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ucNotifyState<sp/>=<sp/><ref refid="tasks_8c_1a4f2f023143b2cd2367a441e104f8cf2c" kindref="member">taskNOT_WAITING_NOTIFICATION</ref>;</highlight></codeline>
<codeline lineno="4692"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4693"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="4694"><highlight class="normal"></highlight></codeline>
<codeline lineno="4695"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ulReturn;</highlight></codeline>
<codeline lineno="4696"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4697"><highlight class="normal"></highlight></codeline>
<codeline lineno="4698"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TASK_NOTIFICATIONS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4699"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4700"><highlight class="normal"></highlight></codeline>
<codeline lineno="4701"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4702"><highlight class="normal"></highlight></codeline>
<codeline lineno="4703"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="task_8h_1a0475fcda9718f403521c270a7270ff93" kindref="member">xTaskNotifyWait</ref>(<sp/>uint32_t<sp/>ulBitsToClearOnEntry,<sp/>uint32_t<sp/>ulBitsToClearOnExit,<sp/>uint32_t<sp/>*pulNotificationValue,<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait<sp/>)</highlight></codeline>
<codeline lineno="4704"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4705"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="4706"><highlight class="normal"></highlight></codeline>
<codeline lineno="4707"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="4708"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Only<sp/>block<sp/>if<sp/>a<sp/>notification<sp/>is<sp/>not<sp/>already<sp/>pending.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ucNotifyState<sp/>!=<sp/><ref refid="tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e" kindref="member">taskNOTIFICATION_RECEIVED</ref><sp/>)</highlight></codeline>
<codeline lineno="4711"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Clear<sp/>bits<sp/>in<sp/>the<sp/>task&apos;s<sp/>notification<sp/>value<sp/>as<sp/>bits<sp/>may<sp/>get</highlight></codeline>
<codeline lineno="4713"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set<sp/>by<sp/>the<sp/>notifying<sp/>task<sp/>or<sp/>interrupt.<sp/><sp/>This<sp/>can<sp/>be<sp/>used<sp/>to</highlight></codeline>
<codeline lineno="4714"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>clear<sp/>the<sp/>value<sp/>to<sp/>zero.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ulNotifiedValue<sp/>&amp;=<sp/>~ulBitsToClearOnEntry;</highlight></codeline>
<codeline lineno="4716"><highlight class="normal"></highlight></codeline>
<codeline lineno="4717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mark<sp/>this<sp/>task<sp/>as<sp/>waiting<sp/>for<sp/>a<sp/>notification.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ucNotifyState<sp/>=<sp/><ref refid="tasks_8c_1acee66205293e253c13626e74798a0cf0" kindref="member">taskWAITING_NOTIFICATION</ref>;</highlight></codeline>
<codeline lineno="4719"><highlight class="normal"></highlight></codeline>
<codeline lineno="4720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTicksToWait<sp/>&gt;<sp/>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="4721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" kindref="member">prvAddCurrentTaskToDelayedList</ref>(<sp/>xTicksToWait,<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref><sp/>);</highlight></codeline>
<codeline lineno="4723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a42d4b4f2c5bac89d617c27902606019c" kindref="member">traceTASK_NOTIFY_WAIT_BLOCK</ref>();</highlight></codeline>
<codeline lineno="4724"><highlight class="normal"></highlight></codeline>
<codeline lineno="4725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>All<sp/>ports<sp/>are<sp/>written<sp/>to<sp/>allow<sp/>a<sp/>yield<sp/>in<sp/>a<sp/>critical</highlight></codeline>
<codeline lineno="4726"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>section<sp/>(some<sp/>will<sp/>yield<sp/>immediately,<sp/>others<sp/>wait<sp/>until<sp/>the</highlight></codeline>
<codeline lineno="4727"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>critical<sp/>section<sp/>exits)<sp/>-<sp/>but<sp/>it<sp/>is<sp/>not<sp/>something<sp/>that</highlight></codeline>
<codeline lineno="4728"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>application<sp/>code<sp/>should<sp/>ever<sp/>do.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1af4484fc07631a16e45ac5f29a3f0556e" kindref="member">portYIELD_WITHIN_API</ref>();</highlight></codeline>
<codeline lineno="4730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4737"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4738"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4739"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4740"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4741"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="4742"><highlight class="normal"></highlight></codeline>
<codeline lineno="4743"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="4744"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a32ea7a3f22b7ef8b2ddc7b98848b8446" kindref="member">traceTASK_NOTIFY_WAIT</ref>();</highlight></codeline>
<codeline lineno="4746"><highlight class="normal"></highlight></codeline>
<codeline lineno="4747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pulNotificationValue<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="4748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Output<sp/>the<sp/>current<sp/>notification<sp/>value,<sp/>which<sp/>may<sp/>or<sp/>may<sp/>not</highlight></codeline>
<codeline lineno="4750"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have<sp/>changed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4751"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pulNotificationValue<sp/>=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ulNotifiedValue;</highlight></codeline>
<codeline lineno="4752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4753"><highlight class="normal"></highlight></codeline>
<codeline lineno="4754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>ucNotifyValue<sp/>is<sp/>set<sp/>then<sp/>either<sp/>the<sp/>task<sp/>never<sp/>entered<sp/>the</highlight></codeline>
<codeline lineno="4755"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>blocked<sp/>state<sp/>(because<sp/>a<sp/>notification<sp/>was<sp/>already<sp/>pending)<sp/>or<sp/>the</highlight></codeline>
<codeline lineno="4756"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>task<sp/>unblocked<sp/>because<sp/>of<sp/>a<sp/>notification.<sp/><sp/>Otherwise<sp/>the<sp/>task</highlight></codeline>
<codeline lineno="4757"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>unblocked<sp/>because<sp/>of<sp/>a<sp/>timeout.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ucNotifyState<sp/>!=<sp/><ref refid="tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e" kindref="member">taskNOTIFICATION_RECEIVED</ref><sp/>)</highlight></codeline>
<codeline lineno="4759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>notification<sp/>was<sp/>not<sp/>received.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="4762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>A<sp/>notification<sp/>was<sp/>already<sp/>pending<sp/>or<sp/>a<sp/>notification<sp/>was</highlight></codeline>
<codeline lineno="4766"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>received<sp/>while<sp/>the<sp/>task<sp/>was<sp/>waiting.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ulNotifiedValue<sp/>&amp;=<sp/>~ulBitsToClearOnExit;</highlight></codeline>
<codeline lineno="4768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="4769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4770"><highlight class="normal"></highlight></codeline>
<codeline lineno="4771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ucNotifyState<sp/>=<sp/><ref refid="tasks_8c_1a4f2f023143b2cd2367a441e104f8cf2c" kindref="member">taskNOT_WAITING_NOTIFICATION</ref>;</highlight></codeline>
<codeline lineno="4772"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4773"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="4774"><highlight class="normal"></highlight></codeline>
<codeline lineno="4775"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="4776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4777"><highlight class="normal"></highlight></codeline>
<codeline lineno="4778"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TASK_NOTIFICATIONS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4779"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4780"><highlight class="normal"></highlight></codeline>
<codeline lineno="4781"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4782"><highlight class="normal"></highlight></codeline>
<codeline lineno="4783"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="task_8h_1aa7bd3a4f3847b83900fd6a9f1bacfe9e" kindref="member">xTaskGenericNotify</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskToNotify,<sp/>uint32_t<sp/>ulValue,<sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233" kindref="member">eNotifyAction</ref><sp/>eAction,<sp/>uint32_t<sp/>*pulPreviousNotificationValue<sp/>)</highlight></codeline>
<codeline lineno="4784"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4785"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/>pxTCB;</highlight></codeline>
<codeline lineno="4786"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="4787"><highlight class="normal"><sp/><sp/>uint8_t<sp/>ucOriginalNotifyState;</highlight></codeline>
<codeline lineno="4788"><highlight class="normal"></highlight></codeline>
<codeline lineno="4789"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xTaskToNotify<sp/>);</highlight></codeline>
<codeline lineno="4790"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/>xTaskToNotify;</highlight></codeline>
<codeline lineno="4791"><highlight class="normal"></highlight></codeline>
<codeline lineno="4792"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="4793"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pulPreviousNotificationValue<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="4795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pulPreviousNotificationValue<sp/>=<sp/>pxTCB-&gt;ulNotifiedValue;</highlight></codeline>
<codeline lineno="4797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4798"><highlight class="normal"></highlight></codeline>
<codeline lineno="4799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucOriginalNotifyState<sp/>=<sp/>pxTCB-&gt;ucNotifyState;</highlight></codeline>
<codeline lineno="4800"><highlight class="normal"></highlight></codeline>
<codeline lineno="4801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ucNotifyState<sp/>=<sp/><ref refid="tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e" kindref="member">taskNOTIFICATION_RECEIVED</ref>;</highlight></codeline>
<codeline lineno="4802"><highlight class="normal"></highlight></codeline>
<codeline lineno="4803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>eAction<sp/>)</highlight></codeline>
<codeline lineno="4804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab7b1af2eeee53ae78eeff37c1cb6f79b" kindref="member">eSetBits</ref><sp/>:</highlight></codeline>
<codeline lineno="4806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ulNotifiedValue<sp/>|=<sp/>ulValue;</highlight></codeline>
<codeline lineno="4807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4808"><highlight class="normal"></highlight></codeline>
<codeline lineno="4809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233a04fb0e98d2400e4cd28f1593bc868822" kindref="member">eIncrement</ref><sp/>:</highlight></codeline>
<codeline lineno="4810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxTCB-&gt;ulNotifiedValue<sp/>)++;</highlight></codeline>
<codeline lineno="4811"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4812"><highlight class="normal"></highlight></codeline>
<codeline lineno="4813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab61fc296ef909186b5824c823b33e130" kindref="member">eSetValueWithOverwrite</ref><sp/>:</highlight></codeline>
<codeline lineno="4814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ulNotifiedValue<sp/>=<sp/>ulValue;</highlight></codeline>
<codeline lineno="4815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4816"><highlight class="normal"></highlight></codeline>
<codeline lineno="4817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233acc4dd3fe71b62c751187a2c4c515abac" kindref="member">eSetValueWithoutOverwrite</ref><sp/>:</highlight></codeline>
<codeline lineno="4818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ucOriginalNotifyState<sp/>!=<sp/><ref refid="tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e" kindref="member">taskNOTIFICATION_RECEIVED</ref><sp/>)</highlight></codeline>
<codeline lineno="4819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ulNotifiedValue<sp/>=<sp/>ulValue;</highlight></codeline>
<codeline lineno="4821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>value<sp/>could<sp/>not<sp/>be<sp/>written<sp/>to<sp/>the<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4825"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="4826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4828"><highlight class="normal"></highlight></codeline>
<codeline lineno="4829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" kindref="member">eNoAction</ref>:</highlight></codeline>
<codeline lineno="4830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>is<sp/>being<sp/>notified<sp/>without<sp/>its<sp/>notify<sp/>value<sp/>being</highlight></codeline>
<codeline lineno="4831"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4833"><highlight class="normal"></highlight></codeline>
<codeline lineno="4834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4835"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>not<sp/>get<sp/>here<sp/>if<sp/>all<sp/>enums<sp/>are<sp/>handled.</highlight></codeline>
<codeline lineno="4836"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Artificially<sp/>force<sp/>an<sp/>assert<sp/>by<sp/>testing<sp/>a<sp/>value<sp/>the</highlight></codeline>
<codeline lineno="4837"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler<sp/>can&apos;t<sp/>assume<sp/>is<sp/>const.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4838"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTCB-&gt;ulNotifiedValue<sp/>==<sp/>~0UL<sp/>);</highlight></codeline>
<codeline lineno="4839"><highlight class="normal"></highlight></codeline>
<codeline lineno="4840"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4841"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4842"><highlight class="normal"></highlight></codeline>
<codeline lineno="4843"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a0047b9beb807b3c8b31d485532f7b077" kindref="member">traceTASK_NOTIFY</ref>();</highlight></codeline>
<codeline lineno="4844"><highlight class="normal"></highlight></codeline>
<codeline lineno="4845"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>task<sp/>is<sp/>in<sp/>the<sp/>blocked<sp/>state<sp/>specifically<sp/>to<sp/>wait<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="4846"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>notification<sp/>then<sp/>unblock<sp/>it<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ucOriginalNotifyState<sp/>==<sp/><ref refid="tasks_8c_1acee66205293e253c13626e74798a0cf0" kindref="member">taskWAITING_NOTIFICATION</ref><sp/>)</highlight></codeline>
<codeline lineno="4848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4849"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="4851"><highlight class="normal"></highlight></codeline>
<codeline lineno="4852"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>should<sp/>not<sp/>have<sp/>been<sp/>on<sp/>an<sp/>event<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="list_8h_1a7c4dff11380cd843ed0b6a8dc065916b" kindref="member">listLIST_ITEM_CONTAINER</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="4854"><highlight class="normal"></highlight></codeline>
<codeline lineno="4855"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#if(<sp/>configUSE_TICKLESS_IDLE<sp/>!=<sp/>0<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4857"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>a<sp/>task<sp/>is<sp/>blocked<sp/>waiting<sp/>for<sp/>a<sp/>notification<sp/>then</highlight></codeline>
<codeline lineno="4858"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xNextTaskUnblockTime<sp/>might<sp/>be<sp/>set<sp/>to<sp/>the<sp/>blocked<sp/>task&apos;s<sp/>time</highlight></codeline>
<codeline lineno="4859"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>time.<sp/><sp/>If<sp/>the<sp/>task<sp/>is<sp/>unblocked<sp/>for<sp/>a<sp/>reason<sp/>other<sp/>than</highlight></codeline>
<codeline lineno="4860"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>a<sp/>timeout<sp/>xNextTaskUnblockTime<sp/>is<sp/>normally<sp/>left<sp/>unchanged,</highlight></codeline>
<codeline lineno="4861"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>because<sp/>it<sp/>will<sp/>automatically<sp/>get<sp/>reset<sp/>to<sp/>a<sp/>new<sp/>value<sp/>when</highlight></codeline>
<codeline lineno="4862"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>tick<sp/>count<sp/>equals<sp/>xNextTaskUnblockTime.<sp/><sp/>However<sp/>if</highlight></codeline>
<codeline lineno="4863"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tickless<sp/>idling<sp/>is<sp/>used<sp/>it<sp/>might<sp/>be<sp/>more<sp/>important<sp/>to<sp/>enter</highlight></codeline>
<codeline lineno="4864"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sleep<sp/>mode<sp/>at<sp/>the<sp/>earliest<sp/>possible<sp/>time<sp/>-<sp/>so<sp/>reset</highlight></codeline>
<codeline lineno="4865"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xNextTaskUnblockTime<sp/>here<sp/>to<sp/>ensure<sp/>it<sp/>is<sp/>updated<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="4866"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>earliest<sp/>possible<sp/>time.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ad1b2e4995f863a99cf980836efe330d7" kindref="member">prvResetNextTaskUnblockTime</ref>();</highlight></codeline>
<codeline lineno="4868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4869"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4870"><highlight class="normal"></highlight></codeline>
<codeline lineno="4871"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&gt;<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="4872"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>notified<sp/>task<sp/>has<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>currently</highlight></codeline>
<codeline lineno="4874"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executing<sp/>task<sp/>so<sp/>a<sp/>yield<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acd0c920e40647de517ac633965b52273" kindref="member">taskYIELD_IF_USING_PREEMPTION</ref>();</highlight></codeline>
<codeline lineno="4876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4878"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4879"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="4885"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4886"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4887"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="4888"><highlight class="normal"></highlight></codeline>
<codeline lineno="4889"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="4890"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="4891"><highlight class="normal"></highlight></codeline>
<codeline lineno="4892"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TASK_NOTIFICATIONS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4893"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4894"><highlight class="normal"></highlight></codeline>
<codeline lineno="4895"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4896"><highlight class="normal"></highlight></codeline>
<codeline lineno="4897"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="task_8h_1a959c55f7950abffbc4107ce61ca52e97" kindref="member">xTaskGenericNotifyFromISR</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskToNotify,<sp/>uint32_t<sp/>ulValue,<sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233" kindref="member">eNotifyAction</ref><sp/>eAction,<sp/>uint32_t<sp/>*pulPreviousNotificationValue,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*pxHigherPriorityTaskWoken<sp/>)</highlight></codeline>
<codeline lineno="4898"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="4899"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/>pxTCB;</highlight></codeline>
<codeline lineno="4900"><highlight class="normal"><sp/><sp/>uint8_t<sp/>ucOriginalNotifyState;</highlight></codeline>
<codeline lineno="4901"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="4902"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="4903"><highlight class="normal"></highlight></codeline>
<codeline lineno="4904"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xTaskToNotify<sp/>);</highlight></codeline>
<codeline lineno="4905"><highlight class="normal"></highlight></codeline>
<codeline lineno="4906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RTOS<sp/>ports<sp/>that<sp/>support<sp/>interrupt<sp/>nesting<sp/>have<sp/>the<sp/>concept<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="4907"><highlight class="comment"><sp/><sp/><sp/><sp/>maximum<sp/>system<sp/>call<sp/>(or<sp/>maximum<sp/>API<sp/>call)<sp/>interrupt<sp/>priority.</highlight></codeline>
<codeline lineno="4908"><highlight class="comment"><sp/><sp/><sp/><sp/>Interrupts<sp/>that<sp/>are<sp/>above<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>priority<sp/>are<sp/>keep</highlight></codeline>
<codeline lineno="4909"><highlight class="comment"><sp/><sp/><sp/><sp/>permanently<sp/>enabled,<sp/>even<sp/>when<sp/>the<sp/>RTOS<sp/>kernel<sp/>is<sp/>in<sp/>a<sp/>critical<sp/>section,</highlight></codeline>
<codeline lineno="4910"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>cannot<sp/>make<sp/>any<sp/>calls<sp/>to<sp/>FreeRTOS<sp/>API<sp/>functions.<sp/><sp/>If<sp/>configASSERT()</highlight></codeline>
<codeline lineno="4911"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>defined<sp/>in<sp/>FreeRTOSConfig.h<sp/>then</highlight></codeline>
<codeline lineno="4912"><highlight class="comment"><sp/><sp/><sp/><sp/>portASSERT_IF_INTERRUPT_PRIORITY_INVALID()<sp/>will<sp/>result<sp/>in<sp/>an<sp/>assertion</highlight></codeline>
<codeline lineno="4913"><highlight class="comment"><sp/><sp/><sp/><sp/>failure<sp/>if<sp/>a<sp/>FreeRTOS<sp/>API<sp/>function<sp/>is<sp/>called<sp/>from<sp/>an<sp/>interrupt<sp/>that<sp/>has</highlight></codeline>
<codeline lineno="4914"><highlight class="comment"><sp/><sp/><sp/><sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>configured<sp/>maximum<sp/>system<sp/>call</highlight></codeline>
<codeline lineno="4915"><highlight class="comment"><sp/><sp/><sp/><sp/>priority.<sp/><sp/>Only<sp/>FreeRTOS<sp/>functions<sp/>that<sp/>end<sp/>in<sp/>FromISR<sp/>can<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="4916"><highlight class="comment"><sp/><sp/><sp/><sp/>from<sp/>interrupts<sp/>that<sp/>have<sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>at<sp/>or<sp/>(logically)</highlight></codeline>
<codeline lineno="4917"><highlight class="comment"><sp/><sp/><sp/><sp/>below<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>interrupt<sp/>priority.<sp/><sp/>FreeRTOS<sp/>maintains<sp/>a</highlight></codeline>
<codeline lineno="4918"><highlight class="comment"><sp/><sp/><sp/><sp/>separate<sp/>interrupt<sp/>safe<sp/>API<sp/>to<sp/>ensure<sp/>interrupt<sp/>entry<sp/>is<sp/>as<sp/>fast<sp/>and<sp/>as</highlight></codeline>
<codeline lineno="4919"><highlight class="comment"><sp/><sp/><sp/><sp/>simple<sp/>as<sp/>possible.<sp/><sp/>More<sp/>information<sp/>(albeit<sp/>Cortex-M<sp/>specific)<sp/>is</highlight></codeline>
<codeline lineno="4920"><highlight class="comment"><sp/><sp/><sp/><sp/>provided<sp/>on<sp/>the<sp/>following<sp/>link:</highlight></codeline>
<codeline lineno="4921"><highlight class="comment"><sp/><sp/><sp/><sp/>http://www.freertos.org/RTOS-Cortex-M3-M4.html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4922"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" kindref="member">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</ref>();</highlight></codeline>
<codeline lineno="4923"><highlight class="normal"></highlight></codeline>
<codeline lineno="4924"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/>xTaskToNotify;</highlight></codeline>
<codeline lineno="4925"><highlight class="normal"></highlight></codeline>
<codeline lineno="4926"><highlight class="normal"><sp/><sp/><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="4927"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pulPreviousNotificationValue<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="4929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pulPreviousNotificationValue<sp/>=<sp/>pxTCB-&gt;ulNotifiedValue;</highlight></codeline>
<codeline lineno="4931"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4932"><highlight class="normal"></highlight></codeline>
<codeline lineno="4933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucOriginalNotifyState<sp/>=<sp/>pxTCB-&gt;ucNotifyState;</highlight></codeline>
<codeline lineno="4934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ucNotifyState<sp/>=<sp/><ref refid="tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e" kindref="member">taskNOTIFICATION_RECEIVED</ref>;</highlight></codeline>
<codeline lineno="4935"><highlight class="normal"></highlight></codeline>
<codeline lineno="4936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(<sp/>eAction<sp/>)</highlight></codeline>
<codeline lineno="4937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab7b1af2eeee53ae78eeff37c1cb6f79b" kindref="member">eSetBits</ref><sp/>:</highlight></codeline>
<codeline lineno="4939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ulNotifiedValue<sp/>|=<sp/>ulValue;</highlight></codeline>
<codeline lineno="4940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4941"><highlight class="normal"></highlight></codeline>
<codeline lineno="4942"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233a04fb0e98d2400e4cd28f1593bc868822" kindref="member">eIncrement</ref><sp/>:</highlight></codeline>
<codeline lineno="4943"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxTCB-&gt;ulNotifiedValue<sp/>)++;</highlight></codeline>
<codeline lineno="4944"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4945"><highlight class="normal"></highlight></codeline>
<codeline lineno="4946"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233ab61fc296ef909186b5824c823b33e130" kindref="member">eSetValueWithOverwrite</ref><sp/>:</highlight></codeline>
<codeline lineno="4947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ulNotifiedValue<sp/>=<sp/>ulValue;</highlight></codeline>
<codeline lineno="4948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4949"><highlight class="normal"></highlight></codeline>
<codeline lineno="4950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233acc4dd3fe71b62c751187a2c4c515abac" kindref="member">eSetValueWithoutOverwrite</ref><sp/>:</highlight></codeline>
<codeline lineno="4951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ucOriginalNotifyState<sp/>!=<sp/><ref refid="tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e" kindref="member">taskNOTIFICATION_RECEIVED</ref><sp/>)</highlight></codeline>
<codeline lineno="4952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ulNotifiedValue<sp/>=<sp/>ulValue;</highlight></codeline>
<codeline lineno="4954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4955"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4957"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>value<sp/>could<sp/>not<sp/>be<sp/>written<sp/>to<sp/>the<sp/>task.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4958"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="4959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4961"><highlight class="normal"></highlight></codeline>
<codeline lineno="4962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="task_8h_1ae8abc4f7da5b6880467daafbf19cd233abac2b17ab15444724b6f35d47cd0a64a" kindref="member">eNoAction</ref><sp/>:</highlight></codeline>
<codeline lineno="4963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>is<sp/>being<sp/>notified<sp/>without<sp/>its<sp/>notify<sp/>value<sp/>being</highlight></codeline>
<codeline lineno="4964"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>updated.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4966"><highlight class="normal"></highlight></codeline>
<codeline lineno="4967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="4968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Should<sp/>not<sp/>get<sp/>here<sp/>if<sp/>all<sp/>enums<sp/>are<sp/>handled.</highlight></codeline>
<codeline lineno="4969"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Artificially<sp/>force<sp/>an<sp/>assert<sp/>by<sp/>testing<sp/>a<sp/>value<sp/>the</highlight></codeline>
<codeline lineno="4970"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compiler<sp/>can&apos;t<sp/>assume<sp/>is<sp/>const.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>pxTCB-&gt;ulNotifiedValue<sp/>==<sp/>~0UL<sp/>);</highlight></codeline>
<codeline lineno="4972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="4973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4974"><highlight class="normal"></highlight></codeline>
<codeline lineno="4975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1aad4d3ae692f3500f4644070fe971b646" kindref="member">traceTASK_NOTIFY_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="4976"><highlight class="normal"></highlight></codeline>
<codeline lineno="4977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>task<sp/>is<sp/>in<sp/>the<sp/>blocked<sp/>state<sp/>specifically<sp/>to<sp/>wait<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="4978"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>notification<sp/>then<sp/>unblock<sp/>it<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ucOriginalNotifyState<sp/>==<sp/><ref refid="tasks_8c_1acee66205293e253c13626e74798a0cf0" kindref="member">taskWAITING_NOTIFICATION</ref><sp/>)</highlight></codeline>
<codeline lineno="4980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>should<sp/>not<sp/>have<sp/>been<sp/>on<sp/>an<sp/>event<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="list_8h_1a7c4dff11380cd843ed0b6a8dc065916b" kindref="member">listLIST_ITEM_CONTAINER</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="4983"><highlight class="normal"></highlight></codeline>
<codeline lineno="4984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="4985"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="4988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>delayed<sp/>and<sp/>ready<sp/>lists<sp/>cannot<sp/>be<sp/>accessed,<sp/>so<sp/>hold</highlight></codeline>
<codeline lineno="4992"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>task<sp/>pending<sp/>until<sp/>the<sp/>scheduler<sp/>is<sp/>resumed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" kindref="member">vListInsertEnd</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" kindref="member">xPendingReadyList</ref><sp/>),<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="4994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="4995"><highlight class="normal"></highlight></codeline>
<codeline lineno="4996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&gt;<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="4997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="4998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>notified<sp/>task<sp/>has<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>currently</highlight></codeline>
<codeline lineno="4999"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executing<sp/>task<sp/>so<sp/>a<sp/>yield<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxHigherPriorityTaskWoken<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="5001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pxHigherPriorityTaskWoken<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="5003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5004"><highlight class="normal"></highlight></codeline>
<codeline lineno="5005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mark<sp/>that<sp/>a<sp/>yield<sp/>is<sp/>pending<sp/>in<sp/>case<sp/>the<sp/>user<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="5006"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>the<sp/>&quot;xHigherPriorityTaskWoken&quot;<sp/>parameter<sp/>to<sp/>an<sp/>ISR</highlight></codeline>
<codeline lineno="5007"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safe<sp/>FreeRTOS<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5008"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="5009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5011"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5012"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="5013"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5014"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5015"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5016"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="5017"><highlight class="normal"></highlight></codeline>
<codeline lineno="5018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="5019"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5020"><highlight class="normal"></highlight></codeline>
<codeline lineno="5021"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TASK_NOTIFICATIONS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5022"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5023"><highlight class="normal"></highlight></codeline>
<codeline lineno="5024"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5025"><highlight class="normal"></highlight></codeline>
<codeline lineno="5026"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="task_8h_1a4a4bcf98ad282a596e13f3f30582a11b" kindref="member">vTaskNotifyGiveFromISR</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTaskToNotify,<sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>*pxHigherPriorityTaskWoken<sp/>)</highlight></codeline>
<codeline lineno="5027"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5028"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*<sp/>pxTCB;</highlight></codeline>
<codeline lineno="5029"><highlight class="normal"><sp/><sp/>uint8_t<sp/>ucOriginalNotifyState;</highlight></codeline>
<codeline lineno="5030"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>uxSavedInterruptStatus;</highlight></codeline>
<codeline lineno="5031"><highlight class="normal"></highlight></codeline>
<codeline lineno="5032"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/>xTaskToNotify<sp/>);</highlight></codeline>
<codeline lineno="5033"><highlight class="normal"></highlight></codeline>
<codeline lineno="5034"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>RTOS<sp/>ports<sp/>that<sp/>support<sp/>interrupt<sp/>nesting<sp/>have<sp/>the<sp/>concept<sp/>of<sp/>a</highlight></codeline>
<codeline lineno="5035"><highlight class="comment"><sp/><sp/><sp/><sp/>maximum<sp/>system<sp/>call<sp/>(or<sp/>maximum<sp/>API<sp/>call)<sp/>interrupt<sp/>priority.</highlight></codeline>
<codeline lineno="5036"><highlight class="comment"><sp/><sp/><sp/><sp/>Interrupts<sp/>that<sp/>are<sp/>above<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>priority<sp/>are<sp/>keep</highlight></codeline>
<codeline lineno="5037"><highlight class="comment"><sp/><sp/><sp/><sp/>permanently<sp/>enabled,<sp/>even<sp/>when<sp/>the<sp/>RTOS<sp/>kernel<sp/>is<sp/>in<sp/>a<sp/>critical<sp/>section,</highlight></codeline>
<codeline lineno="5038"><highlight class="comment"><sp/><sp/><sp/><sp/>but<sp/>cannot<sp/>make<sp/>any<sp/>calls<sp/>to<sp/>FreeRTOS<sp/>API<sp/>functions.<sp/><sp/>If<sp/>configASSERT()</highlight></codeline>
<codeline lineno="5039"><highlight class="comment"><sp/><sp/><sp/><sp/>is<sp/>defined<sp/>in<sp/>FreeRTOSConfig.h<sp/>then</highlight></codeline>
<codeline lineno="5040"><highlight class="comment"><sp/><sp/><sp/><sp/>portASSERT_IF_INTERRUPT_PRIORITY_INVALID()<sp/>will<sp/>result<sp/>in<sp/>an<sp/>assertion</highlight></codeline>
<codeline lineno="5041"><highlight class="comment"><sp/><sp/><sp/><sp/>failure<sp/>if<sp/>a<sp/>FreeRTOS<sp/>API<sp/>function<sp/>is<sp/>called<sp/>from<sp/>an<sp/>interrupt<sp/>that<sp/>has</highlight></codeline>
<codeline lineno="5042"><highlight class="comment"><sp/><sp/><sp/><sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>configured<sp/>maximum<sp/>system<sp/>call</highlight></codeline>
<codeline lineno="5043"><highlight class="comment"><sp/><sp/><sp/><sp/>priority.<sp/><sp/>Only<sp/>FreeRTOS<sp/>functions<sp/>that<sp/>end<sp/>in<sp/>FromISR<sp/>can<sp/>be<sp/>called</highlight></codeline>
<codeline lineno="5044"><highlight class="comment"><sp/><sp/><sp/><sp/>from<sp/>interrupts<sp/>that<sp/>have<sp/>been<sp/>assigned<sp/>a<sp/>priority<sp/>at<sp/>or<sp/>(logically)</highlight></codeline>
<codeline lineno="5045"><highlight class="comment"><sp/><sp/><sp/><sp/>below<sp/>the<sp/>maximum<sp/>system<sp/>call<sp/>interrupt<sp/>priority.<sp/><sp/>FreeRTOS<sp/>maintains<sp/>a</highlight></codeline>
<codeline lineno="5046"><highlight class="comment"><sp/><sp/><sp/><sp/>separate<sp/>interrupt<sp/>safe<sp/>API<sp/>to<sp/>ensure<sp/>interrupt<sp/>entry<sp/>is<sp/>as<sp/>fast<sp/>and<sp/>as</highlight></codeline>
<codeline lineno="5047"><highlight class="comment"><sp/><sp/><sp/><sp/>simple<sp/>as<sp/>possible.<sp/><sp/>More<sp/>information<sp/>(albeit<sp/>Cortex-M<sp/>specific)<sp/>is</highlight></codeline>
<codeline lineno="5048"><highlight class="comment"><sp/><sp/><sp/><sp/>provided<sp/>on<sp/>the<sp/>following<sp/>link:</highlight></codeline>
<codeline lineno="5049"><highlight class="comment"><sp/><sp/><sp/><sp/>http://www.freertos.org/RTOS-Cortex-M3-M4.html<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5050"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a10f75d20c71c4289f96d1b89cb6c62e2" kindref="member">portASSERT_IF_INTERRUPT_PRIORITY_INVALID</ref>();</highlight></codeline>
<codeline lineno="5051"><highlight class="normal"></highlight></codeline>
<codeline lineno="5052"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/>xTaskToNotify;</highlight></codeline>
<codeline lineno="5053"><highlight class="normal"></highlight></codeline>
<codeline lineno="5054"><highlight class="normal"><sp/><sp/><sp/><sp/>uxSavedInterruptStatus<sp/>=<sp/><ref refid="_free_r_t_o_s_8h_1a31b4260dbc1823ba80b578f86eb15a98" kindref="member">portSET_INTERRUPT_MASK_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="5055"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5056"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ucOriginalNotifyState<sp/>=<sp/>pxTCB-&gt;ucNotifyState;</highlight></codeline>
<codeline lineno="5057"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ucNotifyState<sp/>=<sp/><ref refid="tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e" kindref="member">taskNOTIFICATION_RECEIVED</ref>;</highlight></codeline>
<codeline lineno="5058"><highlight class="normal"></highlight></codeline>
<codeline lineno="5059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>&apos;Giving&apos;<sp/>is<sp/>equivalent<sp/>to<sp/>incrementing<sp/>a<sp/>count<sp/>in<sp/>a<sp/>counting</highlight></codeline>
<codeline lineno="5060"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>semaphore.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>pxTCB-&gt;ulNotifiedValue<sp/>)++;</highlight></codeline>
<codeline lineno="5062"><highlight class="normal"></highlight></codeline>
<codeline lineno="5063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a99d95526db9937c96ba110f46bb59ee5" kindref="member">traceTASK_NOTIFY_GIVE_FROM_ISR</ref>();</highlight></codeline>
<codeline lineno="5064"><highlight class="normal"></highlight></codeline>
<codeline lineno="5065"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>task<sp/>is<sp/>in<sp/>the<sp/>blocked<sp/>state<sp/>specifically<sp/>to<sp/>wait<sp/>for<sp/>a</highlight></codeline>
<codeline lineno="5066"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>notification<sp/>then<sp/>unblock<sp/>it<sp/>now.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>ucOriginalNotifyState<sp/>==<sp/><ref refid="tasks_8c_1acee66205293e253c13626e74798a0cf0" kindref="member">taskWAITING_NOTIFICATION</ref><sp/>)</highlight></codeline>
<codeline lineno="5068"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5069"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>task<sp/>should<sp/>not<sp/>have<sp/>been<sp/>on<sp/>an<sp/>event<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5070"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_config_8h_1a228c70cd48927d6ab730ed1a6dfbe35f" kindref="member">configASSERT</ref>(<sp/><ref refid="list_8h_1a7c4dff11380cd843ed0b6a8dc065916b" kindref="member">listLIST_ITEM_CONTAINER</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>)<sp/>==<sp/>NULL<sp/>);</highlight></codeline>
<codeline lineno="5071"><highlight class="normal"></highlight></codeline>
<codeline lineno="5072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="tasks_8c_1ac177740d1c0f453ad4ee8b96183bc666" kindref="member">uxSchedulerSuspended</ref><sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)</highlight></codeline>
<codeline lineno="5073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a94afc7269fff7c906c5eb0d9d315624b" kindref="member">prvAddTaskToReadyList</ref>(<sp/>pxTCB<sp/>);</highlight></codeline>
<codeline lineno="5076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5077"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5078"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5079"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>delayed<sp/>and<sp/>ready<sp/>lists<sp/>cannot<sp/>be<sp/>accessed,<sp/>so<sp/>hold</highlight></codeline>
<codeline lineno="5080"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this<sp/>task<sp/>pending<sp/>until<sp/>the<sp/>scheduler<sp/>is<sp/>resumed.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" kindref="member">vListInsertEnd</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1af0a50cd44e760ae9c7adf77de3e91785" kindref="member">xPendingReadyList</ref><sp/>),<sp/>&amp;(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a1a1612b6081a13683808284d93a9b28f" kindref="member">xEventListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5083"><highlight class="normal"></highlight></codeline>
<codeline lineno="5084"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>&gt;<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref><sp/>)</highlight></codeline>
<codeline lineno="5085"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5086"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>notified<sp/>task<sp/>has<sp/>a<sp/>priority<sp/>above<sp/>the<sp/>currently</highlight></codeline>
<codeline lineno="5087"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executing<sp/>task<sp/>so<sp/>a<sp/>yield<sp/>is<sp/>required.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5088"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxHigherPriorityTaskWoken<sp/>!=<sp/>NULL<sp/>)</highlight></codeline>
<codeline lineno="5089"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5090"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*pxHigherPriorityTaskWoken<sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="5091"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5092"><highlight class="normal"></highlight></codeline>
<codeline lineno="5093"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Mark<sp/>that<sp/>a<sp/>yield<sp/>is<sp/>pending<sp/>in<sp/>case<sp/>the<sp/>user<sp/>is<sp/>not</highlight></codeline>
<codeline lineno="5094"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>using<sp/>the<sp/>&quot;xHigherPriorityTaskWoken&quot;<sp/>parameter<sp/>in<sp/>an<sp/>ISR</highlight></codeline>
<codeline lineno="5095"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>safe<sp/>FreeRTOS<sp/>function.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5096"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a228b369b272bd560709d52837b3ac48c" kindref="member">xYieldPending</ref><sp/>=<sp/><ref refid="projdefs_8h_1af268cf937960eb029256bd9c4d949fbe" kindref="member">pdTRUE</ref>;</highlight></codeline>
<codeline lineno="5097"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5099"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="5101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5103"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1a2661e2c5a4e4afe5bef2ebe9872e28b3" kindref="member">portCLEAR_INTERRUPT_MASK_FROM_ISR</ref>(<sp/>uxSavedInterruptStatus<sp/>);</highlight></codeline>
<codeline lineno="5105"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5106"><highlight class="normal"></highlight></codeline>
<codeline lineno="5107"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TASK_NOTIFICATIONS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5108"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5109"><highlight class="normal"></highlight></codeline>
<codeline lineno="5110"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5111"><highlight class="normal"></highlight></codeline>
<codeline lineno="5112"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/><ref refid="task_8h_1a4cb6c908a9d2d733e9d519d7dc27bb34" kindref="member">xTaskNotifyStateClear</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask<sp/>)</highlight></codeline>
<codeline lineno="5113"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5114"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="5115"><highlight class="normal"><sp/><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xReturn;</highlight></codeline>
<codeline lineno="5116"><highlight class="normal"></highlight></codeline>
<codeline lineno="5117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>null<sp/>is<sp/>passed<sp/>in<sp/>here<sp/>then<sp/>it<sp/>is<sp/>the<sp/>calling<sp/>task<sp/>that<sp/>is<sp/>having</highlight></codeline>
<codeline lineno="5118"><highlight class="comment"><sp/><sp/><sp/><sp/>its<sp/>notification<sp/>state<sp/>cleared.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5119"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="5120"><highlight class="normal"></highlight></codeline>
<codeline lineno="5121"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="5122"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>pxTCB-&gt;ucNotifyState<sp/>==<sp/><ref refid="tasks_8c_1aa62ac91d5f644c98b5459c28ae4f689e" kindref="member">taskNOTIFICATION_RECEIVED</ref><sp/>)</highlight></codeline>
<codeline lineno="5124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ucNotifyState<sp/>=<sp/><ref refid="tasks_8c_1a4f2f023143b2cd2367a441e104f8cf2c" kindref="member">taskNOT_WAITING_NOTIFICATION</ref>;</highlight></codeline>
<codeline lineno="5126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a07848d3078849bd32353c69d30a479b3" kindref="member">pdPASS</ref>;</highlight></codeline>
<codeline lineno="5127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>xReturn<sp/>=<sp/><ref refid="projdefs_8h_1a99e2866c8cf4fe86db87dab62e7d6aa6" kindref="member">pdFAIL</ref>;</highlight></codeline>
<codeline lineno="5131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5132"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5133"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="5134"><highlight class="normal"></highlight></codeline>
<codeline lineno="5135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>xReturn;</highlight></codeline>
<codeline lineno="5136"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5137"><highlight class="normal"></highlight></codeline>
<codeline lineno="5138"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TASK_NOTIFICATIONS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5139"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5140"><highlight class="normal"></highlight></codeline>
<codeline lineno="5141"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configUSE_TASK_NOTIFICATIONS<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5142"><highlight class="normal"></highlight></codeline>
<codeline lineno="5143"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="task_8h_1ae9254491975ce0adbbc879d56dd1b222" kindref="member">ulTaskNotifyValueClear</ref>(<sp/><ref refid="structtsk_task_control_block" kindref="compound">TaskHandle_t</ref><sp/>xTask,<sp/>uint32_t<sp/>ulBitsToClear<sp/>)</highlight></codeline>
<codeline lineno="5144"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5145"><highlight class="normal"><sp/><sp/><ref refid="structtsk_task_control_block" kindref="compound">TCB_t</ref><sp/>*pxTCB;</highlight></codeline>
<codeline lineno="5146"><highlight class="normal"><sp/><sp/>uint32_t<sp/>ulReturn;</highlight></codeline>
<codeline lineno="5147"><highlight class="normal"></highlight></codeline>
<codeline lineno="5148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>null<sp/>is<sp/>passed<sp/>in<sp/>here<sp/>then<sp/>it<sp/>is<sp/>the<sp/>calling<sp/>task<sp/>that<sp/>is<sp/>having</highlight></codeline>
<codeline lineno="5149"><highlight class="comment"><sp/><sp/><sp/><sp/>its<sp/>notification<sp/>state<sp/>cleared.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5150"><highlight class="normal"><sp/><sp/><sp/><sp/>pxTCB<sp/>=<sp/><ref refid="tasks_8c_1ad910f5e908283f1dfabd642fe1b11c6b" kindref="member">prvGetTCBFromHandle</ref>(<sp/>xTask<sp/>);</highlight></codeline>
<codeline lineno="5151"><highlight class="normal"></highlight></codeline>
<codeline lineno="5152"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1ab7bf0ae866292ba8296091a9d5209689" kindref="member">taskENTER_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="5153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Return<sp/>the<sp/>notification<sp/>as<sp/>it<sp/>was<sp/>before<sp/>the<sp/>bits<sp/>were<sp/>cleared,</highlight></codeline>
<codeline lineno="5155"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>then<sp/>clear<sp/>the<sp/>bit<sp/>mask.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ulReturn<sp/>=<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ulNotifiedValue;</highlight></codeline>
<codeline lineno="5157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>pxTCB-&gt;ulNotifiedValue<sp/>&amp;=<sp/>~ulBitsToClear;</highlight></codeline>
<codeline lineno="5158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5159"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="task_8h_1aac8f36abc45ac4ee714bd6b81e3b1643" kindref="member">taskEXIT_CRITICAL</ref>();</highlight></codeline>
<codeline lineno="5160"><highlight class="normal"></highlight></codeline>
<codeline lineno="5161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ulReturn;</highlight></codeline>
<codeline lineno="5162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5163"><highlight class="normal"></highlight></codeline>
<codeline lineno="5164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>configUSE_TASK_NOTIFICATIONS<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5165"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5166"><highlight class="normal"></highlight></codeline>
<codeline lineno="5167"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>(<sp/>configGENERATE_RUN_TIME_STATS<sp/>==<sp/>1<sp/>)<sp/>&amp;&amp;<sp/>(<sp/>INCLUDE_xTaskGetIdleTaskHandle<sp/>==<sp/>1<sp/>)<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5168"><highlight class="normal"></highlight></codeline>
<codeline lineno="5169"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="task_8h_1aa3d1466d43c0263448661e91681e4a9a" kindref="member">ulTaskGetIdleRunTimeCounter</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="5170"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1ac90c8a23419d8fa71919e020c433f1a6" kindref="member">xIdleTaskHandle</ref>-&gt;ulRunTimeCounter;</highlight></codeline>
<codeline lineno="5172"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5173"><highlight class="normal"></highlight></codeline>
<codeline lineno="5174"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5175"><highlight class="normal"></highlight><highlight class="comment">/*-----------------------------------------------------------*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5176" refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" refkind="member"><highlight class="normal"></highlight></codeline>
<codeline lineno="5177"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="tasks_8c_1ab4574e77d9aea876272e563c68f639da" kindref="member">prvAddCurrentTaskToDelayedList</ref>(<sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTicksToWait,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1a46fb21e00ae0729d7515c0fbf2269796" kindref="member">BaseType_t</ref><sp/>xCanBlockIndefinitely<sp/>)</highlight></codeline>
<codeline lineno="5178"><highlight class="normal">{</highlight></codeline>
<codeline lineno="5179"><highlight class="normal"><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xTimeToWake;</highlight></codeline>
<codeline lineno="5180"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="portmacro_8h_1aa69c48c6e902ce54f70886e6573c92a9" kindref="member">TickType_t</ref><sp/>xConstTickCount<sp/>=<sp/><ref refid="tasks_8c_1a98b55fbbd701ac74b2b6ab1ffc8d5a65" kindref="member">xTickCount</ref>;</highlight></codeline>
<codeline lineno="5181"><highlight class="normal"></highlight></codeline>
<codeline lineno="5182"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if(<sp/>INCLUDE_xTaskAbortDelay<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5183"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>About<sp/>to<sp/>enter<sp/>a<sp/>delayed<sp/>list,<sp/>so<sp/>ensure<sp/>the<sp/>ucDelayAborted<sp/>flag<sp/>is</highlight></codeline>
<codeline lineno="5185"><highlight class="comment"><sp/><sp/><sp/><sp/>reset<sp/>to<sp/>pdFALSE<sp/>so<sp/>it<sp/>can<sp/>be<sp/>detected<sp/>as<sp/>having<sp/>been<sp/>set<sp/>to<sp/>pdTRUE</highlight></codeline>
<codeline lineno="5186"><highlight class="comment"><sp/><sp/><sp/><sp/>when<sp/>the<sp/>task<sp/>leaves<sp/>the<sp/>Blocked<sp/>state.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5187"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;ucDelayAborted<sp/>=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref>;</highlight></codeline>
<codeline lineno="5188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5189"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5190"><highlight class="normal"></highlight></codeline>
<codeline lineno="5191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">/*<sp/>Remove<sp/>the<sp/>task<sp/>from<sp/>the<sp/>ready<sp/>list<sp/>before<sp/>adding<sp/>it<sp/>to<sp/>the<sp/>blocked<sp/>list</highlight></codeline>
<codeline lineno="5192"><highlight class="comment"><sp/><sp/>as<sp/>the<sp/>same<sp/>list<sp/>item<sp/>is<sp/>used<sp/>for<sp/>both<sp/>lists.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/><ref refid="list_8h_1a2eb1558482076fff8cafc63419c2d34a" kindref="member">uxListRemove</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>)<sp/>==<sp/>(<sp/><ref refid="portmacro_8h_1a646f89d4298e4f5afd522202b11cb2e6" kindref="member">UBaseType_t</ref><sp/>)<sp/>0<sp/>)</highlight></codeline>
<codeline lineno="5194"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>current<sp/>task<sp/>must<sp/>be<sp/>in<sp/>a<sp/>ready<sp/>list,<sp/>so<sp/>there<sp/>is<sp/>no<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="5196"><highlight class="comment"><sp/><sp/><sp/><sp/>check,<sp/>and<sp/>the<sp/>port<sp/>reset<sp/>macro<sp/>can<sp/>be<sp/>called<sp/>directly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5197"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1a27f854590fc6fcb8b4c7955b5f13b98e" kindref="member">portRESET_READY_PRIORITY</ref>(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a79187811e3d2a15595942e3b44237d85" kindref="member">uxPriority</ref>,<sp/><ref refid="tasks_8c_1aa63dabfd96985451f96aaf74c2293642" kindref="member">uxTopReadyPriority</ref><sp/>);<sp/></highlight><highlight class="comment">/*lint<sp/>!e931<sp/>pxCurrentTCB<sp/>cannot<sp/>change<sp/>as<sp/>it<sp/>is<sp/>the<sp/>calling<sp/>task.<sp/><sp/>pxCurrentTCB-&gt;uxPriority<sp/>and<sp/>uxTopReadyPriority<sp/>cannot<sp/>change<sp/>as<sp/>called<sp/>with<sp/>scheduler<sp/>suspended<sp/>or<sp/>in<sp/>a<sp/>critical<sp/>section.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5200"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5201"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="5202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5203"><highlight class="normal"></highlight></codeline>
<codeline lineno="5204"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#if<sp/>(<sp/>INCLUDE_vTaskSuspend<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5205"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(<sp/>xTicksToWait<sp/>==<sp/><ref refid="portmacro_8h_1a72723ba1e4a85ca14f25c2b9e066613d" kindref="member">portMAX_DELAY</ref><sp/>)<sp/>&amp;&amp;<sp/>(<sp/>xCanBlockIndefinitely<sp/>!=<sp/><ref refid="projdefs_8h_1aa56260e937e7e203026707e5ba944273" kindref="member">pdFALSE</ref><sp/>)<sp/>)</highlight></codeline>
<codeline lineno="5207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>task<sp/>to<sp/>the<sp/>suspended<sp/>task<sp/>list<sp/>instead<sp/>of<sp/>a<sp/>delayed<sp/>task</highlight></codeline>
<codeline lineno="5209"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>to<sp/>ensure<sp/>it<sp/>is<sp/>not<sp/>woken<sp/>by<sp/>a<sp/>timing<sp/>event.<sp/><sp/>It<sp/>will<sp/>block</highlight></codeline>
<codeline lineno="5210"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>indefinitely.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a71a6a6099b3cbd8f90539aabe5c9e572" kindref="member">vListInsertEnd</ref>(<sp/>&amp;xSuspendedTaskList,<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5212"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5214"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>time<sp/>at<sp/>which<sp/>the<sp/>task<sp/>should<sp/>be<sp/>woken<sp/>if<sp/>the<sp/>event</highlight></codeline>
<codeline lineno="5216"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>does<sp/>not<sp/>occur.<sp/><sp/>This<sp/>may<sp/>overflow<sp/>but<sp/>this<sp/>doesn&apos;t<sp/>matter,<sp/>the</highlight></codeline>
<codeline lineno="5217"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>kernel<sp/>will<sp/>manage<sp/>it<sp/>correctly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>xTimeToWake<sp/>=<sp/>xConstTickCount<sp/>+<sp/>xTicksToWait;</highlight></codeline>
<codeline lineno="5219"><highlight class="normal"></highlight></codeline>
<codeline lineno="5220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>list<sp/>item<sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>wake<sp/>time<sp/>order.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" kindref="member">listSET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>),<sp/>xTimeToWake<sp/>);</highlight></codeline>
<codeline lineno="5222"><highlight class="normal"></highlight></codeline>
<codeline lineno="5223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTimeToWake<sp/>&lt;<sp/>xConstTickCount<sp/>)</highlight></codeline>
<codeline lineno="5224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wake<sp/>time<sp/>has<sp/>overflowed.<sp/><sp/>Place<sp/>this<sp/>item<sp/>in<sp/>the<sp/>overflow</highlight></codeline>
<codeline lineno="5226"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1aa129290da5cbda47dffb7bf877b2f02a" kindref="member">vListInsert</ref>(<sp/><ref refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" kindref="member">pxOverflowDelayedTaskList</ref>,<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>wake<sp/>time<sp/>has<sp/>not<sp/>overflowed,<sp/>so<sp/>the<sp/>current<sp/>block<sp/>list</highlight></codeline>
<codeline lineno="5232"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>is<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1aa129290da5cbda47dffb7bf877b2f02a" kindref="member">vListInsert</ref>(<sp/><ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref>,<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5234"><highlight class="normal"></highlight></codeline>
<codeline lineno="5235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>task<sp/>entering<sp/>the<sp/>blocked<sp/>state<sp/>was<sp/>placed<sp/>at<sp/>the</highlight></codeline>
<codeline lineno="5236"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>head<sp/>of<sp/>the<sp/>list<sp/>of<sp/>blocked<sp/>tasks<sp/>then<sp/>xNextTaskUnblockTime</highlight></codeline>
<codeline lineno="5237"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>needs<sp/>to<sp/>be<sp/>updated<sp/>too.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTimeToWake<sp/>&lt;<sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>)</highlight></codeline>
<codeline lineno="5239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>=<sp/>xTimeToWake;</highlight></codeline>
<codeline lineno="5241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="5245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5247"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5249"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#else<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskSuspend<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5250"><highlight class="normal"><sp/><sp/>{</highlight></codeline>
<codeline lineno="5251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>time<sp/>at<sp/>which<sp/>the<sp/>task<sp/>should<sp/>be<sp/>woken<sp/>if<sp/>the<sp/>event</highlight></codeline>
<codeline lineno="5252"><highlight class="comment"><sp/><sp/><sp/><sp/>does<sp/>not<sp/>occur.<sp/><sp/>This<sp/>may<sp/>overflow<sp/>but<sp/>this<sp/>doesn&apos;t<sp/>matter,<sp/>the<sp/>kernel</highlight></codeline>
<codeline lineno="5253"><highlight class="comment"><sp/><sp/><sp/><sp/>will<sp/>manage<sp/>it<sp/>correctly.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5254"><highlight class="normal"><sp/><sp/><sp/><sp/>xTimeToWake<sp/>=<sp/>xConstTickCount<sp/>+<sp/>xTicksToWait;</highlight></codeline>
<codeline lineno="5255"><highlight class="normal"></highlight></codeline>
<codeline lineno="5256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>list<sp/>item<sp/>will<sp/>be<sp/>inserted<sp/>in<sp/>wake<sp/>time<sp/>order.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5257"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="list_8h_1a83e95e61652f032fdc26aa622f5e2610" kindref="member">listSET_LIST_ITEM_VALUE</ref>(<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>),<sp/>xTimeToWake<sp/>);</highlight></codeline>
<codeline lineno="5258"><highlight class="normal"></highlight></codeline>
<codeline lineno="5259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTimeToWake<sp/>&lt;<sp/>xConstTickCount<sp/>)</highlight></codeline>
<codeline lineno="5260"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Wake<sp/>time<sp/>has<sp/>overflowed.<sp/><sp/>Place<sp/>this<sp/>item<sp/>in<sp/>the<sp/>overflow<sp/>list.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1aa129290da5cbda47dffb7bf877b2f02a" kindref="member">vListInsert</ref>(<sp/><ref refid="tasks_8c_1a807ccd06933ebea592c86f91004f85aa" kindref="member">pxOverflowDelayedTaskList</ref>,<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5264"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5265"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>The<sp/>wake<sp/>time<sp/>has<sp/>not<sp/>overflowed,<sp/>so<sp/>the<sp/>current<sp/>block<sp/>list<sp/>is<sp/>used.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="list_8h_1aa129290da5cbda47dffb7bf877b2f02a" kindref="member">vListInsert</ref>(<sp/><ref refid="tasks_8c_1adce0027ea7792541f2851462ac3581a6" kindref="member">pxDelayedTaskList</ref>,<sp/>&amp;(<sp/><ref refid="tasks_8c_1acdecf2afe97343aba42b111bc6df9eea" kindref="member">pxCurrentTCB</ref>-&gt;<ref refid="structtsk_task_control_block_1a16e0d20425d53ac78537e1fdb8834cf6" kindref="member">xStateListItem</ref><sp/>)<sp/>);</highlight></codeline>
<codeline lineno="5268"><highlight class="normal"></highlight></codeline>
<codeline lineno="5269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>task<sp/>entering<sp/>the<sp/>blocked<sp/>state<sp/>was<sp/>placed<sp/>at<sp/>the<sp/>head<sp/>of<sp/>the</highlight></codeline>
<codeline lineno="5270"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>list<sp/>of<sp/>blocked<sp/>tasks<sp/>then<sp/>xNextTaskUnblockTime<sp/>needs<sp/>to<sp/>be<sp/>updated</highlight></codeline>
<codeline lineno="5271"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/>too.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>xTimeToWake<sp/>&lt;<sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>)</highlight></codeline>
<codeline lineno="5273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="tasks_8c_1ac9869547a39abae93ce9ad092d580445" kindref="member">xNextTaskUnblockTime</ref><sp/>=<sp/>xTimeToWake;</highlight></codeline>
<codeline lineno="5275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_free_r_t_o_s_8h_1ac77e2af1a6b0d38fbab36cf2aa96f1a8" kindref="member">mtCOVERAGE_TEST_MARKER</ref>();</highlight></codeline>
<codeline lineno="5279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5280"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5281"><highlight class="normal"></highlight></codeline>
<codeline lineno="5282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Avoid<sp/>compiler<sp/>warning<sp/>when<sp/>INCLUDE_vTaskSuspend<sp/>is<sp/>not<sp/>1.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5283"><highlight class="normal"><sp/><sp/><sp/><sp/>(<sp/>void<sp/>)<sp/>xCanBlockIndefinitely;</highlight></codeline>
<codeline lineno="5284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="5285"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDE_vTaskSuspend<sp/>*/</highlight><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="5287"><highlight class="normal"></highlight></codeline>
<codeline lineno="5288"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Code<sp/>below<sp/>here<sp/>allows<sp/>additional<sp/>code<sp/>to<sp/>be<sp/>inserted<sp/>into<sp/>this<sp/>source<sp/>file,</highlight></codeline>
<codeline lineno="5289"><highlight class="comment">especially<sp/>where<sp/>access<sp/>to<sp/>file<sp/>scope<sp/>functions<sp/>and<sp/>data<sp/>is<sp/>needed<sp/>(for<sp/>example</highlight></codeline>
<codeline lineno="5290"><highlight class="comment">when<sp/>performing<sp/>module<sp/>tests).<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5291"><highlight class="normal"></highlight></codeline>
<codeline lineno="5292"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>FREERTOS_MODULE_TEST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5293"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;tasks_test_access_functions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5294"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5295"><highlight class="normal"></highlight></codeline>
<codeline lineno="5296"><highlight class="normal"></highlight></codeline>
<codeline lineno="5297"><highlight class="normal"></highlight><highlight class="preprocessor">#if(<sp/>configINCLUDE_FREERTOS_TASK_C_ADDITIONS_H<sp/>==<sp/>1<sp/>)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5298"><highlight class="normal"></highlight></codeline>
<codeline lineno="5299"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#include<sp/>&quot;freertos_tasks_c_additions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5300"><highlight class="normal"></highlight></codeline>
<codeline lineno="5301"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#ifdef<sp/>FREERTOS_TASKS_C_ADDITIONS_INIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5302"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>freertos_tasks_c_additions_init(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>)</highlight></codeline>
<codeline lineno="5303"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="5304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FREERTOS_TASKS_C_ADDITIONS_INIT();</highlight></codeline>
<codeline lineno="5305"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="5306"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5307"><highlight class="normal"></highlight></codeline>
<codeline lineno="5308"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5309"><highlight class="normal"></highlight></codeline>
<codeline lineno="5310"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="NUCLEO-G0B1RE/FreeRTOS_Queues/Middlewares/Third_Party/FreeRTOS/Source/tasks.c"/>
  </compounddef>
</doxygen>
